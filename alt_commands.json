[
    {
        "repo_id": 602680675,
        "user_id": 3415007,
        "timestamp": "2023-02-18T20:23:50.463204",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 602178803,
        "user_id": 2196226,
        "timestamp": "2023-02-18T20:23:58.069179",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 601142017,
        "user_id": 5738005,
        "timestamp": "2023-02-18T20:24:05.684868",
        "branch": "main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ape": "a",
                    "kick": "k",
                    "tool": "t"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "exit": "escape"
                }
            },
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\"",
                    "number <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/text/text.talon",
                "context": "text",
                "commands": {
                    "scratch that": "user.clear_last_phrase()"
                }
            }
        ]
    },
    {
        "repo_id": 600132740,
        "user_id": 15082201,
        "timestamp": "2023-02-18T20:24:13.183086",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 599632503,
        "user_id": 28008309,
        "timestamp": "2023-02-18T20:24:20.675068",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 598813141,
        "user_id": 6548259,
        "timestamp": "2023-02-18T20:24:28.237842",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 598810831,
        "user_id": 397693,
        "timestamp": "2023-02-18T20:24:35.898679",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 597340734,
        "user_id": 25068055,
        "timestamp": "2023-02-18T20:24:43.534676",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 594652531,
        "user_id": 6800337,
        "timestamp": "2023-02-18T20:24:50.970550",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 593409936,
        "user_id": 539362,
        "timestamp": "2023-02-18T20:24:58.433810",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592495740,
        "user_id": 320423,
        "timestamp": "2023-02-18T20:25:06.008922",
        "branch": "local",
        "command_groups": []
    },
    {
        "repo_id": 592347204,
        "user_id": 56445556,
        "timestamp": "2023-02-18T20:25:13.600688",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/talon_helpers/talon_helpers.talon",
                "context": "talon helpers",
                "commands": {
                    "talon log": "menu.open_log()",
                    "talon rebel": "menu.open_repl()"
                }
            }
        ]
    },
    {
        "repo_id": 592322224,
        "user_id": 45182266,
        "timestamp": "2023-02-18T20:25:21.327620",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592318062,
        "user_id": 10117923,
        "timestamp": "2023-02-18T20:25:29.073058",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592094277,
        "user_id": 765873,
        "timestamp": "2023-02-18T20:25:36.625249",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 591689963,
        "user_id": 19639235,
        "timestamp": "2023-02-18T20:25:44.391324",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 589258168,
        "user_id": 5691885,
        "timestamp": "2023-02-18T20:25:51.907139",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 588936367,
        "user_id": 4489798,
        "timestamp": "2023-02-18T20:25:59.574762",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 588450380,
        "user_id": 72509152,
        "timestamp": "2023-02-18T20:26:07.301408",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "mid [click]": "mouse_click(2)\nuser.grid_close()",
                    "from": "user.mouse_drag(0)\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 587002217,
        "user_id": 7474841,
        "timestamp": "2023-02-18T20:26:14.844930",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 586622873,
        "user_id": 29872150,
        "timestamp": "2023-02-18T20:26:22.288272",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 585977534,
        "user_id": 8966510,
        "timestamp": "2023-02-18T20:26:29.923792",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 585432524,
        "user_id": 74335726,
        "timestamp": "2023-02-18T20:26:37.545096",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 583142942,
        "user_id": 25789997,
        "timestamp": "2023-02-18T20:26:45.080716",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 583142873,
        "user_id": 91676062,
        "timestamp": "2023-02-18T20:26:52.669928",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "snore [<phrase>]": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()"
                }
            }
        ]
    },
    {
        "repo_id": 582085641,
        "user_id": 14122204,
        "timestamp": "2023-02-18T20:27:00.451789",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 582046487,
        "user_id": 16196664,
        "timestamp": "2023-02-18T20:27:08.005171",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "revert that": "edit.undo()"
                }
            }
        ]
    },
    {
        "repo_id": 581707170,
        "user_id": 26844679,
        "timestamp": "2023-02-18T20:27:15.994652",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 581201143,
        "user_id": 68368,
        "timestamp": "2023-02-18T20:27:23.680140",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 581108607,
        "user_id": 4075619,
        "timestamp": "2023-02-18T20:27:31.544991",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 579560001,
        "user_id": 727316,
        "timestamp": "2023-02-18T20:27:39.218631",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/homophones/homophones.talon",
                "context": "homophones",
                "commands": {
                    "[homo]phones <user.homophones_canonical>": "user.homophones_show(homophones_canonical)",
                    "[homo]phones that": "user.homophones_show_auto()",
                    "[homo]phones force <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "[homo]phones force": "user.homophones_force_show_selection()",
                    "[homo]phones hide": "user.homophones_hide()",
                    "[homo]phones word": "edit.select_word()\nuser.homophones_show_selection()",
                    "[homo]phones [<user.ordinals>] word left": "n = ordinals or 1\nuser.words_left(n - 1)\nedit.extend_word_left()\nuser.homophones_show_selection()",
                    "[homo]phones [<user.ordinals>] word right": "n = ordinals or 1\nuser.words_right(n - 1)\nedit.extend_word_right()\nuser.homophones_show_selection()"
                }
            }
        ]
    },
    {
        "repo_id": 576381228,
        "user_id": 40808308,
        "timestamp": "2023-02-18T20:27:46.854263",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 575629338,
        "user_id": 12850469,
        "timestamp": "2023-02-18T20:27:54.463847",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 575589101,
        "user_id": 7552754,
        "timestamp": "2023-02-18T20:28:02.144919",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 573925737,
        "user_id": 58166507,
        "timestamp": "2023-02-18T20:28:09.955942",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 573921536,
        "user_id": 31699010,
        "timestamp": "2023-02-18T20:28:17.988862",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "sleepeth [<phrase>]": "speech.disable()",
                    "waketh": "speech.enable()"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "revert": "edit.undo()"
                }
            }
        ]
    },
    {
        "repo_id": 571719141,
        "user_id": 119351300,
        "timestamp": "2023-02-18T20:28:25.737268",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 570266626,
        "user_id": 29164476,
        "timestamp": "2023-02-18T20:28:33.400629",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 570219774,
        "user_id": 2718922,
        "timestamp": "2023-02-18T20:28:41.073975",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 569965421,
        "user_id": 57516032,
        "timestamp": "2023-02-18T20:28:49.445273",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 569416578,
        "user_id": 98099035,
        "timestamp": "2023-02-18T20:28:57.510097",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "drowse": "speech.disable()"
                }
            },
            {
                "file": "plugin/datetimeinsert/datetimeinsert.talon",
                "context": "datetimeinsert",
                "commands": {
                    "f555date insert": "insert(user.time_format(\"%Y-%m-%d\"))"
                }
            }
        ]
    },
    {
        "repo_id": 568823815,
        "user_id": 2981597,
        "timestamp": "2023-02-18T20:29:05.100876",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568706581,
        "user_id": 16426130,
        "timestamp": "2023-02-18T20:29:12.961459",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568589200,
        "user_id": 82854984,
        "timestamp": "2023-02-18T20:29:20.842067",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568511252,
        "user_id": 53965859,
        "timestamp": "2023-02-18T20:29:28.542988",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568206766,
        "user_id": 3528358,
        "timestamp": "2023-02-18T20:29:36.559027",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 567731813,
        "user_id": 80285168,
        "timestamp": "2023-02-18T20:29:44.460657",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 566937628,
        "user_id": 55260287,
        "timestamp": "2023-02-18T20:29:52.696576",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 566128459,
        "user_id": 550498,
        "timestamp": "2023-02-18T20:30:00.513341",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 564555269,
        "user_id": 7076013,
        "timestamp": "2023-02-18T20:30:08.835721",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 563958851,
        "user_id": 20151962,
        "timestamp": "2023-02-18T20:30:16.433996",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "search it": "edit.find()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab <number>": "user.tab_jump(number)",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 563542758,
        "user_id": 10467917,
        "timestamp": "2023-02-18T20:30:24.521656",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 561466012,
        "user_id": 49523965,
        "timestamp": "2023-02-18T20:30:32.491574",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 561367793,
        "user_id": 39572440,
        "timestamp": "2023-02-18T20:30:39.947436",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 560451873,
        "user_id": 65181771,
        "timestamp": "2023-02-18T20:30:47.791896",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 560202404,
        "user_id": 22231483,
        "timestamp": "2023-02-18T20:30:55.963555",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 560169066,
        "user_id": 7253893,
        "timestamp": "2023-02-18T20:31:04.263922",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 559763681,
        "user_id": 1012677,
        "timestamp": "2023-02-18T20:31:12.263578",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 558793918,
        "user_id": 4503878,
        "timestamp": "2023-02-18T20:31:20.009095",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 558594525,
        "user_id": 54390138,
        "timestamp": "2023-02-18T20:31:27.680853",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 558022029,
        "user_id": 33682347,
        "timestamp": "2023-02-18T20:31:35.279259",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 557452451,
        "user_id": 3249377,
        "timestamp": "2023-02-18T20:31:42.886919",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 557336214,
        "user_id": 38117965,
        "timestamp": "2023-02-18T20:31:50.400555",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "go to beginning of line": "edit.line_start()",
                    "go to end of line": "edit.line_end()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 557229217,
        "user_id": 51489,
        "timestamp": "2023-02-18T20:31:58.216557",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "nope": "edit.undo()",
                    "actually yes": "edit.redo()",
                    "disc": "edit.save()",
                    "disc all": "edit.save_all()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 554655437,
        "user_id": 229440,
        "timestamp": "2023-02-18T20:32:06.540105",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 552537978,
        "user_id": 16718876,
        "timestamp": "2023-02-18T20:32:14.306528",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 544707972,
        "user_id": 12524534,
        "timestamp": "2023-02-18T20:32:21.884488",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 542781592,
        "user_id": 1354217,
        "timestamp": "2023-02-18T20:32:29.948076",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 541779922,
        "user_id": 24294152,
        "timestamp": "2023-02-18T20:32:37.946283",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 541665278,
        "user_id": 7978904,
        "timestamp": "2023-02-18T20:32:46.363817",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 541009245,
        "user_id": 7240386,
        "timestamp": "2023-02-18T20:32:53.978068",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "nope": "edit.undo()"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 540728826,
        "user_id": 90379565,
        "timestamp": "2023-02-18T20:33:01.781865",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 539656485,
        "user_id": 13223795,
        "timestamp": "2023-02-18T20:33:09.392774",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 539039481,
        "user_id": 18036223,
        "timestamp": "2023-02-18T20:33:17.085101",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 537928159,
        "user_id": 15314312,
        "timestamp": "2023-02-18T20:33:25.545090",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 537409656,
        "user_id": 16436823,
        "timestamp": "2023-02-18T20:33:33.283901",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 534842109,
        "user_id": 78572,
        "timestamp": "2023-02-18T20:33:40.787737",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 533290089,
        "user_id": 7077307,
        "timestamp": "2023-02-18T20:33:49.301558",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            }
        ]
    },
    {
        "repo_id": 533026851,
        "user_id": 555667,
        "timestamp": "2023-02-18T20:33:56.875812",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 532742563,
        "user_id": 12457438,
        "timestamp": "2023-02-18T20:34:04.528041",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 532610966,
        "user_id": 113401,
        "timestamp": "2023-02-18T20:34:11.971147",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 532168011,
        "user_id": 976996,
        "timestamp": "2023-02-18T20:34:20.427380",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 531375840,
        "user_id": 1504248,
        "timestamp": "2023-02-18T20:34:28.081300",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 529525771,
        "user_id": 12852862,
        "timestamp": "2023-02-18T20:34:35.724046",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 528566993,
        "user_id": 82664495,
        "timestamp": "2023-02-18T20:34:43.823466",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 526717198,
        "user_id": 37745719,
        "timestamp": "2023-02-18T20:34:51.275920",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 526337853,
        "user_id": 1464575,
        "timestamp": "2023-02-18T20:34:59.162208",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 525920611,
        "user_id": 5057485,
        "timestamp": "2023-02-18T20:35:06.689260",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 525094745,
        "user_id": 808964,
        "timestamp": "2023-02-18T20:35:14.121872",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 525087197,
        "user_id": 13979325,
        "timestamp": "2023-02-18T20:35:21.956428",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 524607755,
        "user_id": 5680466,
        "timestamp": "2023-02-18T20:35:29.440799",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 524324214,
        "user_id": 105229118,
        "timestamp": "2023-02-18T20:35:37.053068",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 523588943,
        "user_id": 1329067,
        "timestamp": "2023-02-18T20:35:44.860684",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "pan up": "edit.page_up()",
                    "pan down": "edit.page_down()",
                    "(pace | paste) shock": "edit.paste()\nkey(enter)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "left drag": "user.mouse_drag(0)\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 523358569,
        "user_id": 43091450,
        "timestamp": "2023-02-18T20:35:52.456430",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 523352895,
        "user_id": 104951320,
        "timestamp": "2023-02-18T20:36:00.158096",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 523047675,
        "user_id": 1829313,
        "timestamp": "2023-02-18T20:36:08.566854",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 522651928,
        "user_id": 68566724,
        "timestamp": "2023-02-18T20:36:16.053098",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 522615139,
        "user_id": 465102,
        "timestamp": "2023-02-18T20:36:23.496000",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 522573985,
        "user_id": 19432538,
        "timestamp": "2023-02-18T20:36:31.048036",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "cap it": "user.dictation_reformat_cap()",
                    "(no cap | no-caps) it": "user.dictation_reformat_no_cap()",
                    "(no space | no-space) it": "user.dictation_reformat_no_space()",
                    "scratch it": "user.clear_last_phrase()",
                    "select it": "user.select_last_phrase()",
                    "spell it <user.letters>": "user.dictation_insert(letters)",
                    "spell it <user.formatters> <user.letters>": "result = user.formatted_text(letters, formatters)\nuser.dictation_insert_raw(result)"
                }
            },
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "only mouse mode": "speech.disable()"
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "go {user.website}": "user.open_url(website)",
                    "{user.search_engine} this": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "(carve it | carve selection)": "edit.cut()",
                    "(pace | paste) it": "edit.paste()",
                    "undo it": "edit.undo()",
                    "redo it": "edit.redo()",
                    "(pace | paste) plain": "edit.paste_match_style()",
                    "(pace | paste) match style": "edit.paste_match_style()",
                    "(file | five) save": "edit.save()",
                    "(file | five) save all": "edit.save_all()",
                    "padding": "user.insert_between(\" \", \" \")",
                    "padding <user.symbol_key>+": "insert(\" \")\nuser.insert_many(symbol_key_list)\ninsert(\" \")",
                    "new (line | row)": "edit.line_insert_down()",
                    "(line | row) new": "edit.line_insert_down()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "pre": "edit.word_left()",
                    "(go | scroll) way down": "edit.file_end()",
                    "(go | scroll) way up": "edit.file_start()",
                    "(go | scroll) bottom": "edit.file_end()",
                    "(go | scroll) top": "edit.file_start()",
                    "indent": "edit.indent_more()",
                    "(indent less | dedent)": "edit.indent_less()",
                    "(clear word left | cleft)": "edit.extend_word_left()\nedit.delete()",
                    "(clear word right | cright)": "edit.extend_word_right()\nedit.delete()",
                    "carve line": "user.cut_line()"
                }
            },
            {
                "file": "core/homophones/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones it": "user.homophones_show_auto()"
                }
            },
            {
                "file": "core/windows_and_tabs/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (last | previous)": "app.window_previous()",
                    "running [list] close": "user.switcher_hide_running()",
                    "snap (last | previous) [screen]": "user.move_window_previous_screen()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (close | plus)": "user.tab_close_wrapper()",
                    "ten (close | plus)": "user.tab_close_wrapper()",
                    "tab <number>": "user.tab_jump(number)",
                    "tab final": "user.tab_final()",
                    "tab new here": "app.tab_open()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "(ship | uppercase) <user.letters> [(sunk | lowercase | over)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "core/text/text.talon",
                "context": "text",
                "commands": {
                    "<user.formatters> selection": "user.formatters_reformat_selection(user.formatters)",
                    "(nope | scratch) it": "user.clear_last_phrase()",
                    "nope it was <user.formatters>": "user.formatters_reformat_last(formatters)"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(left drag | drag)": "user.mouse_drag(0)\nuser.grid_close()",
                    "(right drag | righty drag)": "user.mouse_drag(1)\nuser.grid_close()",
                    "(end drag | drag end)": "user.mouse_drag_end()",
                    "downer": "user.mouse_scroll_down()",
                    "tiny down": "user.mouse_scroll_down(0.2)",
                    "(continuous | continue) down": "user.mouse_scroll_down_continuous()",
                    "upper": "user.mouse_scroll_up()",
                    "tiny up": "user.mouse_scroll_up(0.2)",
                    "(continuous | continue) up": "user.mouse_scroll_up_continuous()",
                    "(wheel | scroll) gaze": "user.mouse_gaze_scroll()",
                    "(wheel | scroll) stop": "user.mouse_scroll_stop()",
                    "(wheel | scroll) left": "user.mouse_scroll_left()",
                    "(wheel | scroll) tiny left": "user.mouse_scroll_left(0.5)",
                    "(wheel | scroll) right": "user.mouse_scroll_right()",
                    "(wheel | scroll) tiny right": "user.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(com space | spamma | comgap)": "\", \"",
                    "(inside parens | inside args)": "user.insert_between(\"(\", \")\")",
                    "inside (curly | curly brackets)": "user.insert_between(\"{\", \"}\")",
                    "angle it": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(square | square bracket) it": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(curly | curly bracket) it": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) it": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent it": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "(quote | string) it": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(double quote | dub quote) it": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "plugin/repeater/repeater.talon",
                "context": "repeater",
                "commands": {
                    "again": "core.repeat_command(1)",
                    "repeat it <number_small> [times]": "core.repeat_command(number_small)"
                }
            }
        ]
    },
    {
        "repo_id": 522536189,
        "user_id": 76225907,
        "timestamp": "2023-02-18T20:36:39.435510",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            }
        ]
    },
    {
        "repo_id": 522028060,
        "user_id": 107715408,
        "timestamp": "2023-02-18T20:36:46.863648",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 521877682,
        "user_id": 7670818,
        "timestamp": "2023-02-18T20:36:54.640856",
        "branch": "custom",
        "command_groups": [
            {
                "file": "plugin/draft_editor/draft_editor.talon",
                "context": "draft editor",
                "commands": {
                    "draft submit from code": "user.draft_editor_paste_last()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(scroll | school) down": "user.mouse_scroll_down()",
                    "(scroll | school) down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "(scroll | school) tiny [down]": "user.mouse_scroll_down(0.2)",
                    "(scroll | school) tiny [down] here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down(0.2)",
                    "(scroll | school) downer": "user.mouse_scroll_down_continuous()",
                    "(scroll | school) downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "(scroll | school) up": "user.mouse_scroll_up()",
                    "(scroll | school) up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up()",
                    "(scroll | school) tiny up": "user.mouse_scroll_up(0.2)",
                    "(scroll | school) tiny up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up(0.2)",
                    "(scroll | school) upper": "user.mouse_scroll_up_continuous()",
                    "(scroll | school) upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "(scroll | school) gaze": "user.mouse_gaze_scroll()",
                    "(scroll | school) gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "(scroll | school) stop": "user.mouse_scroll_stop()",
                    "(scroll | school) stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()",
                    "(scroll | school) left": "user.mouse_scroll_left()",
                    "(scroll | school) left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left()",
                    "(scroll | school) tiny left": "user.mouse_scroll_left(0.5)",
                    "(scroll | school) tiny left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left(0.5)",
                    "(scroll | school) right": "user.mouse_scroll_right()",
                    "(scroll | school) right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right()",
                    "(scroll | school) tiny right": "user.mouse_scroll_right(0.5)",
                    "(scroll | school) tiny right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 521745146,
        "user_id": 1608329,
        "timestamp": "2023-02-18T20:37:02.454354",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 521460656,
        "user_id": 5898009,
        "timestamp": "2023-02-18T20:37:09.964647",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 519598330,
        "user_id": 13966854,
        "timestamp": "2023-02-18T20:37:17.483941",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/screenshot.talon",
                "context": "screenshot",
                "commands": {
                    "grab full screen": "user.screenshot()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 519381378,
        "user_id": 891202,
        "timestamp": "2023-02-18T20:37:25.972103",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 519250100,
        "user_id": 71119861,
        "timestamp": "2023-02-18T20:37:34.246114",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 518279086,
        "user_id": 1085899,
        "timestamp": "2023-02-18T20:37:41.752123",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 517801800,
        "user_id": 20161164,
        "timestamp": "2023-02-18T20:37:49.515038",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 517082652,
        "user_id": 9615373,
        "timestamp": "2023-02-18T20:37:57.685375",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 515856204,
        "user_id": 650595,
        "timestamp": "2023-02-18T20:38:05.269705",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 514959566,
        "user_id": 83366355,
        "timestamp": "2023-02-18T20:38:14.028559",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 514825085,
        "user_id": 6818007,
        "timestamp": "2023-02-18T20:38:21.737797",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 514050328,
        "user_id": 107892169,
        "timestamp": "2023-02-18T20:38:29.210664",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 512050625,
        "user_id": 7283262,
        "timestamp": "2023-02-18T20:38:36.803222",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 510115097,
        "user_id": 523280,
        "timestamp": "2023-02-18T20:38:44.529438",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 509756197,
        "user_id": 53098881,
        "timestamp": "2023-02-18T20:38:52.726563",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 509502502,
        "user_id": 51177220,
        "timestamp": "2023-02-18T20:39:00.249581",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 509378965,
        "user_id": 47316116,
        "timestamp": "2023-02-18T20:39:07.812765",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 508899920,
        "user_id": 26931862,
        "timestamp": "2023-02-18T20:39:15.876866",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 508042553,
        "user_id": 26287101,
        "timestamp": "2023-02-18T20:39:23.615600",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "copy that | cope it": "edit.copy()",
                    "cut (that | it)": "edit.cut()",
                    "(pace | paste) (that | it)": "edit.paste()",
                    "undo that | nope": "edit.undo()",
                    "redo that | yup": "edit.redo()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "mid [click]": "mouse_click(2)\nuser.grid_close()",
                    "(trip click | trip lick | trip)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 507953865,
        "user_id": 55604690,
        "timestamp": "2023-02-18T20:39:31.991314",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 507777662,
        "user_id": 12643375,
        "timestamp": "2023-02-18T20:39:41.098012",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 506914649,
        "user_id": 1056068,
        "timestamp": "2023-02-18T20:39:49.709767",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 506794391,
        "user_id": 4742527,
        "timestamp": "2023-02-18T20:39:57.410095",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 506649357,
        "user_id": 3983973,
        "timestamp": "2023-02-18T20:40:05.894841",
        "branch": "wenkokke",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 506304261,
        "user_id": 28806809,
        "timestamp": "2023-02-18T20:40:14.065170",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 506281326,
        "user_id": 61734979,
        "timestamp": "2023-02-18T20:40:21.595367",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 506039565,
        "user_id": 10162855,
        "timestamp": "2023-02-18T20:40:29.968463",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 505661144,
        "user_id": 60080324,
        "timestamp": "2023-02-18T20:40:37.424436",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 505409459,
        "user_id": 18951876,
        "timestamp": "2023-02-18T20:40:44.935524",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 504879816,
        "user_id": 77672678,
        "timestamp": "2023-02-18T20:40:52.632123",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 504678987,
        "user_id": 4650666,
        "timestamp": "2023-02-18T20:41:01.547919",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 503516444,
        "user_id": 1807290,
        "timestamp": "2023-02-18T20:41:09.008335",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 501811177,
        "user_id": 38145610,
        "timestamp": "2023-02-18T20:41:16.782220",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 501020018,
        "user_id": 30298543,
        "timestamp": "2023-02-18T20:41:25.794066",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 500978801,
        "user_id": 72521132,
        "timestamp": "2023-02-18T20:41:33.396356",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 499958582,
        "user_id": 3890033,
        "timestamp": "2023-02-18T20:41:42.301085",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 499393702,
        "user_id": 2657861,
        "timestamp": "2023-02-18T20:41:50.903430",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 499011289,
        "user_id": 219796,
        "timestamp": "2023-02-18T20:41:58.482718",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 496359109,
        "user_id": 68846083,
        "timestamp": "2023-02-18T20:42:07.468741",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 496040339,
        "user_id": 72950547,
        "timestamp": "2023-02-18T20:42:15.048369",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 495996856,
        "user_id": 1685782,
        "timestamp": "2023-02-18T20:42:23.795023",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 493820384,
        "user_id": 5733273,
        "timestamp": "2023-02-18T20:42:31.328950",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 492839871,
        "user_id": 15148721,
        "timestamp": "2023-02-18T20:42:40.169501",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 492654295,
        "user_id": 35981215,
        "timestamp": "2023-02-18T20:42:47.659963",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 492285676,
        "user_id": 50581015,
        "timestamp": "2023-02-18T20:42:56.371123",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "mid": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 491695898,
        "user_id": 35980963,
        "timestamp": "2023-02-18T20:43:05.454242",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            }
        ]
    },
    {
        "repo_id": 491565023,
        "user_id": 70188,
        "timestamp": "2023-02-18T20:43:12.919239",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 491065465,
        "user_id": 2750828,
        "timestamp": "2023-02-18T20:43:20.437204",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 490060551,
        "user_id": 26747205,
        "timestamp": "2023-02-18T20:43:27.917631",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 489691433,
        "user_id": 251735,
        "timestamp": "2023-02-18T20:43:37.487930",
        "branch": "master",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 487768074,
        "user_id": 2545447,
        "timestamp": "2023-02-18T20:43:45.905344",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 487022333,
        "user_id": 52972088,
        "timestamp": "2023-02-18T20:43:53.868834",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 486969883,
        "user_id": 70598503,
        "timestamp": "2023-02-18T20:44:01.664933",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 486497118,
        "user_id": 73256703,
        "timestamp": "2023-02-18T20:44:10.667903",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 485531522,
        "user_id": 13891656,
        "timestamp": "2023-02-18T20:44:19.646112",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 485354182,
        "user_id": 6370704,
        "timestamp": "2023-02-18T20:44:27.169729",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 483468855,
        "user_id": 651237,
        "timestamp": "2023-02-18T20:44:34.819437",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 483010937,
        "user_id": 15976214,
        "timestamp": "2023-02-18T20:44:44.150489",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 482710597,
        "user_id": 11326293,
        "timestamp": "2023-02-18T20:44:51.804788",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 482650083,
        "user_id": 2743660,
        "timestamp": "2023-02-18T20:45:00.571025",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 482604559,
        "user_id": 2433202,
        "timestamp": "2023-02-18T20:45:09.106125",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "under score": "_",
                    "R brace": "}",
                    "dubquote": "\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 482548674,
        "user_id": 5789544,
        "timestamp": "2023-02-18T20:45:18.019866",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 481448611,
        "user_id": 9357792,
        "timestamp": "2023-02-18T20:45:27.400257",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 480003685,
        "user_id": 22850071,
        "timestamp": "2023-02-18T20:45:35.162425",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 479147542,
        "user_id": 36237645,
        "timestamp": "2023-02-18T20:45:43.769030",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 478705637,
        "user_id": 20424160,
        "timestamp": "2023-02-18T20:45:52.727347",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 478051978,
        "user_id": 30693990,
        "timestamp": "2023-02-18T20:46:00.592172",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 477959371,
        "user_id": 30133577,
        "timestamp": "2023-02-18T20:46:09.955016",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copier": "edit.copy()",
                    "cutter": "edit.cut()",
                    "paster": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(righty|rick)": "mouse_click(1)\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "fat arrow": "\"=>\"",
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 477884937,
        "user_id": 27601096,
        "timestamp": "2023-02-18T20:46:19.016174",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 477389446,
        "user_id": 102916005,
        "timestamp": "2023-02-18T20:46:27.896944",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/modes/modes.talon",
                "context": "modes",
                "commands": {
                    "digo": "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")",
                    "comi": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")"
                }
            },
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "drowse [<phrase>]": "speech.disable()",
                    "drowsing": "speech.disable()",
                    "wakey wakey": "speech.enable()",
                    "sleepy": "speech.disable()"
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "webby {user.website}": "user.open_url(website)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "undo that | nope": "edit.undo()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | previous | left)": "app.tab_previous()",
                    "tab (next | right)": "app.tab_next()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "end drag | drag end |drag off": "user.mouse_drag_end()",
                    "wheel downing": "user.mouse_scroll_down_continuous()",
                    "wheel upping": "user.mouse_scroll_up_continuous()",
                    "[wheel] stop": "user.mouse_scroll_stop()"
                }
            },
            {
                "file": "plugin/datetimeinsert/datetimeinsert.talon",
                "context": "datetimeinsert",
                "commands": {
                    "f555date insert": "insert(user.time_format(\"%Y-%m-%d\"))"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (parens | args | round)": "user.insert_between(\"(\", \")\")",
                    "inside (squares | square brackets | box)": "user.insert_between(\"[\", \"]\")",
                    "inside (double quotes | dub quotes | quad )": "user.insert_between('\"', '\"')",
                    "(angle | diamond) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(square | square bracket | box) that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(bracket | brace | curly ) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args | round) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(quote | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(double quote | dub quote | quad ) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "(grave | back tick | ski) that": "text = edit.selected_text()\nuser.paste(\"`{text}`\")"
                }
            }
        ]
    },
    {
        "repo_id": 477174740,
        "user_id": 42753901,
        "timestamp": "2023-02-18T20:46:36.558268",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477019158,
        "user_id": 9081484,
        "timestamp": "2023-02-18T20:46:44.095360",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 476841958,
        "user_id": 12724445,
        "timestamp": "2023-02-18T20:46:51.634035",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 474990819,
        "user_id": 12444206,
        "timestamp": "2023-02-18T20:46:59.373282",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 474940647,
        "user_id": 22856173,
        "timestamp": "2023-02-18T20:47:08.737343",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 474546646,
        "user_id": 1550505,
        "timestamp": "2023-02-18T20:47:17.394462",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 474388910,
        "user_id": 45516337,
        "timestamp": "2023-02-18T20:47:24.901708",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "al <user.letter>": "key(letter)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "num <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 472432551,
        "user_id": 5840057,
        "timestamp": "2023-02-18T20:47:33.679209",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 472104221,
        "user_id": 2882631,
        "timestamp": "2023-02-18T20:47:42.289934",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 471889008,
        "user_id": 31149794,
        "timestamp": "2023-02-18T20:47:51.283997",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 471520796,
        "user_id": 15989073,
        "timestamp": "2023-02-18T20:48:00.474174",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 471178304,
        "user_id": 5151593,
        "timestamp": "2023-02-18T20:48:09.729831",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 468980764,
        "user_id": 91553746,
        "timestamp": "2023-02-18T20:48:19.086766",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 467356180,
        "user_id": 298026,
        "timestamp": "2023-02-18T20:48:28.351571",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466954393,
        "user_id": 11667004,
        "timestamp": "2023-02-18T20:48:35.916710",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466295739,
        "user_id": 25558903,
        "timestamp": "2023-02-18T20:48:43.422755",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466283180,
        "user_id": 78682,
        "timestamp": "2023-02-18T20:48:50.976099",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466200467,
        "user_id": 8952123,
        "timestamp": "2023-02-18T20:48:58.419002",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 465328479,
        "user_id": 5657510,
        "timestamp": "2023-02-18T20:49:07.184050",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 464712307,
        "user_id": 14843677,
        "timestamp": "2023-02-18T20:49:15.012792",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 464229346,
        "user_id": 100534119,
        "timestamp": "2023-02-18T20:49:22.494107",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 464070135,
        "user_id": 24357577,
        "timestamp": "2023-02-18T20:49:30.451091",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 463540524,
        "user_id": 195468,
        "timestamp": "2023-02-18T20:49:37.969346",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 462815102,
        "user_id": 4099370,
        "timestamp": "2023-02-18T20:49:46.826832",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 461892074,
        "user_id": 3690443,
        "timestamp": "2023-02-18T20:49:54.559125",
        "branch": "master",
        "command_groups": [
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 460682561,
        "user_id": 1181721,
        "timestamp": "2023-02-18T20:50:02.065337",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "copy (that | it)": "edit.copy()",
                    "cut (that | it)": "edit.cut()",
                    "paste (that | it)": "edit.paste()",
                    "undo (that | it)": "edit.undo()",
                    "redo (that | it)": "edit.redo()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "(clear way left | dell lef)": "edit.extend_line_start()\nedit.delete()",
                    "(clear way right | dell rye)": "edit.extend_line_end()\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 460052479,
        "user_id": 20117014,
        "timestamp": "2023-02-18T20:50:09.771671",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "desk right": "user.desktop_next()",
                    "desk left": "user.desktop_last()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 459360446,
        "user_id": 36056663,
        "timestamp": "2023-02-18T20:50:18.931220",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 458903871,
        "user_id": 24389100,
        "timestamp": "2023-02-18T20:50:26.408692",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 458152184,
        "user_id": 1429641,
        "timestamp": "2023-02-18T20:50:35.191986",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 457589121,
        "user_id": 1400380,
        "timestamp": "2023-02-18T20:50:42.897111",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "page up": "edit.page_up()",
                    "page down": "edit.page_down()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 457542669,
        "user_id": 49439044,
        "timestamp": "2023-02-18T20:50:50.371632",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()",
                    "disk all": "edit.save_all()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 457521235,
        "user_id": 243140,
        "timestamp": "2023-02-18T20:50:59.029327",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 457010828,
        "user_id": 98036866,
        "timestamp": "2023-02-18T20:51:07.744759",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 456707613,
        "user_id": 28880958,
        "timestamp": "2023-02-18T20:51:15.226874",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 456258798,
        "user_id": 17749921,
        "timestamp": "2023-02-18T20:51:22.703463",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 456027437,
        "user_id": 6052475,
        "timestamp": "2023-02-18T20:51:32.315527",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "(talon sleep | drouse | hello hello) [<phrase>]": "speech.disable()",
                    "(talon wake | voice mode on)": "speech.enable()"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "undo [that]": "edit.undo()",
                    "redo [that]": "edit.redo()",
                    "padding": "user.insert_between(\" \", \" \")",
                    "padding <user.symbol_key>+": "insert(\" \")\nuser.insert_many(symbol_key_list)\ninsert(\" \")"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "(indent [more] | shove)": "edit.indent_more()",
                    "(indent less | out dent | tug)": "edit.indent_less()",
                    "(clear right | del)": "key(delete)"
                }
            },
            {
                "file": "plugin/cancel/cancel.talon",
                "context": "cancel",
                "commands": {
                    "(ignore | actually | maybe | anyways | okay) [<phrase>]": "app.notify(\"Command ignored\")"
                }
            }
        ]
    },
    {
        "repo_id": 455381897,
        "user_id": 3068446,
        "timestamp": "2023-02-18T20:51:39.891264",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 455250600,
        "user_id": 98972908,
        "timestamp": "2023-02-18T20:51:47.335169",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454814239,
        "user_id": 93682204,
        "timestamp": "2023-02-18T20:51:56.601605",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454385959,
        "user_id": 17555463,
        "timestamp": "2023-02-18T20:52:04.189309",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454326092,
        "user_id": 16470874,
        "timestamp": "2023-02-18T20:52:11.733952",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454188859,
        "user_id": 7919039,
        "timestamp": "2023-02-18T20:52:19.368192",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 453692329,
        "user_id": 14280211,
        "timestamp": "2023-02-18T20:52:28.911018",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "disc | file save": "edit.save()",
                    "padding": "user.insert_between(\" \", \" \")",
                    "pour": "edit.line_insert_down()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "drain | go word left": "edit.word_left()",
                    "step | go word right": "edit.word_right()",
                    "drill | go left": "edit.left()",
                    "push | go right": "edit.right()",
                    "go north | go up": "edit.up()",
                    "tail | go line end": "edit.line_end()",
                    "seagull | select line": "edit.select_line()",
                    "clear word left | ash": "edit.extend_word_left()\nedit.delete()",
                    "clear word right | fire": "edit.extend_word_right()\nedit.delete()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | previous) | tappy": "app.tab_previous()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "<user.modifiers> king": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "spam": "\", \"",
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "plugin/repeater/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice|ox)": "core.repeat_command(1)"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 453656894,
        "user_id": 11901400,
        "timestamp": "2023-02-18T20:52:36.647627",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 453215774,
        "user_id": 1472923,
        "timestamp": "2023-02-18T20:52:44.088796",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 452884028,
        "user_id": 93023868,
        "timestamp": "2023-02-18T20:52:51.650846",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 452483437,
        "user_id": 92004154,
        "timestamp": "2023-02-18T20:53:00.549803",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 452463744,
        "user_id": 94268524,
        "timestamp": "2023-02-18T20:53:12.213505",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(undo that|and do that|I do that|I'll do that|I you that)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(wheel|will) gaze": "user.mouse_gaze_scroll()",
                    "(wheel|we'll) stop": "user.mouse_scroll_stop()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "capitalize": "user.dictation_format_cap()",
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 451726600,
        "user_id": 42344656,
        "timestamp": "2023-02-18T20:53:20.056199",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 450907189,
        "user_id": 12602371,
        "timestamp": "2023-02-18T20:53:29.857828",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 450253352,
        "user_id": 24943868,
        "timestamp": "2023-02-18T20:53:39.579257",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 450180737,
        "user_id": 1293125,
        "timestamp": "2023-02-18T20:53:47.103013",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 449806698,
        "user_id": 1839981,
        "timestamp": "2023-02-18T20:53:56.341749",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "now copy": "edit.copy()",
                    "now cut": "edit.cut()",
                    "now paste": "edit.paste()",
                    "now undo": "edit.undo()",
                    "now redo": "edit.redo()",
                    "now same paste": "edit.paste_match_style()",
                    "now (file | save)": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 448991976,
        "user_id": 10353928,
        "timestamp": "2023-02-18T20:54:06.111317",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 448852582,
        "user_id": 15121366,
        "timestamp": "2023-02-18T20:54:13.810676",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 448667797,
        "user_id": 4704069,
        "timestamp": "2023-02-18T20:54:21.523859",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448469426,
        "user_id": 2145008,
        "timestamp": "2023-02-18T20:54:29.063250",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 447450940,
        "user_id": 82670783,
        "timestamp": "2023-02-18T20:54:36.617482",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 446945956,
        "user_id": 35548127,
        "timestamp": "2023-02-18T20:54:46.098497",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 446581588,
        "user_id": 20517406,
        "timestamp": "2023-02-18T20:54:55.053926",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 446067710,
        "user_id": 163128,
        "timestamp": "2023-02-18T20:55:02.556910",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 445939534,
        "user_id": 3219419,
        "timestamp": "2023-02-18T20:55:11.695229",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 445816388,
        "user_id": 63201480,
        "timestamp": "2023-02-18T20:55:19.239258",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 445691841,
        "user_id": 12655228,
        "timestamp": "2023-02-18T20:55:26.710917",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 444564467,
        "user_id": 53412558,
        "timestamp": "2023-02-18T20:55:36.270652",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 443978995,
        "user_id": 21286812,
        "timestamp": "2023-02-18T20:55:43.775956",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "cop it": "edit.copy()",
                    "cut it": "edit.cut()",
                    "paste it": "edit.paste()",
                    "nope that": "edit.undo()",
                    "save it": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} search for <user.text>": "user.search_with_search_engine(search_engine, user.text)",
                    "{user.search_engine} this": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "twice": "core.repeat_command(1)",
                    "times <number_small>": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "des <number_small>": "user.desktop(number_small)",
                    "des right": "user.desktop_next()",
                    "des left": "user.desktop_last()",
                    "des show": "user.desktop_show()",
                    "window move des <number>": "user.window_move_desktop(number)",
                    "window move des left": "user.window_move_desktop_left()",
                    "window move des right": "user.window_move_desktop_right()"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "ship <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "new tab": "app.tab_open()",
                    "taber left": "app.tab_previous()",
                    "taber right": "app.tab_next()",
                    "taber close": "user.tab_close_wrapper()",
                    "taber (reopen|restore)": "app.tab_reopen()",
                    "go last tab": "user.tab_final()"
                }
            },
            {
                "file": "misc/datetimeinsert.talon",
                "context": "datetimeinsert",
                "commands": {
                    "timestamp insert high res": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S.%f\"))",
                    "timestamp insert UTC high res": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S.%f\"))"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "drag it": "user.mouse_drag(0)\nuser.grid_close()",
                    "right drag": "user.mouse_drag(1)\nuser.grid_close()",
                    "drag stop": "user.mouse_drag_end()",
                    "scroll down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "scroll tiny [down]": "user.mouse_scroll_down(0.2)",
                    "scroll tiny [down] here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down(0.2)",
                    "downy": "user.mouse_scroll_down_continuous()",
                    "scroll up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up()",
                    "scroll tiny up": "user.mouse_scroll_up(0.2)",
                    "scroll tiny up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up(0.2)",
                    "guppy": "user.mouse_scroll_up_continuous()",
                    "scroll gaze": "user.mouse_gaze_scroll()",
                    "scroll gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "scroll stop": "user.mouse_scroll_stop()",
                    "scroll stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()",
                    "scroll left": "user.mouse_scroll_left()",
                    "scroll left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left()",
                    "scroll tiny left": "user.mouse_scroll_left(0.5)",
                    "scroll tiny left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left(0.5)",
                    "scroll right": "user.mouse_scroll_right()",
                    "scroll right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right()",
                    "scroll tiny right": "user.mouse_scroll_right(0.5)",
                    "scroll tiny right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "(help formatters | format help)": "user.help_formatters(user.get_formatters_words())"
                }
            },
            {
                "file": "modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "enable gdb": "mode.enable(\"user.gdb\")",
                    "disable gdb": "mode.disable(\"user.gdb\")"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "triple batick": "insert(\"```\")",
                    "sym arrow": "\"->\"",
                    "sym big arrow": "\"=>\"",
                    "bracket that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "args that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "dubquote that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "num <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 443889257,
        "user_id": 18250094,
        "timestamp": "2023-02-18T20:55:51.326957",
        "branch": "custom",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "spam": "\", \"",
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 443450461,
        "user_id": 95110067,
        "timestamp": "2023-02-18T20:56:01.249088",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 443171806,
        "user_id": 5711101,
        "timestamp": "2023-02-18T20:56:08.774117",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 442458309,
        "user_id": 25511262,
        "timestamp": "2023-02-18T20:56:16.524560",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 441919485,
        "user_id": 7907782,
        "timestamp": "2023-02-18T20:56:26.077468",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 441762817,
        "user_id": 26435834,
        "timestamp": "2023-02-18T20:56:33.637402",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 441560011,
        "user_id": 15986712,
        "timestamp": "2023-02-18T20:56:41.356985",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 441556743,
        "user_id": 4312305,
        "timestamp": "2023-02-18T20:56:51.102210",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 440296382,
        "user_id": 15270272,
        "timestamp": "2023-02-18T20:56:58.592932",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 440053279,
        "user_id": 74739,
        "timestamp": "2023-02-18T20:57:06.201011",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 437084814,
        "user_id": 60481661,
        "timestamp": "2023-02-18T20:57:16.219239",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 437048021,
        "user_id": 38531814,
        "timestamp": "2023-02-18T20:57:23.756370",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 436546230,
        "user_id": 17482349,
        "timestamp": "2023-02-18T20:57:31.458839",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 436089181,
        "user_id": 1801875,
        "timestamp": "2023-02-18T20:57:39.013368",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "(snows | snooze)": "speech.disable()",
                    "holy guacamole": "speech.enable()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "(indent less | out dent | dedent)": "edit.indent_less()"
                }
            },
            {
                "file": "core/windows_and_tabs/window_management.talon",
                "context": "window management",
                "commands": {
                    "(folk|focus) <user.running_applications>": "user.switcher_focus(running_applications)"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (close | plus)": "user.tab_close_wrapper()"
                }
            },
            {
                "file": "plugin/desktops/desktops.talon",
                "context": "desktops",
                "commands": {
                    "(ski | desk) <number_small>": "user.desktop(number_small)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "spamma": "\", \""
                }
            }
        ]
    },
    {
        "repo_id": 435856117,
        "user_id": 6841417,
        "timestamp": "2023-02-18T20:57:46.472948",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "nope": "edit.undo()",
                    "disker": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} scout <user.text>": "user.search_with_search_engine(search_engine, user.text)",
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 434275425,
        "user_id": 830218,
        "timestamp": "2023-02-18T20:57:56.027345",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 433969454,
        "user_id": 2236620,
        "timestamp": "2023-02-18T20:58:03.573430",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 433510707,
        "user_id": 36557576,
        "timestamp": "2023-02-18T20:58:11.076741",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 432989937,
        "user_id": 22130400,
        "timestamp": "2023-02-18T20:58:18.585045",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 431996009,
        "user_id": 13921790,
        "timestamp": "2023-02-18T20:58:26.123378",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 430919486,
        "user_id": 12286472,
        "timestamp": "2023-02-18T20:58:35.845492",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 430783951,
        "user_id": 1587084,
        "timestamp": "2023-02-18T20:58:43.414119",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 429972176,
        "user_id": 3287378,
        "timestamp": "2023-02-18T20:58:50.964481",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 429930875,
        "user_id": 848589,
        "timestamp": "2023-02-18T20:59:00.594657",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 429486665,
        "user_id": 1620051,
        "timestamp": "2023-02-18T20:59:08.665575",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            }
        ]
    },
    {
        "repo_id": 428364442,
        "user_id": 726818,
        "timestamp": "2023-02-18T20:59:16.148515",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 426988120,
        "user_id": 45826559,
        "timestamp": "2023-02-18T20:59:23.644104",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 425874932,
        "user_id": 32393906,
        "timestamp": "2023-02-18T20:59:33.184807",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 425184629,
        "user_id": 3219671,
        "timestamp": "2023-02-18T20:59:40.813152",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 424266409,
        "user_id": 216216,
        "timestamp": "2023-02-18T20:59:50.594546",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 422905258,
        "user_id": 41682903,
        "timestamp": "2023-02-18T21:00:00.872911",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 422785308,
        "user_id": 4354311,
        "timestamp": "2023-02-18T21:00:09.007011",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 422617945,
        "user_id": 5358449,
        "timestamp": "2023-02-18T21:00:16.581805",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 422560443,
        "user_id": 6410431,
        "timestamp": "2023-02-18T21:00:24.064046",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 420491244,
        "user_id": 23173985,
        "timestamp": "2023-02-18T21:00:31.627125",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "cop": "edit.copy()",
                    "cut it": "edit.cut()",
                    "paish": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(triple grave | triple back tick)": "insert(\"```\")",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 420281023,
        "user_id": 717852,
        "timestamp": "2023-02-18T21:00:39.104435",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 419531730,
        "user_id": 71795669,
        "timestamp": "2023-02-18T21:00:47.003409",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 417851538,
        "user_id": 28291528,
        "timestamp": "2023-02-18T21:00:57.111837",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 416893916,
        "user_id": 12233471,
        "timestamp": "2023-02-18T21:01:04.764140",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 414386266,
        "user_id": 55820966,
        "timestamp": "2023-02-18T21:01:12.242380",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 414108639,
        "user_id": 63059805,
        "timestamp": "2023-02-18T21:01:19.739631",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 413320713,
        "user_id": 5217684,
        "timestamp": "2023-02-18T21:01:29.511828",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 412890404,
        "user_id": 29584603,
        "timestamp": "2023-02-18T21:01:37.091567",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "whoops": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)",
                    "read": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "left drag | drag on": "user.mouse_drag(0)\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 412103160,
        "user_id": 91682292,
        "timestamp": "2023-02-18T21:01:44.561271",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 411736468,
        "user_id": 289079,
        "timestamp": "2023-02-18T21:01:54.552485",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 410770630,
        "user_id": 88945074,
        "timestamp": "2023-02-18T21:02:02.194919",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "under score": "_",
                    "R brace": "}",
                    "dubquote": "\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 410395641,
        "user_id": 21588,
        "timestamp": "2023-02-18T21:02:09.962224",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 407236199,
        "user_id": 84646533,
        "timestamp": "2023-02-18T21:02:17.496598",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 406344318,
        "user_id": 56249075,
        "timestamp": "2023-02-18T21:02:28.120289",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 406294417,
        "user_id": 8206630,
        "timestamp": "2023-02-18T21:02:35.606529",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 405180930,
        "user_id": 192751,
        "timestamp": "2023-02-18T21:02:43.116070",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 404442342,
        "user_id": 1432129,
        "timestamp": "2023-02-18T21:02:53.413999",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 403757096,
        "user_id": 51184,
        "timestamp": "2023-02-18T21:03:00.937946",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 403741487,
        "user_id": 38996442,
        "timestamp": "2023-02-18T21:03:08.980975",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 403112768,
        "user_id": 1163925,
        "timestamp": "2023-02-18T21:03:16.505226",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 402391927,
        "user_id": 128854,
        "timestamp": "2023-02-18T21:03:24.156840",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 401897761,
        "user_id": 9433472,
        "timestamp": "2023-02-18T21:03:33.920941",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 401847267,
        "user_id": 17151865,
        "timestamp": "2023-02-18T21:03:41.564785",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "(disk|file save)": "edit.save()",
                    "(disk oliver|file save all)": "edit.save_all()",
                    "pour": "edit.line_insert_down()"
                }
            }
        ]
    },
    {
        "repo_id": 401590650,
        "user_id": 1522310,
        "timestamp": "2023-02-18T21:03:49.087980",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/screenshot.talon",
                "context": "screenshot",
                "commands": {
                    "(grab selection | screenshot)": "user.screenshot_selection()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (up | previous)": "app.tab_previous()",
                    "tab (down | next)": "app.tab_next()",
                    "tab (reopen|restore)": "app.tab_reopen()",
                    "tab <number>": "user.tab_jump(number)",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(touch | [left] click)": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "(midclick | center)": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> (touch | [left] click)": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "single quote that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "([double] quote | string) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "square that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "paren that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            },
            {
                "file": "mouse_grid/mouse_grid_open.talon",
                "context": "mouse grid open",
                "commands": {
                    "grid (off | close)": "user.grid_close()",
                    "grid [go] back": "user.grid_go_back()"
                }
            }
        ]
    },
    {
        "repo_id": 401471705,
        "user_id": 138279,
        "timestamp": "2023-02-18T21:03:59.551996",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 401085077,
        "user_id": 20683271,
        "timestamp": "2023-02-18T21:04:07.094503",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 398661149,
        "user_id": 46428485,
        "timestamp": "2023-02-18T21:04:14.705809",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 397448120,
        "user_id": 43415278,
        "timestamp": "2023-02-18T21:04:22.216940",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 396540453,
        "user_id": 13631007,
        "timestamp": "2023-02-18T21:04:29.671994",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 395633945,
        "user_id": 10852023,
        "timestamp": "2023-02-18T21:04:37.114226",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 395343151,
        "user_id": 3109283,
        "timestamp": "2023-02-18T21:04:47.517917",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 393783000,
        "user_id": 4572377,
        "timestamp": "2023-02-18T21:04:54.991815",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(cut | chop) [that]": "edit.cut()",
                    "paste [that]": "edit.paste()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "psychic": "mouse_click(1)\nuser.grid_close()",
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "dublin click": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 393204210,
        "user_id": 39004650,
        "timestamp": "2023-02-18T21:05:05.222026",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 392454405,
        "user_id": 22085373,
        "timestamp": "2023-02-18T21:05:12.779976",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 392153553,
        "user_id": 905280,
        "timestamp": "2023-02-18T21:05:20.249141",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 391319376,
        "user_id": 51181822,
        "timestamp": "2023-02-18T21:05:27.775277",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 391174212,
        "user_id": 7913776,
        "timestamp": "2023-02-18T21:05:38.046360",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "stamp": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 391098151,
        "user_id": 56436734,
        "timestamp": "2023-02-18T21:05:45.717209",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 390706318,
        "user_id": 75254598,
        "timestamp": "2023-02-18T21:05:56.853814",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 389290964,
        "user_id": 82244060,
        "timestamp": "2023-02-18T21:06:04.501690",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 389064353,
        "user_id": 1420169,
        "timestamp": "2023-02-18T21:06:11.963415",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 388827141,
        "user_id": 793774,
        "timestamp": "2023-02-18T21:06:19.426079",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 387545516,
        "user_id": 63086420,
        "timestamp": "2023-02-18T21:06:29.643425",
        "branch": "master",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "solo arrow": "\"->\""
                }
            }
        ]
    },
    {
        "repo_id": 386706548,
        "user_id": 13141110,
        "timestamp": "2023-02-18T21:06:38.635127",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 386678509,
        "user_id": 220967,
        "timestamp": "2023-02-18T21:06:46.308418",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 385933502,
        "user_id": 19817302,
        "timestamp": "2023-02-18T21:06:53.762544",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 385851610,
        "user_id": 583851,
        "timestamp": "2023-02-18T21:07:01.477014",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385110154,
        "user_id": 225847,
        "timestamp": "2023-02-18T21:07:09.173359",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 385067243,
        "user_id": 15631555,
        "timestamp": "2023-02-18T21:07:16.837215",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 384928910,
        "user_id": 5533167,
        "timestamp": "2023-02-18T21:07:27.464072",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 384549508,
        "user_id": 2035323,
        "timestamp": "2023-02-18T21:07:35.095998",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 384154127,
        "user_id": 376105,
        "timestamp": "2023-02-18T21:07:42.601633",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 382437159,
        "user_id": 76692911,
        "timestamp": "2023-02-18T21:07:50.080650",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 382378868,
        "user_id": 770269,
        "timestamp": "2023-02-18T21:07:57.550797",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 382032821,
        "user_id": 85769,
        "timestamp": "2023-02-18T21:08:08.016507",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 381154547,
        "user_id": 17451821,
        "timestamp": "2023-02-18T21:08:15.561010",
        "branch": "master",
        "command_groups": [
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 380682923,
        "user_id": 3511326,
        "timestamp": "2023-02-18T21:08:23.204306",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 378086563,
        "user_id": 10260883,
        "timestamp": "2023-02-18T21:08:32.747573",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            }
        ]
    },
    {
        "repo_id": 377972846,
        "user_id": 1231294,
        "timestamp": "2023-02-18T21:08:40.328490",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 375912462,
        "user_id": 24251362,
        "timestamp": "2023-02-18T21:08:48.080742",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "num <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "padding": "user.insert_between(\" \", \" \")"
                }
            },
            {
                "file": "core/file_extension/file_extension.talon",
                "context": "file extension",
                "commands": {
                    "dot {user.file_extension}": "\"{file_extension}\""
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "control mouse (old|legacy)": "tracking.control1_toggle()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "comma and": "\", \"",
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside parens": "user.insert_between(\"(\", \")\")",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "plugin/media/media.talon",
                "context": "media",
                "commands": {
                    "[media] play (previous | last)": "key(prev)"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 375783747,
        "user_id": 414788,
        "timestamp": "2023-02-18T21:08:58.608981",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "(window next|gibby)": "app.window_next()",
                    "(window last|shibby)": "app.window_previous()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 375363540,
        "user_id": 14166902,
        "timestamp": "2023-02-18T21:09:06.412868",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 374854063,
        "user_id": 31605846,
        "timestamp": "2023-02-18T21:09:13.843857",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 374017931,
        "user_id": 221511,
        "timestamp": "2023-02-18T21:09:21.355405",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 373513920,
        "user_id": 3151827,
        "timestamp": "2023-02-18T21:09:28.833721",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 373079326,
        "user_id": 14088282,
        "timestamp": "2023-02-18T21:09:36.315810",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 372312569,
        "user_id": 9077250,
        "timestamp": "2023-02-18T21:09:44.058890",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "select line start": "edit.extend_line_start()",
                    "select line end": "edit.extend_line_end()",
                    "select top": "edit.extend_file_start()",
                    "select bottom": "edit.extend_file_end()",
                    "(wipe | delete) line": "edit.delete_line()",
                    "(wipe | delete) left": "key(backspace)",
                    "(wipe | delete) right": "key(delete)",
                    "(wipe | delete) up": "edit.extend_line_up()\nedit.delete()",
                    "(wipe | delete) down": "edit.extend_line_down()\nedit.delete()",
                    "(wipe | delete) word": "edit.delete_word()",
                    "(wipe | delete) word left": "edit.extend_word_left()\nedit.delete()",
                    "(wipe | delete) word right": "edit.extend_word_right()\nedit.delete()",
                    "(wipe | delete) line start": "edit.extend_line_start()\nedit.delete()",
                    "(wipe | delete) line end": "edit.extend_line_end()\nedit.delete()",
                    "(wipe | delete) top": "edit.extend_file_start()\nedit.delete()",
                    "(wipe | delete) bottom": "edit.extend_file_end()\nedit.delete()",
                    "(wipe | delete) all": "edit.select_all()\nedit.delete()"
                }
            },
            {
                "file": "plugin/datetimeinsert/datetimeinsert.talon",
                "context": "datetimeinsert",
                "commands": {
                    "date": "insert(user.time_format(\"%Y-%m-%d\"))",
                    "date UTC": "insert(user.time_format_utc(\"%Y-%m-%d\"))",
                    "timestamp": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S\"))",
                    "timestamp high resolution": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S.%f\"))",
                    "timestamp UTC": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S\"))",
                    "timestamp UTC high resolution": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S.%f\"))"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(parens | paren | args) that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            }
        ]
    },
    {
        "repo_id": 372307617,
        "user_id": 10604952,
        "timestamp": "2023-02-18T21:09:54.156103",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 372223016,
        "user_id": 4321827,
        "timestamp": "2023-02-18T21:10:01.917490",
        "branch": "master",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(parens | arcs) that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            }
        ]
    },
    {
        "repo_id": 370349195,
        "user_id": 6242530,
        "timestamp": "2023-02-18T21:10:09.532939",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)",
                    "(rep|repeat) <number_small>": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "back tick that": "text = edit.selected_text()\nuser.paste(\"`{text}`\")"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "number <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 370171319,
        "user_id": 15764229,
        "timestamp": "2023-02-18T21:10:19.997600",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 365022071,
        "user_id": 57390056,
        "timestamp": "2023-02-18T21:10:27.525207",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 364685941,
        "user_id": 20028,
        "timestamp": "2023-02-18T21:10:34.951703",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 364626829,
        "user_id": 3256759,
        "timestamp": "2023-02-18T21:10:42.423267",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 363648910,
        "user_id": 69818598,
        "timestamp": "2023-02-18T21:10:49.890606",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 362912901,
        "user_id": 1590447,
        "timestamp": "2023-02-18T21:10:57.397145",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 362210081,
        "user_id": 7584665,
        "timestamp": "2023-02-18T21:11:04.749478",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 360954098,
        "user_id": 57394581,
        "timestamp": "2023-02-18T21:11:12.199523",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 360842356,
        "user_id": 21974901,
        "timestamp": "2023-02-18T21:11:19.703860",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy it": "edit.copy()",
                    "cut it": "edit.cut()",
                    "(pace | paste) it": "edit.paste()",
                    "undo [it]": "edit.undo()",
                    "redo it": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "<number_small> more": "core.repeat_command(number_small)",
                    "dupe": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "desk right": "user.desktop_next()",
                    "desk left": "user.desktop_last()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "[wheel] downer": "user.mouse_scroll_down_continuous()",
                    "[wheel] downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "[wheel] upper": "user.mouse_scroll_up_continuous()",
                    "[wheel] upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 360119531,
        "user_id": 3371840,
        "timestamp": "2023-02-18T21:11:27.212759",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 359588017,
        "user_id": 13191586,
        "timestamp": "2023-02-18T21:11:34.676979",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "fat arrow": "\"=>\"",
                    "dub brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")"
                }
            }
        ]
    },
    {
        "repo_id": 359443211,
        "user_id": 17959719,
        "timestamp": "2023-02-18T21:11:42.109827",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 358793474,
        "user_id": 17622855,
        "timestamp": "2023-02-18T21:11:52.338057",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 357513522,
        "user_id": 25530469,
        "timestamp": "2023-02-18T21:11:59.802893",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | left)": "app.tab_previous()",
                    "tab (next | right)": "app.tab_next()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 357372146,
        "user_id": 229924,
        "timestamp": "2023-02-18T21:12:07.265868",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 357041957,
        "user_id": 35416770,
        "timestamp": "2023-02-18T21:12:18.549097",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 356743718,
        "user_id": 9221501,
        "timestamp": "2023-02-18T21:12:26.133151",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 356633847,
        "user_id": 812847,
        "timestamp": "2023-02-18T21:12:33.710226",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 355551983,
        "user_id": 1383198,
        "timestamp": "2023-02-18T21:12:41.208599",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "(focus|show) <user.running_applications>": "user.switcher_focus(running_applications)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 355368945,
        "user_id": 68569318,
        "timestamp": "2023-02-18T21:12:48.635241",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 355000747,
        "user_id": 25496850,
        "timestamp": "2023-02-18T21:12:56.099624",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 354618162,
        "user_id": 536668,
        "timestamp": "2023-02-18T21:13:03.583915",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 354326300,
        "user_id": 54818975,
        "timestamp": "2023-02-18T21:13:15.537468",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 354170041,
        "user_id": 10595845,
        "timestamp": "2023-02-18T21:13:22.974369",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 353746144,
        "user_id": 30735158,
        "timestamp": "2023-02-18T21:13:30.410009",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 353659759,
        "user_id": 22653028,
        "timestamp": "2023-02-18T21:13:37.926028",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 351824490,
        "user_id": 21959941,
        "timestamp": "2023-02-18T21:13:45.386122",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 350688578,
        "user_id": 4063086,
        "timestamp": "2023-02-18T21:13:53.006739",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 350470759,
        "user_id": 6205841,
        "timestamp": "2023-02-18T21:14:00.503391",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 350166824,
        "user_id": 193480,
        "timestamp": "2023-02-18T21:14:12.996097",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(spamma)": "\", \"",
                    "(parens | arguments) that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            }
        ]
    },
    {
        "repo_id": 349466138,
        "user_id": 39571771,
        "timestamp": "2023-02-18T21:14:20.524791",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 349279325,
        "user_id": 23261427,
        "timestamp": "2023-02-18T21:14:27.981512",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 349113249,
        "user_id": 17651683,
        "timestamp": "2023-02-18T21:14:35.422327",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 348791512,
        "user_id": 19470970,
        "timestamp": "2023-02-18T21:14:42.964700",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 348747303,
        "user_id": 38437248,
        "timestamp": "2023-02-18T21:14:50.366625",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 348665193,
        "user_id": 29524288,
        "timestamp": "2023-02-18T21:14:57.779251",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 348395788,
        "user_id": 1656493,
        "timestamp": "2023-02-18T21:15:05.344232",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 347679345,
        "user_id": 1138625,
        "timestamp": "2023-02-18T21:15:12.729858",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 346491657,
        "user_id": 8116016,
        "timestamp": "2023-02-18T21:15:24.185026",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 345319211,
        "user_id": 16936908,
        "timestamp": "2023-02-18T21:15:31.695716",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 345186817,
        "user_id": 2436460,
        "timestamp": "2023-02-18T21:15:39.216746",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 344615212,
        "user_id": 15257711,
        "timestamp": "2023-02-18T21:15:46.636247",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 344305692,
        "user_id": 9664877,
        "timestamp": "2023-02-18T21:15:54.136398",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 344007171,
        "user_id": 36384768,
        "timestamp": "2023-02-18T21:16:01.558221",
        "branch": "master",
        "command_groups": [
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 343957616,
        "user_id": 32660718,
        "timestamp": "2023-02-18T21:16:08.983844",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 342462230,
        "user_id": 8659099,
        "timestamp": "2023-02-18T21:16:16.705239",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 342293729,
        "user_id": 9314305,
        "timestamp": "2023-02-18T21:16:28.179840",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 342074745,
        "user_id": 74514113,
        "timestamp": "2023-02-18T21:16:35.850229",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 340793922,
        "user_id": 2476974,
        "timestamp": "2023-02-18T21:16:43.403672",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 340365042,
        "user_id": 69343575,
        "timestamp": "2023-02-18T21:16:50.861893",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 339033346,
        "user_id": 68754523,
        "timestamp": "2023-02-18T21:16:58.668323",
        "branch": "master",
        "command_groups": [
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(left drag | drag | hold mouse)": "user.mouse_drag(0)\nuser.grid_close()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (bracket | braces | curly)": "user.insert_between(\"{\", \"}\")"
                }
            }
        ]
    },
    {
        "repo_id": 337740683,
        "user_id": 67563877,
        "timestamp": "2023-02-18T21:17:09.620891",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 336413925,
        "user_id": 15655308,
        "timestamp": "2023-02-18T21:17:17.554122",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 336399014,
        "user_id": 32513411,
        "timestamp": "2023-02-18T21:17:29.029370",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "disk": "edit.save()",
                    "disk all": "edit.save_all()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "(window open|Fenster \u00f6ffnen)": "app.window_open()",
                    "(window next|n\u00e4chstes Fenster)": "app.window_next()",
                    "(window last|vorheriges Fenster)": "app.window_previous()",
                    "(window close|Fenster schliessen)": "app.window_close()",
                    "touch <user.window_snap_position>": "user.snap_window(window_snap_position)",
                    "touch <user.term_navigate_right> [screen]": "user.move_window_next_screen()",
                    "touch <user.term_navigate_left> [screen]": "user.move_window_previous_screen()",
                    "touch screen <number>": "user.move_window_to_screen(number)",
                    "touch <user.running_applications> <user.window_snap_position>": "user.snap_app(running_applications, window_snap_position)",
                    "touch <user.running_applications> [screen] <number>": "user.move_app_to_screen(running_applications, number)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)",
                    "song <user.term_navigate_right>": "key(next)",
                    "song <user.term_navigate_left>": "key(prev)"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "<user.term_go> {user.website}": "user.open_url(website)",
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "<user.term_desktop> <number_small>": "user.desktop(number_small)",
                    "<user.term_desktop>  <user.term_navigate_right>": "user.desktop_next()",
                    "<user.term_desktop>  <user.term_navigate_left>": "user.desktop_last()",
                    "<user.term_desktop> show": "user.desktop_show()",
                    "move to <user.term_desktop> <number>": "user.window_move_desktop(number)",
                    "move to <user.term_desktop> <user.term_navigate_left>": "user.window_move_desktop_left()",
                    "move to <user.term_desktop> <user.term_navigate_right>": "user.window_move_desktop_right()"
                }
            },
            {
                "file": "misc/screenshot.talon",
                "context": "screenshot",
                "commands": {
                    "<user.term_select> screen": "user.screenshot()",
                    "<user.term_select> screen <number_small>": "user.screenshot(number_small)",
                    "<user.term_select> window": "user.screenshot_window()",
                    "<user.term_select> selection": "user.screenshot_selection()",
                    "<user.term_select> settings": "user.screenshot_settings()",
                    "<user.term_select> screen clip": "user.screenshot_clipboard()",
                    "<user.term_select> screen <number_small> clip": "user.screenshot_clipboard(number_small)",
                    "<user.term_select> window clip": "user.screenshot_window_clipboard()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (open|new)": "app.tab_open()",
                    "tab (restore|reopen)": "app.tab_reopen()",
                    "[go] tab <number>": "user.tab_jump(number)",
                    "[go] tab final": "user.tab_final()"
                }
            },
            {
                "file": "misc/help_open.talon",
                "context": "help open",
                "commands": {
                    "help <user.term_navigate_right>": "user.help_next()",
                    "help <user.term_navigate_left>": "user.help_previous()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "(left drag | drag)": "user.mouse_drag(0)\nuser.grid_close()",
                    "(right drag | righty drag)": "user.mouse_drag(1)\nuser.grid_close()",
                    "(dragon | drag end)": "user.mouse_drag_end()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "nope": "user.clear_last_phrase()",
                    "nope this": "edit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/text_navigation.talon",
                "context": "text navigation",
                "commands": {
                    "<user.term_navigate> [{user.arrow_key}] [{user.navigation_action}] [{user.navigation_target_name}] [{user.before_or_after}] [<user.ordinals>] <user.navigation_target>": "user.navigation(navigation_action or \"GO\", arrow_key or \"RIGHT\", navigation_target_name or \"DEFAULT\", before_or_after or \"DEFAULT\", navigation_target, ordinals or 1)",
                    "small <user.term_word_navigate> <user.term_navigate_right> [<number_small>]": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"small\", number_small or 1)",
                    "small <user.term_word_navigate> <user.term_navigate_left> [<number_small>]": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"small\", number_small or 1)",
                    "big <user.term_word_navigate> <user.term_navigate_right> [<number_small>]": "user.navigation_by_name(\"SELECT\", \"RIGHT\", \"DEFAULT\", \"big\", number_small or 1)",
                    "big <user.term_word_navigate> <user.term_navigate_left> [<number_small>]": "user.navigation_by_name(\"SELECT\", \"LEFT\", \"DEFAULT\", \"big\", number_small or 1)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 335841256,
        "user_id": 31530784,
        "timestamp": "2023-02-18T21:17:36.425994",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 335691551,
        "user_id": 6345617,
        "timestamp": "2023-02-18T21:17:44.628011",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335054560,
        "user_id": 7477,
        "timestamp": "2023-02-18T21:17:52.099845",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 334433926,
        "user_id": 145117,
        "timestamp": "2023-02-18T21:17:59.655645",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 333963706,
        "user_id": 18274535,
        "timestamp": "2023-02-18T21:18:07.113591",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 332936928,
        "user_id": 13384477,
        "timestamp": "2023-02-18T21:18:14.705854",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 332926200,
        "user_id": 2823112,
        "timestamp": "2023-02-18T21:18:23.148388",
        "branch": "main",
        "command_groups": [
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 332877582,
        "user_id": 4495757,
        "timestamp": "2023-02-18T21:18:30.581120",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 332242417,
        "user_id": 52854254,
        "timestamp": "2023-02-18T21:18:38.035046",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 331793155,
        "user_id": 13315888,
        "timestamp": "2023-02-18T21:18:45.430048",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 331743022,
        "user_id": 70705663,
        "timestamp": "2023-02-18T21:18:52.870902",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 331083750,
        "user_id": 7062009,
        "timestamp": "2023-02-18T21:19:00.479515",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "square that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "bracket that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(double) quote that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "single quote that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 330247476,
        "user_id": 109418,
        "timestamp": "2023-02-18T21:19:08.066094",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 330139190,
        "user_id": 73491988,
        "timestamp": "2023-02-18T21:19:15.585266",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 330124626,
        "user_id": 931544,
        "timestamp": "2023-02-18T21:19:23.080565",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "stoosh": "edit.copy()",
                    "snatch": "edit.cut()",
                    "spark": "edit.paste()",
                    "ringle": "edit.undo()",
                    "dingle": "edit.redo()",
                    "yum save": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "yum open": "app.tab_open()",
                    "yum prev": "app.tab_previous()",
                    "yum next": "app.tab_next()",
                    "yum reopen": "app.tab_reopen()",
                    "yum jump <number>": "user.tab_jump(number)",
                    "yum jump last": "user.tab_final()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 329687465,
        "user_id": 8341598,
        "timestamp": "2023-02-18T21:19:34.436912",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 329307061,
        "user_id": 2152027,
        "timestamp": "2023-02-18T21:19:41.835981",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 329047695,
        "user_id": 6142662,
        "timestamp": "2023-02-18T21:19:49.277763",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 328776045,
        "user_id": 1030961,
        "timestamp": "2023-02-18T21:19:56.753473",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 327846674,
        "user_id": 509141,
        "timestamp": "2023-02-18T21:20:04.294643",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 327767812,
        "user_id": 1348763,
        "timestamp": "2023-02-18T21:20:16.445144",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 327762479,
        "user_id": 117642,
        "timestamp": "2023-02-18T21:20:23.960169",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 327473194,
        "user_id": 607281,
        "timestamp": "2023-02-18T21:20:31.384883",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 327406289,
        "user_id": 31413647,
        "timestamp": "2023-02-18T21:20:39.007046",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 326922917,
        "user_id": 407302,
        "timestamp": "2023-02-18T21:20:46.489656",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 326731774,
        "user_id": 4630670,
        "timestamp": "2023-02-18T21:20:54.086176",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 326476423,
        "user_id": 64963307,
        "timestamp": "2023-02-18T21:21:01.544276",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 326280784,
        "user_id": 17242147,
        "timestamp": "2023-02-18T21:21:13.018791",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 326179577,
        "user_id": 36928885,
        "timestamp": "2023-02-18T21:21:20.526796",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 325830117,
        "user_id": 25573864,
        "timestamp": "2023-02-18T21:21:28.251698",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 325631725,
        "user_id": 1474758,
        "timestamp": "2023-02-18T21:21:35.760566",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 325623187,
        "user_id": 1390086,
        "timestamp": "2023-02-18T21:21:43.219197",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325615708,
        "user_id": 9439781,
        "timestamp": "2023-02-18T21:21:50.833326",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "stick that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 325434799,
        "user_id": 1622392,
        "timestamp": "2023-02-18T21:21:58.320123",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 325363921,
        "user_id": 755842,
        "timestamp": "2023-02-18T21:22:06.689201",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/abbreviate/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "<user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} scout <user.text>": "user.search_with_search_engine(search_engine, user.text)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "collapse": "edit.zoom_in()",
                    "expand": "edit.zoom_out()",
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()",
                    "disk oliver": "edit.save_all()",
                    "padding": "user.insert_between(\" \", \" \")",
                    "pour": "edit.line_insert_down()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "tug": "edit.left()",
                    "drain": "edit.word_left()",
                    "push": "edit.right()",
                    "step": "edit.word_right()",
                    "head": "edit.line_start()",
                    "tail": "edit.line_end()",
                    "<user.select> lefter": "edit.extend_word_left()",
                    "<user.select> writer": "edit.extend_word_right()",
                    "take head": "edit.extend_line_start()",
                    "take tail": "edit.extend_line_end()",
                    "<user.delete> up": "edit.extend_line_up()\nedit.delete()",
                    "<user.delete> down": "edit.extend_line_down()\nedit.delete()",
                    "<user.delete> word": "edit.delete_word()",
                    "<user.delete> head": "edit.extend_line_start()\nedit.delete()",
                    "<user.delete> tail": "edit.extend_line_end()\nedit.delete()",
                    "<user.delete> way up": "edit.extend_file_start()\nedit.delete()",
                    "<user.delete> way down": "edit.extend_file_end()\nedit.delete()",
                    "<user.delete> all": "edit.select_all()\nedit.delete()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab make": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "core/text/text.talon",
                "context": "text",
                "commands": {
                    "<user.format_text>": "user.insert_many(format_text_list)",
                    "<user.format_text> halt": "user.insert_many(format_text_list)",
                    "strict <user.format_text>": "user.insert_many(format_text_list)"
                }
            },
            {
                "file": "plugin/cancel/cancel.talon",
                "context": "cancel",
                "commands": {
                    "cancel": "skip()"
                }
            },
            {
                "file": "plugin/desktops/desktops.talon",
                "context": "desktops",
                "commands": {
                    "pop desk <number_small>": "user.desktop(number_small)",
                    "pop desk next": "user.desktop_next()",
                    "pop desk last": "user.desktop_last()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "dub click": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(scroll | school) down": "user.mouse_scroll_down()",
                    "(scroll | school) down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "(scroll | school) tiny [down]": "user.mouse_scroll_down(0.2)",
                    "(scroll | school) tiny [down] here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down(0.2)",
                    "(scroll | school) downer": "user.mouse_scroll_down_continuous()",
                    "(scroll | school) downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "(scroll | school) up": "user.mouse_scroll_up()",
                    "(scroll | school) up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up()",
                    "(scroll | school) tiny up": "user.mouse_scroll_up(0.2)",
                    "(scroll | school) tiny up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up(0.2)",
                    "(scroll | school) upper": "user.mouse_scroll_up_continuous()",
                    "(scroll | school) upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "(scroll | school) gaze": "user.mouse_gaze_scroll()",
                    "(scroll | school) gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "(scroll | school) stop": "user.mouse_scroll_stop()",
                    "(scroll | school) stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()",
                    "(scroll | school) left": "user.mouse_scroll_left()",
                    "(scroll | school) left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left()",
                    "(scroll | school) tiny left": "user.mouse_scroll_left(0.5)",
                    "(scroll | school) tiny left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left(0.5)",
                    "(scroll | school) right": "user.mouse_scroll_right()",
                    "(scroll | school) right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right()",
                    "(scroll | school) tiny right": "user.mouse_scroll_right(0.5)",
                    "(scroll | school) tiny right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "pebbles": "\"...\"",
                    "spam": "\", \"",
                    "quad": "user.insert_between('\"', '\"')",
                    "twin": "user.insert_between(\"'\", \"'\")",
                    "ski": "user.insert_between(\"`\", \"`\")",
                    "escaped quad": "user.insert_between('\\\\\"', '\\\\\"')",
                    "escaped twin": "user.insert_between(\"\\\\'\", \"\\\\'\")",
                    "round": "user.insert_between(\"(\", \")\")",
                    "square": "user.insert_between(\"[\", \"]\")",
                    "curly": "user.insert_between(\"{\", \"}\")",
                    "(diamond | angle) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(curly | lace) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(round | leper) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(double | quad) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "(single | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "plugin/repeater/repeater.talon",
                "context": "repeater",
                "commands": {
                    "twice": "core.repeat_command(1)"
                }
            },
            {
                "file": "lang/vimscript/vimscript.talon",
                "context": "vimscript",
                "commands": {
                    "<user.operator> command": "\"command! \"",
                    "<user.operator> end if": "\"endif\"",
                    "<user.operator> end for": "\"endfor\"",
                    "<user.operator> end while": "\"endwhile\"",
                    "<user.operator> end function": "\"endfunction\"",
                    "<user.operator> continue": "\"continue\""
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "<user.operator> comment": "\"// \"",
                    "<user.operator> (funk | func | fun)": "\"func \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> break": "\"break\"",
                    "<user.operator> (chan | channel)": "\" chan \"",
                    "<user.operator> go": "\"go \"",
                    "<user.operator> if": "\"if \"",
                    "<user.operator> else if": "\" else if \"",
                    "<user.operator> else": "\" else \"",
                    "<user.operator> while": "\"while \"",
                    "<user.operator> for": "\"for \"",
                    "<user.operator> for range": "\"forr \"",
                    "<user.operator> format": "\"fmt\"",
                    "<user.operator> switch": "\"switch \"",
                    "<user.operator> select": "\"select \"",
                    "<user.operator> (const | constant)": "\" const \"",
                    "<user.operator> case": "\" case \"",
                    "<user.operator> default": "\" default:\"",
                    "<user.operator> type": "\" type \"",
                    "<user.operator> true": "\" true \"",
                    "<user.operator> false": "\" false \"",
                    "<user.operator> (start | struct | struck)": "insert(\" struct {\")\nkey(\"enter\")",
                    "[<user.operator>] empty interface": "\" interface{} \"",
                    "<user.operator> interface": "insert(\" interface {\")\nkey(\"enter\")",
                    "<user.operator> string": "\" string \"",
                    "[<user.operator>] (int | integer | ant)": "\"int\"",
                    "<user.operator> slice": "\" []\"",
                    "[<user.operator>] (no | nil)": "\"nil\"",
                    "<user.operator> (int | integer | ant) sixty four": "\" int64 \"",
                    "<user.operator> tag": "user.insert_between(\" `\", \"`\")",
                    "<user.operator> return": "\" return \"",
                    "<user.operator> (air | err)": "\"err\""
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "<user.operator> (def | deaf | deft)": "\"def \"",
                    "<user.operator> try": "\"try:\\n\"",
                    "<user.operator> except": "\"except \"",
                    "<user.operator> raise": "\"raise \"",
                    "<user.operator> past": "\"pass\"",
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 324985035,
        "user_id": 18719098,
        "timestamp": "2023-02-18T21:22:14.127597",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 324636743,
        "user_id": 1121562,
        "timestamp": "2023-02-18T21:22:22.342402",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "(no-caps | no caps)": "user.dictation_format_no_cap()",
                    "(no-space | no space)": "user.dictation_format_no_space()",
                    "formatted <user.format_text> [over]": "user.dictation_insert_raw(format_text)",
                    "spell that <user.letters> [over]": "user.dictation_insert(letters)",
                    "spell that <user.formatters> <user.letters> [over]": "result = user.formatted_text(letters, formatters)\nuser.dictation_insert_raw(result)"
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} hunt (that | this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "screen up": "edit.page_up()",
                    "screen down": "edit.page_down()",
                    "undo [that]": "edit.undo()",
                    "redo [that]": "edit.redo()",
                    "paste (match | raw)": "edit.paste_match_style()",
                    "[file] save": "edit.save()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "find [it]": "edit.find()",
                    "go word left | before": "edit.word_left()",
                    "go word right | after": "edit.word_right()",
                    "left": "edit.left()",
                    "right": "edit.right()",
                    "up": "edit.up()",
                    "down": "edit.down()",
                    "[go line] start": "edit.line_start()",
                    "go way left | [go] west": "edit.line_start()\nedit.line_start()",
                    "go way right | [go] east": "edit.line_end()",
                    "go way down | [go] south": "edit.file_end()",
                    "go way up | [go] north": "edit.file_start()",
                    "select line | line select": "edit.select_line()",
                    "select all | all select": "edit.select_all()",
                    "select left | lefts": "edit.extend_left()",
                    "select right | rights": "edit.extend_right()",
                    "select word left | befores": "edit.extend_word_left()",
                    "select word right | afters": "edit.extend_word_right()",
                    "(indent less | out dent | dedent)": "edit.indent_less()",
                    "clear line | line clear": "edit.delete_line()",
                    "clear left | lefts delete": "key(backspace)",
                    "clear right | rights delete": "key(delete)",
                    "clear word left | befores delete": "edit.extend_word_left()\nedit.delete()",
                    "clear word right | afters delete": "edit.extend_word_right()\nedit.delete()"
                }
            },
            {
                "file": "core/windows_and_tabs/window_management.talon",
                "context": "window management",
                "commands": {
                    "(window | win) (new | open)": "app.window_open()",
                    "(window | win) next": "app.window_next()",
                    "(window | win) last": "app.window_previous()",
                    "(window | win) close": "app.window_close()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | previous | left)": "app.tab_previous()",
                    "tab (next | right)": "app.tab_next()",
                    "go tab (final | last)": "user.tab_final()",
                    "tab (dupe | duplicate)": "user.tab_duplicate()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "(ship | uppercase | upper) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "here [left] touch": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "here right touch": "mouse_click(1)\nuser.grid_close()",
                    "here middle touch": "mouse_click(2)\nuser.grid_close()",
                    "here <user.modifiers> touch": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "here <user.modifiers> right touch": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "here double touch": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "here triple touch": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "here [left] drag": "user.mouse_drag(0)\nuser.grid_close()",
                    "here right drag": "user.mouse_drag(1)\nuser.grid_close()",
                    "end drag": "user.mouse_drag_end()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(square | bracket) that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "single quote that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(quote | dub quote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "plugin/media/media.talon",
                "context": "media",
                "commands": {
                    "(volume | media) (mute | unmute)": "key(mute)",
                    "[media] play next | track next": "key(next)",
                    "[media] play previous | track preev": "key(prev)",
                    "(media | track) (play | pause)": "user.play_pause()"
                }
            }
        ]
    },
    {
        "repo_id": 324501008,
        "user_id": 22695960,
        "timestamp": "2023-02-18T21:22:34.000169",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 323120515,
        "user_id": 6768125,
        "timestamp": "2023-02-18T21:22:41.502670",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 322675255,
        "user_id": 85699,
        "timestamp": "2023-02-18T21:22:48.991050",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 322622132,
        "user_id": 655662,
        "timestamp": "2023-02-18T21:22:56.506951",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 321896045,
        "user_id": 11382032,
        "timestamp": "2023-02-18T21:23:04.125122",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 321422815,
        "user_id": 1341513,
        "timestamp": "2023-02-18T21:23:11.622604",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 321420075,
        "user_id": 1522755,
        "timestamp": "2023-02-18T21:32:25.282197",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 321317204,
        "user_id": 26982377,
        "timestamp": "2023-02-18T21:32:37.372482",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(bracket) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 320949729,
        "user_id": 75915115,
        "timestamp": "2023-02-18T21:32:45.008875",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 320418113,
        "user_id": 4473327,
        "timestamp": "2023-02-18T21:32:52.607875",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 319504484,
        "user_id": 6190142,
        "timestamp": "2023-02-18T21:33:00.093753",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 319409784,
        "user_id": 5891146,
        "timestamp": "2023-02-18T21:33:07.620477",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 319306558,
        "user_id": 20419551,
        "timestamp": "2023-02-18T21:33:15.128834",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 318240280,
        "user_id": 1012322,
        "timestamp": "2023-02-18T21:33:27.473119",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 317919444,
        "user_id": 74801510,
        "timestamp": "2023-02-18T21:33:35.113464",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 317186209,
        "user_id": 48803018,
        "timestamp": "2023-02-18T21:33:42.689289",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 315437621,
        "user_id": 540820,
        "timestamp": "2023-02-18T21:33:50.157025",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 314792396,
        "user_id": 35661160,
        "timestamp": "2023-02-18T21:33:57.800428",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 314618668,
        "user_id": 1500330,
        "timestamp": "2023-02-18T21:34:05.286497",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 313348019,
        "user_id": 30940553,
        "timestamp": "2023-02-18T21:34:12.769017",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 313148859,
        "user_id": 13286932,
        "timestamp": "2023-02-18T21:34:20.241126",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 312427481,
        "user_id": 6810733,
        "timestamp": "2023-02-18T21:34:27.763310",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 312376602,
        "user_id": 68613162,
        "timestamp": "2023-02-18T21:34:35.243139",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 312078495,
        "user_id": 6209894,
        "timestamp": "2023-02-18T21:34:42.786175",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 311843534,
        "user_id": 2889740,
        "timestamp": "2023-02-18T21:34:50.257643",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 311713270,
        "user_id": 5415776,
        "timestamp": "2023-02-18T21:35:02.429410",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 311626284,
        "user_id": 17849478,
        "timestamp": "2023-02-18T21:35:10.022022",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 311509912,
        "user_id": 34281919,
        "timestamp": "2023-02-18T21:35:17.513289",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 310973410,
        "user_id": 9855832,
        "timestamp": "2023-02-18T21:35:25.299144",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "undo": "edit.undo()",
                    "oops": "edit.undo()",
                    "redo": "edit.redo()",
                    "[file] save": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "(shiv | uppercase) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "<user.modifiers> lefty": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "dub lefty": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "trip lefty": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "drag | lefty drag": "user.mouse_drag(0)\nuser.grid_close()",
                    "righty drag": "user.mouse_drag(1)\nuser.grid_close()",
                    "wheel [gaze]": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(triple grave | triple bee tick | gravy)": "insert(\"```\")",
                    "(comma and | comm ace)": "\", \"",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 310146072,
        "user_id": 12578541,
        "timestamp": "2023-02-18T21:35:37.792114",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 309754915,
        "user_id": 11227560,
        "timestamp": "2023-02-18T21:35:45.410328",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 309503136,
        "user_id": 11822551,
        "timestamp": "2023-02-18T21:35:52.875487",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 308764186,
        "user_id": 2544,
        "timestamp": "2023-02-18T21:36:00.340796",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 308749794,
        "user_id": 391217,
        "timestamp": "2023-02-18T21:36:07.850623",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 308575021,
        "user_id": 245131,
        "timestamp": "2023-02-18T21:36:15.345765",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 308389307,
        "user_id": 16633957,
        "timestamp": "2023-02-18T21:36:22.814223",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 308354451,
        "user_id": 7370305,
        "timestamp": "2023-02-18T21:36:30.376455",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 308083280,
        "user_id": 6002123,
        "timestamp": "2023-02-18T21:36:38.019296",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 308037068,
        "user_id": 784395,
        "timestamp": "2023-02-18T21:36:45.645028",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 307748026,
        "user_id": 46014,
        "timestamp": "2023-02-18T21:36:53.108800",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307733438,
        "user_id": 18484366,
        "timestamp": "2023-02-18T21:37:00.558087",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307679339,
        "user_id": 6322017,
        "timestamp": "2023-02-18T21:37:08.285932",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 307591368,
        "user_id": 22757756,
        "timestamp": "2023-02-18T21:37:20.302669",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 307220480,
        "user_id": 1487851,
        "timestamp": "2023-02-18T21:37:27.857512",
        "branch": "personal",
        "command_groups": [
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "left drag | dragging": "user.mouse_drag(0)\nuser.grid_close()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside curly": "user.insert_between(\"{\", \"}\")"
                }
            }
        ]
    },
    {
        "repo_id": 307148350,
        "user_id": 24275520,
        "timestamp": "2023-02-18T21:37:35.310726",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307030698,
        "user_id": 9410259,
        "timestamp": "2023-02-18T21:37:42.761077",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306999501,
        "user_id": 659425,
        "timestamp": "2023-02-18T21:37:50.207239",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306875261,
        "user_id": 70815886,
        "timestamp": "2023-02-18T21:37:57.682461",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306503417,
        "user_id": 3289356,
        "timestamp": "2023-02-18T21:38:05.291610",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306438270,
        "user_id": 1071954,
        "timestamp": "2023-02-18T21:38:12.752558",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306233873,
        "user_id": 102322,
        "timestamp": "2023-02-18T21:38:24.956160",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306149514,
        "user_id": 422351,
        "timestamp": "2023-02-18T21:38:32.399723",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "(cap | ship | uppercase) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306119531,
        "user_id": 9026786,
        "timestamp": "2023-02-18T21:38:39.861749",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 306032778,
        "user_id": 8534723,
        "timestamp": "2023-02-18T21:38:47.396074",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 305172709,
        "user_id": 63643181,
        "timestamp": "2023-02-18T21:38:54.897249",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 304761759,
        "user_id": 19195374,
        "timestamp": "2023-02-18T21:39:02.420231",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 304177733,
        "user_id": 17128644,
        "timestamp": "2023-02-18T21:39:09.937112",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 303216638,
        "user_id": 97816,
        "timestamp": "2023-02-18T21:39:17.462619",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 303114508,
        "user_id": 10352319,
        "timestamp": "2023-02-18T21:39:24.980410",
        "branch": "jp",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> right click": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "fat arrow": "\"=>\""
                }
            }
        ]
    },
    {
        "repo_id": 302971998,
        "user_id": 18706229,
        "timestamp": "2023-02-18T21:39:32.759363",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small>": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small>": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small>": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small>": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 302752929,
        "user_id": 6108994,
        "timestamp": "2023-02-18T21:39:45.419644",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 301890435,
        "user_id": 54477607,
        "timestamp": "2023-02-18T21:39:52.912146",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 301744386,
        "user_id": 9698054,
        "timestamp": "2023-02-18T21:40:00.452968",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 301436880,
        "user_id": 8015081,
        "timestamp": "2023-02-18T21:40:07.912602",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 301019806,
        "user_id": 21976313,
        "timestamp": "2023-02-18T21:40:15.370090",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "gone": "g",
                    "johnny": "j",
                    "mad": "m",
                    "wet": "w",
                    "zeta": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "scatter": "escape",
                    "junk": "backspace",
                    "skunks": "enter"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";",
                    "under score": "_",
                    "cola": ":",
                    "R brace": "}",
                    "dubquote": "\"",
                    "crunder": "\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat twice": "core.repeat_command(1)",
                    "repeat <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(dub arrow|implies)": "\"=>\"",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 299424853,
        "user_id": 45152129,
        "timestamp": "2023-02-18T21:40:22.845460",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 298661264,
        "user_id": 72190,
        "timestamp": "2023-02-18T21:40:30.323870",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 298547874,
        "user_id": 40725916,
        "timestamp": "2023-02-18T21:40:37.872228",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 298526245,
        "user_id": 6624600,
        "timestamp": "2023-02-18T21:40:45.345065",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 298450871,
        "user_id": 18283966,
        "timestamp": "2023-02-18T21:40:52.875397",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 298385753,
        "user_id": 733785,
        "timestamp": "2023-02-18T21:41:00.501213",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 297013216,
        "user_id": 3668899,
        "timestamp": "2023-02-18T21:41:12.823452",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 296901070,
        "user_id": 71561126,
        "timestamp": "2023-02-18T21:41:20.303624",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 296835864,
        "user_id": 167771,
        "timestamp": "2023-02-18T21:41:27.769728",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "triple dot": "\"...\"",
                    "fat arrow": "\"=>\"",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 295226049,
        "user_id": 102321,
        "timestamp": "2023-02-18T21:41:35.210435",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 293404684,
        "user_id": 54991041,
        "timestamp": "2023-02-18T21:41:42.693480",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 291340252,
        "user_id": 9662927,
        "timestamp": "2023-02-18T21:41:50.126438",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "running hide": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 291175756,
        "user_id": 69595,
        "timestamp": "2023-02-18T21:41:58.847221",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 290739994,
        "user_id": 1415856,
        "timestamp": "2023-02-18T21:42:06.212562",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 289439496,
        "user_id": 1733493,
        "timestamp": "2023-02-18T21:42:13.748920",
        "branch": "master",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "dubarrow": "\"=>\"",
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 289389044,
        "user_id": 86104,
        "timestamp": "2023-02-18T21:42:21.423170",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 289305379,
        "user_id": 56042962,
        "timestamp": "2023-02-18T21:42:28.891701",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "undo": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "running hide": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(dot dot | dotdot | double dot)": "\"..\""
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 288951773,
        "user_id": 1822656,
        "timestamp": "2023-02-18T21:42:36.418622",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(file save | save it | save that)": "edit.save()",
                    "(undo that | dizzle)": "edit.undo()",
                    "(redo that | rizzle)": "edit.redo()",
                    "page up": "edit.paste()",
                    "play star": "edit.paste()"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            }
        ]
    },
    {
        "repo_id": 286056922,
        "user_id": 63370027,
        "timestamp": "2023-02-18T21:42:49.806892",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 285632515,
        "user_id": 16143,
        "timestamp": "2023-02-18T21:42:57.308888",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 284771656,
        "user_id": 60350599,
        "timestamp": "2023-02-18T21:43:04.735052",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 284344389,
        "user_id": 6225521,
        "timestamp": "2023-02-18T21:43:12.263372",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 284233518,
        "user_id": 37806340,
        "timestamp": "2023-02-18T21:43:19.736834",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "mouse (click | click left)": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "mouse click right": "mouse_click(1)\nuser.grid_close()",
                    "mouse click middle": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> mouse click (left)": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "<user.modifiers> mouse click right": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "mouse click twice": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "mouse click three times": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "mouse drag left": "user.mouse_drag(0)\nuser.grid_close()",
                    "mouse drag right": "user.mouse_drag(1)\nuser.grid_close()",
                    "mouse drag end": "user.mouse_drag_end()",
                    "mouse wheel down": "user.mouse_scroll_down()",
                    "mouse wheel down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "mouse wheel tiny [down]": "user.mouse_scroll_down(0.2)",
                    "mouse wheel tiny [down] here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down(0.2)",
                    "mouse wheel downer": "user.mouse_scroll_down_continuous()",
                    "mouse wheel downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "mouse wheel up": "user.mouse_scroll_up()",
                    "mouse wheel up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up()",
                    "mouse wheel tiny up": "user.mouse_scroll_up(0.2)",
                    "mouse wheel tiny up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up(0.2)",
                    "mouse wheel upper": "user.mouse_scroll_up_continuous()",
                    "mouse wheel upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "mouse wheel gaze": "user.mouse_gaze_scroll()",
                    "mouse wheel gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "mouse wheel stop": "user.mouse_scroll_stop()",
                    "mouse wheel stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()",
                    "mouse wheel left": "user.mouse_scroll_left()",
                    "mouse wheel left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left()",
                    "mouse wheel tiny left": "user.mouse_scroll_left(0.5)",
                    "mouse wheel tiny left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left(0.5)",
                    "mouse wheel right": "user.mouse_scroll_right()",
                    "mouse wheel right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right()",
                    "mouse wheel tiny right": "user.mouse_scroll_right(0.5)",
                    "mouse wheel tiny right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 284073479,
        "user_id": 62727053,
        "timestamp": "2023-02-18T21:43:27.100508",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 282429782,
        "user_id": 26546453,
        "timestamp": "2023-02-18T21:43:34.538846",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 282317502,
        "user_id": 68303,
        "timestamp": "2023-02-18T21:43:42.363308",
        "branch": "nriley",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "<user.number_string> over": "\"{number_string}\""
                }
            },
            {
                "file": "core/abbreviate/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate | abreviate | brief) {user.abbreviation} over": "\"{abbreviation}\""
                }
            },
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "snore [<phrase>]": "speech.disable()"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "copy (that | bat)": "edit.copy()",
                    "nope | undo that": "edit.undo()",
                    "(read do | redo) that": "edit.redo()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "hunt this": "edit.find()",
                    "hunt next": "edit.find_next()",
                    "go (word (left | previous) | west)": "edit.word_left()",
                    "go (word (right | next) | east)": "edit.word_right()",
                    "head | go line start": "edit.line_start()",
                    "tail | go line end": "edit.line_end()",
                    "select (word (left | previous) | west)": "edit.extend_word_left()",
                    "select (word (right | next) | east)": "edit.extend_word_right()",
                    "clear (word (left | previous) | west)": "edit.extend_word_left()\nedit.delete()",
                    "clear (word (right | next) | east)": "edit.extend_word_right()\nedit.delete()",
                    "copy (word (left | previous) | west)": "user.copy_word_left()",
                    "copy (word (right | next) | east)": "user.copy_word_right()",
                    "cut (word (left | previous) | west)": "user.cut_word_left()",
                    "cut (word (right | next) | east)": "user.cut_word_right()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "(ship | uppercase) <user.letters> [(lowercase | sunk | over)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "plugin/text_navigation/text_navigation.talon",
                "context": "text navigation",
                "commands": {
                    "({user.navigation_action} [{user.arrow_key}] [{user.navigation_target_name}] [{user.before_or_after}] | [{user.arrow_key}] {user.before_or_after}) [<user.ordinals>] <user.navigation_target>": "user.navigation(navigation_action or \"GO\", arrow_key or \"RIGHT\", navigation_target_name or \"DEFAULT\", before_or_after or \"DEFAULT\", navigation_target, ordinals or 1)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "comgap": "\", \"",
                    "inside (brackets | square brackets | list)": "user.insert_between(\"[\", \"]\")",
                    "inside (braces | curly brackets)": "user.insert_between(\"{\", \"}\")",
                    "inside dub quotes": "user.insert_between('\"', '\"')",
                    "inside back ticks": "user.insert_between(\"`\", \"`\")",
                    "brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "bracket that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "back tick that": "text = edit.selected_text()\nuser.paste(\"`{text}`\")"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "dock string | dock quote": "user.code_comment_documentation()"
                }
            }
        ]
    },
    {
        "repo_id": 281967447,
        "user_id": 6692932,
        "timestamp": "2023-02-18T21:43:52.809269",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 281743457,
        "user_id": 29542,
        "timestamp": "2023-02-18T21:44:00.200512",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | prev)": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()",
                    "[go] tab <number>": "user.tab_jump(number)"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "self dot": "\"self.\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 281230322,
        "user_id": 28070802,
        "timestamp": "2023-02-18T21:44:07.675649",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 280505492,
        "user_id": 47227280,
        "timestamp": "2023-02-18T21:44:15.141094",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 280243668,
        "user_id": 9683693,
        "timestamp": "2023-02-18T21:44:22.647352",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 279141559,
        "user_id": 8095,
        "timestamp": "2023-02-18T21:44:30.034069",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 279110353,
        "user_id": 775602,
        "timestamp": "2023-02-18T21:44:37.460401",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "undo": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 274991887,
        "user_id": 21044858,
        "timestamp": "2023-02-18T21:44:44.979237",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 274039239,
        "user_id": 7183947,
        "timestamp": "2023-02-18T21:44:56.067839",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            }
        ]
    },
    {
        "repo_id": 273909275,
        "user_id": 15688148,
        "timestamp": "2023-02-18T21:45:03.441055",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 273639237,
        "user_id": 2071583,
        "timestamp": "2023-02-18T21:45:10.960157",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 273622533,
        "user_id": 1237457,
        "timestamp": "2023-02-18T21:45:18.405644",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 273488014,
        "user_id": 221395,
        "timestamp": "2023-02-18T21:45:25.837176",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 273104878,
        "user_id": 5633015,
        "timestamp": "2023-02-18T21:45:33.581182",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 272800071,
        "user_id": 465955,
        "timestamp": "2023-02-18T21:45:40.959675",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 272680038,
        "user_id": 4499807,
        "timestamp": "2023-02-18T21:45:48.405265",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy that | copying": "edit.copy()",
                    "cut that | cutting": "edit.cut()",
                    "paste that | pasty | basting | basty": "edit.paste()",
                    "paste match | (pasty basting | basty) match": "edit.paste_match_style()",
                    "file save | saving": "edit.save()",
                    "undo that | undoing": "edit.undo()",
                    "redo that | redoing": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "running hide": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 272562044,
        "user_id": 14012083,
        "timestamp": "2023-02-18T21:45:55.838969",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 272287700,
        "user_id": 3903883,
        "timestamp": "2023-02-18T21:46:03.263462",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 271209156,
        "user_id": 44053,
        "timestamp": "2023-02-18T21:46:10.732776",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste it": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> touch|click": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            }
        ]
    },
    {
        "repo_id": 271034444,
        "user_id": 2762244,
        "timestamp": "2023-02-18T21:46:18.140631",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice|again|yap|yeah|yup)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "fold left": "app.tab_previous()",
                    "fold right": "app.tab_next()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 269575712,
        "user_id": 3338723,
        "timestamp": "2023-02-18T21:46:25.593123",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/modes.talon",
                "context": "modes",
                "commands": {
                    "flute": "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")",
                    "bell": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")",
                    "xylophone": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 269255402,
        "user_id": 15963642,
        "timestamp": "2023-02-18T21:46:33.060627",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 269063117,
        "user_id": 30029456,
        "timestamp": "2023-02-18T21:46:40.501840",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 268822230,
        "user_id": 195691,
        "timestamp": "2023-02-18T21:46:49.459288",
        "branch": "master",
        "command_groups": [
            {
                "file": "weyrick/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            }
        ]
    },
    {
        "repo_id": 268588819,
        "user_id": 20529132,
        "timestamp": "2023-02-18T21:46:56.867624",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 268437353,
        "user_id": 24466561,
        "timestamp": "2023-02-18T21:47:04.280652",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 268333373,
        "user_id": 28877984,
        "timestamp": "2023-02-18T21:47:11.849016",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/desktops/desktops.talon",
                "context": "desktops",
                "commands": {
                    "(work | space) <number_small>": "user.desktop(number_small)",
                    "(work | space) (next | right)": "user.desktop_next()",
                    "(work | space) (last | left)": "user.desktop_last()",
                    "(work | space) show": "user.desktop_show()",
                    "send (last | left)": "user.window_move_desktop_left()",
                    "send (next | right)": "user.window_move_desktop_right()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "kick": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "psychic": "mouse_click(1)\nuser.grid_close()",
                    "midkick": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> kick": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "<user.modifiers> psychic": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 268076627,
        "user_id": 5120858,
        "timestamp": "2023-02-18T21:47:19.273797",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 267140863,
        "user_id": 7101437,
        "timestamp": "2023-02-18T21:47:26.728783",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 266382222,
        "user_id": 1672198,
        "timestamp": "2023-02-18T21:47:34.361430",
        "branch": "livioso",
        "command_groups": [
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 265252318,
        "user_id": 824653,
        "timestamp": "2023-02-18T21:47:41.732003",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 265147686,
        "user_id": 5149913,
        "timestamp": "2023-02-18T21:47:49.241852",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 265075675,
        "user_id": 65195073,
        "timestamp": "2023-02-18T21:47:56.670800",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 265000961,
        "user_id": 23029324,
        "timestamp": "2023-02-18T21:48:09.482407",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 264501308,
        "user_id": 11707739,
        "timestamp": "2023-02-18T21:48:16.960101",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 264230788,
        "user_id": 7613966,
        "timestamp": "2023-02-18T21:48:24.378293",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 263009933,
        "user_id": 13691822,
        "timestamp": "2023-02-18T21:48:31.840998",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 261881557,
        "user_id": 3040,
        "timestamp": "2023-02-18T21:48:39.268140",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 261841439,
        "user_id": 279612,
        "timestamp": "2023-02-18T21:48:46.662862",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 261146606,
        "user_id": 3083638,
        "timestamp": "2023-02-18T21:48:54.142702",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "run <user.launch_applications>": "user.switcher_launch(launch_applications)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "central": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 260735564,
        "user_id": 500119,
        "timestamp": "2023-02-18T21:49:01.533207",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 260316468,
        "user_id": 1389549,
        "timestamp": "2023-02-18T21:49:09.039566",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 259433533,
        "user_id": 5678977,
        "timestamp": "2023-02-18T21:49:16.657081",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 259113388,
        "user_id": 6349369,
        "timestamp": "2023-02-18T21:49:24.104805",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 257315987,
        "user_id": 9889378,
        "timestamp": "2023-02-18T21:49:31.491348",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 256858087,
        "user_id": 314009,
        "timestamp": "2023-02-18T21:49:38.920011",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 256775335,
        "user_id": 4771794,
        "timestamp": "2023-02-18T21:49:46.368537",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 255445240,
        "user_id": 287396,
        "timestamp": "2023-02-18T21:49:53.775158",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "save": "edit.save()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 253763855,
        "user_id": 13679876,
        "timestamp": "2023-02-18T21:50:01.575699",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/abbreviate/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "brief {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "core/modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "debug mode disable": "mode.disable(\"user.gdb\")"
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "serf too {user.website}": "user.open_url(website)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "pasty": "edit.paste()",
                    "padding": "user.insert_between(\" \", \" \")"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "search": "edit.find()",
                    "go (word left | back)": "edit.word_left()",
                    "go (word right | word)": "edit.word_right()",
                    "go (up | north)": "edit.up()",
                    "go (down | south)": "edit.down()",
                    "go (line start | head)": "edit.line_start()",
                    "go (line end | tail)": "edit.line_end()",
                    "scroll": "edit.page_down()",
                    "(go page up | punk)": "edit.page_up()",
                    "(select | take) all": "edit.select_all()",
                    "select (up | north)": "edit.extend_line_up()",
                    "select (down | south)": "edit.extend_line_down()",
                    "select (way left | bend)": "edit.extend_line_start()",
                    "select (way right | lend)": "edit.extend_line_end()",
                    "select (way up | loft)": "edit.extend_file_start()",
                    "select (way down | gut)": "edit.extend_file_end()",
                    "de dent": "edit.indent_less()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tabby (open | new)": "app.tab_open()",
                    "tabby (last|left)": "app.tab_previous()",
                    "tabby (next|right)": "app.tab_next()",
                    "tabby reopen": "app.tab_reopen()",
                    "go tabby <number>": "user.tab_jump(number)",
                    "go tabby final": "user.tab_final()",
                    "tabby (duplicate)": "user.tab_duplicate()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "press <user.function_key>": "key(function_key)"
                }
            },
            {
                "file": "core/text/text.talon",
                "context": "text",
                "commands": {
                    "<user.format_text>+ [over]": "user.insert_many(format_text_list)",
                    "(nope that | scratch that)": "user.clear_last_phrase()"
                }
            },
            {
                "file": "core/file_extension/file_extension.talon",
                "context": "file extension",
                "commands": {
                    "dot {user.file_extension}": "\"{file_extension}\""
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "mouse zoom": "tracking.control_zoom_toggle()",
                    "mouse calibration": "tracking.calibrate()",
                    "mouse copy position": "user.copy_mouse_position()"
                }
            },
            {
                "file": "plugin/macro/macro.talon",
                "context": "macro",
                "commands": {
                    "voice macro record": "user.macro_record()",
                    "voice macro stop": "user.macro_stop()",
                    "voice macro play [{user.saved_macros}]": "user.macro_play(saved_macros or \"\")",
                    "voice macro copy [{user.saved_macros}]": "user.macro_copy(saved_macros or \"\")",
                    "voice macro copy as <user.text>": "user.macro_copy(text)",
                    "voice macro save as <user.text>": "user.macro_save(text)",
                    "voice macro list": "user.macro_list()",
                    "voice macro list close": "user.macro_list_close()"
                }
            },
            {
                "file": "plugin/command_history/command_history.talon",
                "context": "command history",
                "commands": {
                    "[command] history show": "user.history_toggle()",
                    "[command] history close": "user.history_disable()",
                    "[command] history clear": "user.history_clear()",
                    "[command] history less": "user.history_less()",
                    "[command] history more": "user.history_more()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "triple tick": "\"'''\"",
                    "(ellipses | dotty)": "\"...\"",
                    "empty (string | quotes)": "user.insert_between('\"', '\"')",
                    "empty escaped (string | quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "empty ticks": "user.insert_between(\"'\", \"'\")",
                    "empty escaped ticks": "user.insert_between(\"\\\\'\", \"\\\\'\")",
                    "empty round": "user.insert_between(\"(\", \")\")",
                    "empty (square | list)": "user.insert_between(\"[\", \"]\")",
                    "empty (bracket | braces)": "user.insert_between(\"{\", \"}\")",
                    "empty percent": "user.insert_between(\"%\", \"%\")",
                    "[pair] (round)": "user.insert_between(\"(\", \")\")",
                    "[pair] (brackets | braces)": "user.insert_between(\"{\", \"}\")",
                    "[pair] (square | squares)": "user.insert_between(\"[\", \"]\")",
                    "[pair] graves": "user.insert_between(\"`\", \"`\")",
                    "[pair] percents": "user.insert_between(\"%\", \"%\")",
                    "[pair] ticks": "user.insert_between(\"'\", \"'\")",
                    "[pair] quotes": "user.insert_between('\"', '\"')",
                    "angles that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(squares) that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(braces) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "round that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            },
            {
                "file": "plugin/repeater/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat <user.ordinals>": "core.repeat_command(ordinals - 1)",
                    "repeat <number_small> times": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "plugin/media/media.talon",
                "context": "media",
                "commands": {
                    "music mute": "key(mute)",
                    "music next": "key(next)",
                    "music previous": "key(prev)",
                    "music (play | pause | stop)": "user.play_pause()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "require win": "insert(\"os: windows\\n\")",
                    "require mac": "insert(\"os: mac\\n\")",
                    "require linux": "insert(\"os: linux\\n\")",
                    "require title": "insert(\"win.title: \")",
                    "require (application|app) [{user.talon_apps}]": "app = talon_apps or \"\"\nuser.paste(\"app: {app}\")",
                    "require mode [{user.talon_modes}]": "mode = talon_modes or \"\"\nuser.paste(\"mode: {mode}\")",
                    "require tag [{user.talon_tags}]": "tag = talon_tags or \"\"\nuser.paste(\"tag: {tag}\")"
                }
            }
        ]
    },
    {
        "repo_id": 253432877,
        "user_id": 3946314,
        "timestamp": "2023-02-18T21:50:10.363850",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/abbreviate/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "brief {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "core/modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "debug mode disable": "mode.disable(\"user.gdb\")"
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "serf too {user.website}": "user.open_url(website)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "pasty": "edit.paste()",
                    "padding": "user.insert_between(\" \", \" \")"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "search": "edit.find()",
                    "go (word left | back)": "edit.word_left()",
                    "go (word right | word)": "edit.word_right()",
                    "go (up | north)": "edit.up()",
                    "go (down | south)": "edit.down()",
                    "go (line start | head)": "edit.line_start()",
                    "go (line end | tail)": "edit.line_end()",
                    "scroll": "edit.page_down()",
                    "(go page up | punk)": "edit.page_up()",
                    "(select | take) all": "edit.select_all()",
                    "select (up | north)": "edit.extend_line_up()",
                    "select (down | south)": "edit.extend_line_down()",
                    "select (way left | bend)": "edit.extend_line_start()",
                    "select (way right | lend)": "edit.extend_line_end()",
                    "select (way up | loft)": "edit.extend_file_start()",
                    "select (way down | gut)": "edit.extend_file_end()",
                    "de dent": "edit.indent_less()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tabby (open | new)": "app.tab_open()",
                    "tabby (last|left)": "app.tab_previous()",
                    "tabby (next|right)": "app.tab_next()",
                    "tabby reopen": "app.tab_reopen()",
                    "go tabby <number>": "user.tab_jump(number)",
                    "go tabby final": "user.tab_final()",
                    "tabby (duplicate)": "user.tab_duplicate()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "press <user.function_key>": "key(function_key)"
                }
            },
            {
                "file": "core/text/text.talon",
                "context": "text",
                "commands": {
                    "<user.format_text>+ [over]": "user.insert_many(format_text_list)",
                    "(nope that | scratch that)": "user.clear_last_phrase()"
                }
            },
            {
                "file": "core/file_extension/file_extension.talon",
                "context": "file extension",
                "commands": {
                    "dot {user.file_extension}": "\"{file_extension}\""
                }
            }
        ]
    },
    {
        "repo_id": 253386344,
        "user_id": 3613189,
        "timestamp": "2023-02-18T21:50:17.950800",
        "branch": "trapiers",
        "command_groups": []
    },
    {
        "repo_id": 253360438,
        "user_id": 5565479,
        "timestamp": "2023-02-18T21:50:25.476621",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 253084709,
        "user_id": 187354,
        "timestamp": "2023-02-18T21:50:32.846699",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 251687093,
        "user_id": 582133,
        "timestamp": "2023-02-18T21:50:40.238458",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "save": "edit.save()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "downer": "user.mouse_scroll_down_continuous()",
                    "supper": "user.mouse_scroll_up_continuous()",
                    "gaze wheel": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "comma and": "\", \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 251439585,
        "user_id": 567000,
        "timestamp": "2023-02-18T21:50:47.826856",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "save": "edit.save()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "downer": "user.mouse_scroll_down_continuous()",
                    "supper": "user.mouse_scroll_up_continuous()",
                    "gaze wheel": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "comma and": "\", \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 250833527,
        "user_id": 9398481,
        "timestamp": "2023-02-18T21:50:55.205895",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "save": "edit.save()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "downer": "user.mouse_scroll_down_continuous()",
                    "supper": "user.mouse_scroll_up_continuous()",
                    "gaze wheel": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "comma and": "\", \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 250621197,
        "user_id": 91972,
        "timestamp": "2023-02-18T21:51:02.686463",
        "branch": "personal",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "end drag | drag end | drag over": "user.mouse_drag_end()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "[private] function <user.text> [over]": "insert(\"func \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))\ninsert(\"(\")\nsleep(100ms)",
                    "[public] type <user.text> [over]": "insert(\"type \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "raise {user.python_exception}": "user.insert_between(\"raise {python_exception}(\", \")\")",
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "mouse_grid/mouse_grid_open.talon",
                "context": "mouse grid open",
                "commands": {
                    "grid [end|off|over]": "user.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 250298215,
        "user_id": 29916215,
        "timestamp": "2023-02-18T21:51:10.120851",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "downer": "user.mouse_scroll_down_continuous()",
                    "supper": "user.mouse_scroll_up_continuous()",
                    "gaze wheel": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 249500418,
        "user_id": 19349,
        "timestamp": "2023-02-18T21:51:17.843074",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "save that": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "abbreviate {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [lowercase]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "except {user.python_exception}": "\"except {python_exception}:\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "num <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 248855369,
        "user_id": 2822010,
        "timestamp": "2023-02-18T21:51:25.255375",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 248471893,
        "user_id": 2271290,
        "timestamp": "2023-02-18T21:51:38.206330",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 247501390,
        "user_id": 459631,
        "timestamp": "2023-02-18T21:51:45.696097",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            }
        ]
    },
    {
        "repo_id": 246150333,
        "user_id": 3289426,
        "timestamp": "2023-02-18T21:51:53.238658",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy [that]": "edit.copy()",
                    "cut [that]": "edit.cut()",
                    "undo [that]": "edit.undo()",
                    "redo [that]": "edit.redo()",
                    "[file] save": "edit.save()",
                    "[file] save all": "edit.save_all()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "(go word left | stone)": "edit.word_left()",
                    "(go word right | step)": "edit.word_right()",
                    "(go line start | pop)": "edit.line_start()",
                    "(go line end | push)": "edit.line_end()",
                    "[go] page [down]": "edit.page_down()",
                    "[go] page up": "edit.page_up()",
                    "(select | cell) line": "edit.select_line()",
                    "(select | cell) all": "edit.select_all()",
                    "(select | cell) left": "edit.extend_left()",
                    "(select | cell) right": "edit.extend_right()",
                    "(select | cell) up": "edit.extend_line_up()",
                    "(select | cell) down": "edit.extend_line_down()",
                    "(select | cell) word": "edit.select_word()",
                    "(select | cell) word left": "edit.extend_word_left()",
                    "(select | cell) word right": "edit.extend_word_right()",
                    "(select | cell) way left": "edit.extend_line_start()",
                    "(select | cell) way right": "edit.extend_line_end()",
                    "(select | cell) way up": "edit.extend_file_start()",
                    "(select | cell) way down": "edit.extend_file_end()"
                }
            },
            {
                "file": "core/homophones/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones (hide | close)": "user.homophones_hide()"
                }
            },
            {
                "file": "core/help/help.talon",
                "context": "help",
                "commands": {
                    "help [context] {user.help_contexts}": "user.help_selected_context(help_contexts)"
                }
            },
            {
                "file": "plugin/command_history/command_history.talon",
                "context": "command history",
                "commands": {
                    "history hide": "user.history_disable()",
                    "history clear": "user.history_clear()",
                    "history less": "user.history_less()",
                    "history more": "user.history_more()"
                }
            }
        ]
    },
    {
        "repo_id": 245662201,
        "user_id": 25167,
        "timestamp": "2023-02-18T21:52:01.000661",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 245575817,
        "user_id": 40249668,
        "timestamp": "2023-02-18T21:52:08.463163",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "state (int | integer | ant) 64": "\" int64 \"",
                    "return  <user.text> [over]": "insert(\"return \")\ninsert(user.formatted_text(text, \"PRIVATE_CAMEL_CASE\"))"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "next": "\", \""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 241652958,
        "user_id": 13386344,
        "timestamp": "2023-02-18T21:52:15.833956",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            }
        ]
    }
]
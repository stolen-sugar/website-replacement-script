[
    {
        "repo_id": 602680675,
        "user_id": 3415007,
        "timestamp": "2023-02-18T15:34:08.349731",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 602178803,
        "user_id": 2196226,
        "timestamp": "2023-02-18T15:34:14.129822",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 601142017,
        "user_id": 5738005,
        "timestamp": "2023-02-18T15:34:19.582523",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 600132740,
        "user_id": 15082201,
        "timestamp": "2023-02-18T15:34:25.114957",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 599632503,
        "user_id": 28008309,
        "timestamp": "2023-02-18T15:34:30.686964",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 598813141,
        "user_id": 6548259,
        "timestamp": "2023-02-18T15:34:36.131424",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 598810831,
        "user_id": 397693,
        "timestamp": "2023-02-18T15:34:41.748064",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 597340734,
        "user_id": 25068055,
        "timestamp": "2023-02-18T15:34:47.987249",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 594652531,
        "user_id": 6800337,
        "timestamp": "2023-02-18T15:34:54.046703",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 593409936,
        "user_id": 539362,
        "timestamp": "2023-02-18T15:34:59.636624",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592495740,
        "user_id": 320423,
        "timestamp": "2023-02-18T15:35:05.096212",
        "branch": "local",
        "command_groups": []
    },
    {
        "repo_id": 592347204,
        "user_id": 56445556,
        "timestamp": "2023-02-18T15:35:10.661677",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592322224,
        "user_id": 45182266,
        "timestamp": "2023-02-18T15:35:16.320513",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592318062,
        "user_id": 10117923,
        "timestamp": "2023-02-18T15:35:21.902839",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 592094277,
        "user_id": 765873,
        "timestamp": "2023-02-18T15:35:27.591341",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 591689963,
        "user_id": 19639235,
        "timestamp": "2023-02-18T15:35:34.577488",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 589258168,
        "user_id": 5691885,
        "timestamp": "2023-02-18T15:35:41.145547",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 588936367,
        "user_id": 4489798,
        "timestamp": "2023-02-18T15:35:46.985791",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 588450380,
        "user_id": 72509152,
        "timestamp": "2023-02-18T15:35:52.776165",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 587002217,
        "user_id": 7474841,
        "timestamp": "2023-02-18T15:35:58.491476",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 586622873,
        "user_id": 29872150,
        "timestamp": "2023-02-18T15:36:04.127956",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 585977534,
        "user_id": 8966510,
        "timestamp": "2023-02-18T15:36:10.744980",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 585432524,
        "user_id": 74335726,
        "timestamp": "2023-02-18T15:36:16.450747",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 583142942,
        "user_id": 25789997,
        "timestamp": "2023-02-18T15:36:21.952436",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 583142873,
        "user_id": 91676062,
        "timestamp": "2023-02-18T15:36:27.531431",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 582085641,
        "user_id": 14122204,
        "timestamp": "2023-02-18T15:36:34.086897",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 582046487,
        "user_id": 16196664,
        "timestamp": "2023-02-18T15:36:40.581145",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "revert that": "edit.undo()"
                }
            }
        ]
    },
    {
        "repo_id": 581707170,
        "user_id": 26844679,
        "timestamp": "2023-02-18T15:36:46.325463",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 581201143,
        "user_id": 68368,
        "timestamp": "2023-02-18T15:36:51.788361",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 581108607,
        "user_id": 4075619,
        "timestamp": "2023-02-18T15:36:57.633296",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 579560001,
        "user_id": 727316,
        "timestamp": "2023-02-18T15:37:03.065012",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 576381228,
        "user_id": 40808308,
        "timestamp": "2023-02-18T15:37:08.567258",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 575629338,
        "user_id": 12850469,
        "timestamp": "2023-02-18T15:37:14.072351",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 575589101,
        "user_id": 7552754,
        "timestamp": "2023-02-18T15:37:19.731686",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 573925737,
        "user_id": 58166507,
        "timestamp": "2023-02-18T15:37:25.421674",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 573921536,
        "user_id": 31699010,
        "timestamp": "2023-02-18T15:37:30.855091",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 571719141,
        "user_id": 119351300,
        "timestamp": "2023-02-18T15:37:36.589213",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 570266626,
        "user_id": 29164476,
        "timestamp": "2023-02-18T15:37:42.112235",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 570219774,
        "user_id": 2718922,
        "timestamp": "2023-02-18T15:37:47.884425",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 569965421,
        "user_id": 57516032,
        "timestamp": "2023-02-18T15:37:53.498350",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 569416578,
        "user_id": 98099035,
        "timestamp": "2023-02-18T15:37:59.169592",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568823815,
        "user_id": 2981597,
        "timestamp": "2023-02-18T15:38:04.820150",
        "branch": "main",
        "command_groups": [
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 568706581,
        "user_id": 16426130,
        "timestamp": "2023-02-18T15:38:10.364121",
        "branch": "main",
        "command_groups": [
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 568589200,
        "user_id": 82854984,
        "timestamp": "2023-02-18T15:38:15.901172",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568511252,
        "user_id": 53965859,
        "timestamp": "2023-02-18T15:38:21.529803",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 568206766,
        "user_id": 3528358,
        "timestamp": "2023-02-18T15:38:26.964034",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 567731813,
        "user_id": 80285168,
        "timestamp": "2023-02-18T15:38:32.459034",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 566937628,
        "user_id": 55260287,
        "timestamp": "2023-02-18T15:38:38.098301",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 566128459,
        "user_id": 550498,
        "timestamp": "2023-02-18T15:38:43.720602",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 564555269,
        "user_id": 7076013,
        "timestamp": "2023-02-18T15:38:50.519792",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 563958851,
        "user_id": 20151962,
        "timestamp": "2023-02-18T15:38:56.015222",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "search it": "edit.find()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab <number>": "user.tab_jump(number)",
                    "tab final": "user.tab_final()"
                }
            }
        ]
    },
    {
        "repo_id": 563542758,
        "user_id": 10467917,
        "timestamp": "2023-02-18T15:39:01.550688",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 561466012,
        "user_id": 49523965,
        "timestamp": "2023-02-18T15:39:07.435447",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 561367793,
        "user_id": 39572440,
        "timestamp": "2023-02-18T15:39:13.213680",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 560451873,
        "user_id": 65181771,
        "timestamp": "2023-02-18T15:39:18.909479",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 560202404,
        "user_id": 22231483,
        "timestamp": "2023-02-18T15:39:24.677954",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 560169066,
        "user_id": 7253893,
        "timestamp": "2023-02-18T15:39:30.212522",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 559763681,
        "user_id": 1012677,
        "timestamp": "2023-02-18T15:39:36.611192",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 558793918,
        "user_id": 4503878,
        "timestamp": "2023-02-18T15:39:42.827961",
        "branch": "main",
        "command_groups": [
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 558594525,
        "user_id": 54390138,
        "timestamp": "2023-02-18T15:39:48.327874",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 558022029,
        "user_id": 33682347,
        "timestamp": "2023-02-18T15:39:53.927458",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 557452451,
        "user_id": 3249377,
        "timestamp": "2023-02-18T15:39:59.470368",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 557336214,
        "user_id": 38117965,
        "timestamp": "2023-02-18T15:40:04.996634",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 557229217,
        "user_id": 51489,
        "timestamp": "2023-02-18T15:40:10.692710",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/modes/wake_and_sleep_wav2letter.talon",
                "context": "wake and sleep wav2letter",
                "commands": {
                    "drowse": "speech.disable()",
                    "hello computer": "speech.enable()"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "nope": "edit.undo()",
                    "actually yes": "edit.redo()",
                    "disc": "edit.save()",
                    "disc all": "edit.save_all()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 554655437,
        "user_id": 229440,
        "timestamp": "2023-02-18T15:40:16.279612",
        "branch": "main",
        "command_groups": [
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 552537978,
        "user_id": 16718876,
        "timestamp": "2023-02-18T15:40:21.851790",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 544707972,
        "user_id": 12524534,
        "timestamp": "2023-02-18T15:40:27.574631",
        "branch": "main",
        "command_groups": [
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 542781592,
        "user_id": 1354217,
        "timestamp": "2023-02-18T15:40:33.158908",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 541779922,
        "user_id": 24294152,
        "timestamp": "2023-02-18T15:40:38.677017",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 541665278,
        "user_id": 7978904,
        "timestamp": "2023-02-18T15:40:44.181180",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 541009245,
        "user_id": 7240386,
        "timestamp": "2023-02-18T15:40:51.707604",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 540728826,
        "user_id": 90379565,
        "timestamp": "2023-02-18T15:40:57.235682",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 539656485,
        "user_id": 13223795,
        "timestamp": "2023-02-18T15:41:02.884418",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 539039481,
        "user_id": 18036223,
        "timestamp": "2023-02-18T15:41:08.615288",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 537928159,
        "user_id": 15314312,
        "timestamp": "2023-02-18T15:41:14.308856",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 537409656,
        "user_id": 16436823,
        "timestamp": "2023-02-18T15:41:19.811831",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 534842109,
        "user_id": 78572,
        "timestamp": "2023-02-18T15:41:25.301310",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 533290089,
        "user_id": 7077307,
        "timestamp": "2023-02-18T15:41:30.804360",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 533026851,
        "user_id": 555667,
        "timestamp": "2023-02-18T15:41:36.412266",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 532742563,
        "user_id": 12457438,
        "timestamp": "2023-02-18T15:41:42.278102",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 532610966,
        "user_id": 113401,
        "timestamp": "2023-02-18T15:41:47.739847",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 532168011,
        "user_id": 976996,
        "timestamp": "2023-02-18T15:41:53.181306",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 531375840,
        "user_id": 1504248,
        "timestamp": "2023-02-18T15:41:58.646104",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 529525771,
        "user_id": 12852862,
        "timestamp": "2023-02-18T15:42:04.336682",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 528566993,
        "user_id": 82664495,
        "timestamp": "2023-02-18T15:42:09.894238",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 526717198,
        "user_id": 37745719,
        "timestamp": "2023-02-18T15:42:15.655237",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 526337853,
        "user_id": 1464575,
        "timestamp": "2023-02-18T15:42:21.088698",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 525920611,
        "user_id": 5057485,
        "timestamp": "2023-02-18T15:42:26.840846",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 525094745,
        "user_id": 808964,
        "timestamp": "2023-02-18T15:42:32.256913",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 525087197,
        "user_id": 13979325,
        "timestamp": "2023-02-18T15:42:39.231196",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 524607755,
        "user_id": 5680466,
        "timestamp": "2023-02-18T15:42:44.971764",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 524324214,
        "user_id": 105229118,
        "timestamp": "2023-02-18T15:42:50.440263",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 523588943,
        "user_id": 1329067,
        "timestamp": "2023-02-18T15:42:55.862203",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 523358569,
        "user_id": 43091450,
        "timestamp": "2023-02-18T15:43:01.409587",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 523352895,
        "user_id": 104951320,
        "timestamp": "2023-02-18T15:43:07.506657",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 523047675,
        "user_id": 1829313,
        "timestamp": "2023-02-18T15:43:13.029789",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 522651928,
        "user_id": 68566724,
        "timestamp": "2023-02-18T15:43:18.746240",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 522615139,
        "user_id": 465102,
        "timestamp": "2023-02-18T15:43:24.393200",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 522573985,
        "user_id": 19432538,
        "timestamp": "2023-02-18T15:43:29.871250",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "(carve it | carve selection)": "edit.cut()",
                    "(pace | paste) it": "edit.paste()",
                    "undo it": "edit.undo()",
                    "redo it": "edit.redo()",
                    "(pace | paste) plain": "edit.paste_match_style()",
                    "(pace | paste) match style": "edit.paste_match_style()",
                    "(file | five) save": "edit.save()",
                    "(file | five) save all": "edit.save_all()",
                    "padding": "user.insert_between(\" \", \" \")",
                    "padding <user.symbol_key>+": "insert(\" \")\nuser.insert_many(symbol_key_list)\ninsert(\" \")",
                    "new (line | row)": "edit.line_insert_down()",
                    "(line | row) new": "edit.line_insert_down()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "pre": "edit.word_left()",
                    "(go | scroll) way down": "edit.file_end()",
                    "(go | scroll) way up": "edit.file_start()",
                    "(go | scroll) bottom": "edit.file_end()",
                    "(go | scroll) top": "edit.file_start()",
                    "indent": "edit.indent_more()",
                    "(indent less | dedent)": "edit.indent_less()",
                    "(clear word left | cleft)": "edit.extend_word_left()\nedit.delete()",
                    "(clear word right | cright)": "edit.extend_word_right()\nedit.delete()",
                    "carve line": "user.cut_line()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(left drag | drag)": "user.mouse_drag(0)\nuser.grid_close()",
                    "(right drag | righty drag)": "user.mouse_drag(1)\nuser.grid_close()",
                    "(end drag | drag end)": "user.mouse_drag_end()",
                    "downer": "user.mouse_scroll_down()",
                    "tiny down": "user.mouse_scroll_down(0.2)",
                    "(continuous | continue) down": "user.mouse_scroll_down_continuous()",
                    "upper": "user.mouse_scroll_up()",
                    "tiny up": "user.mouse_scroll_up(0.2)",
                    "(continuous | continue) up": "user.mouse_scroll_up_continuous()",
                    "(wheel | scroll) gaze": "user.mouse_gaze_scroll()",
                    "(wheel | scroll) stop": "user.mouse_scroll_stop()",
                    "(wheel | scroll) left": "user.mouse_scroll_left()",
                    "(wheel | scroll) tiny left": "user.mouse_scroll_left(0.5)",
                    "(wheel | scroll) right": "user.mouse_scroll_right()",
                    "(wheel | scroll) tiny right": "user.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(com space | spamma | comgap)": "\", \"",
                    "(inside parens | inside args)": "user.insert_between(\"(\", \")\")",
                    "inside (curly | curly brackets)": "user.insert_between(\"{\", \"}\")",
                    "angle it": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(square | square bracket) it": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(curly | curly bracket) it": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) it": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent it": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "(quote | string) it": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(double quote | dub quote) it": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "plugin/repeater/repeater.talon",
                "context": "repeater",
                "commands": {
                    "again": "core.repeat_command(1)",
                    "repeat it <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "tags/line_commands/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "go [to] <number>": "edit.jump_line(number)",
                    "go [to] <number> end": "edit.jump_line(number)\nedit.line_end()",
                    "tab it": "edit.indent_more()",
                    "retab it": "edit.indent_less()"
                }
            },
            {
                "file": "tags/find_and_replace/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "replace confirm it": "user.replace_confirm()"
                }
            },
            {
                "file": "tags/emoji/emoji.talon",
                "context": "emoji",
                "commands": {
                    "(emo | emoji) unicode {user.emoji}": "user.paste(emoji)"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "go [to] <user.system_path>": "insert('cd \"{system_path}\"\\n')"
                }
            },
            {
                "file": "tags/browser/browser.talon",
                "context": "browser",
                "commands": {
                    "go (forward | next | forth)": "browser.go_forward()",
                    "go (backward | last | back | previous)": "browser.go_back()",
                    "go [to] {user.website}": "browser.go(website)",
                    "private new": "browser.open_private_window()",
                    "tab (refresh | reload)": "browser.reload()",
                    "tab (refresh | reload) hard": "browser.reload_hard()",
                    "bookmark (show | open)": "browser.bookmarks()",
                    "bookmark bar (show | open)": "browser.bookmarks_bar()",
                    "downloads (show | open)": "browser.show_downloads()",
                    "extensions (show | open)": "browser.show_extensions()",
                    "history (show | open)": "browser.show_history()",
                    "cache (show | open)": "browser.show_clear_cache()",
                    "dev tools (show | open)": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "tags/file_manager/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "go [to] <user.system_path>": "user.file_manager_open_directory(system_path)",
                    "go (backward | last | back | previous)": "user.file_manager_go_back()",
                    "go (forward | next | forth)": "user.file_manager_go_forward()",
                    "go [to] parent": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 522536189,
        "user_id": 76225907,
        "timestamp": "2023-02-18T15:43:36.758650",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 522028060,
        "user_id": 107715408,
        "timestamp": "2023-02-18T15:43:42.484324",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            }
        ]
    },
    {
        "repo_id": 521877682,
        "user_id": 7670818,
        "timestamp": "2023-02-18T15:43:48.382489",
        "branch": "custom",
        "command_groups": []
    },
    {
        "repo_id": 521745146,
        "user_id": 1608329,
        "timestamp": "2023-02-18T15:43:53.977433",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 521460656,
        "user_id": 5898009,
        "timestamp": "2023-02-18T15:43:59.447331",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 519598330,
        "user_id": 13966854,
        "timestamp": "2023-02-18T15:44:05.147200",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 519381378,
        "user_id": 891202,
        "timestamp": "2023-02-18T15:44:10.872393",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            }
        ]
    },
    {
        "repo_id": 519250100,
        "user_id": 71119861,
        "timestamp": "2023-02-18T15:44:16.777145",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            }
        ]
    },
    {
        "repo_id": 518279086,
        "user_id": 1085899,
        "timestamp": "2023-02-18T15:44:22.867438",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 517801800,
        "user_id": 20161164,
        "timestamp": "2023-02-18T15:44:31.585026",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 517082652,
        "user_id": 9615373,
        "timestamp": "2023-02-18T15:44:37.317982",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 515856204,
        "user_id": 650595,
        "timestamp": "2023-02-18T15:44:42.938977",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 514959566,
        "user_id": 83366355,
        "timestamp": "2023-02-18T15:44:48.559144",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 514825085,
        "user_id": 6818007,
        "timestamp": "2023-02-18T15:44:54.084259",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 514050328,
        "user_id": 107892169,
        "timestamp": "2023-02-18T15:44:59.615459",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 512050625,
        "user_id": 7283262,
        "timestamp": "2023-02-18T15:45:05.346463",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 510115097,
        "user_id": 523280,
        "timestamp": "2023-02-18T15:45:10.903061",
        "branch": "main",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            }
        ]
    },
    {
        "repo_id": 509756197,
        "user_id": 53098881,
        "timestamp": "2023-02-18T15:45:16.468651",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 509502502,
        "user_id": 51177220,
        "timestamp": "2023-02-18T15:45:23.274921",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 509378965,
        "user_id": 47316116,
        "timestamp": "2023-02-18T15:45:29.330270",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 508899920,
        "user_id": 26931862,
        "timestamp": "2023-02-18T15:45:34.862941",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 508042553,
        "user_id": 26287101,
        "timestamp": "2023-02-18T15:45:40.410347",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 507953865,
        "user_id": 55604690,
        "timestamp": "2023-02-18T15:45:46.160674",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 507777662,
        "user_id": 12643375,
        "timestamp": "2023-02-18T15:45:51.716450",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 506914649,
        "user_id": 1056068,
        "timestamp": "2023-02-18T15:45:57.478780",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 506794391,
        "user_id": 4742527,
        "timestamp": "2023-02-18T15:46:03.318329",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 506649357,
        "user_id": 3983973,
        "timestamp": "2023-02-18T15:46:08.813521",
        "branch": "wenkokke",
        "command_groups": []
    },
    {
        "repo_id": 506304261,
        "user_id": 28806809,
        "timestamp": "2023-02-18T15:46:14.556449",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 506281326,
        "user_id": 61734979,
        "timestamp": "2023-02-18T15:46:20.373941",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 506039565,
        "user_id": 10162855,
        "timestamp": "2023-02-18T15:46:26.010103",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 505661144,
        "user_id": 60080324,
        "timestamp": "2023-02-18T15:46:31.832081",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "[change | replace] <user.draft_anchor> [with] <user.text>": "user.draft_select(\"{draft_anchor}\")\nresult = user.formatted_text(text, \"NOOP\")\ninsert(result)",
                    "[pre | cursor | cursor before] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "[post | cursor after] <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "[take | select] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "[take | select] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "[chuck |clear] <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "[chuck |clear] <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> [through | past] <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 505409459,
        "user_id": 18951876,
        "timestamp": "2023-02-18T15:46:37.579166",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 504879816,
        "user_id": 77672678,
        "timestamp": "2023-02-18T15:46:43.205228",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 504678987,
        "user_id": 4650666,
        "timestamp": "2023-02-18T15:46:48.983993",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 503516444,
        "user_id": 1807290,
        "timestamp": "2023-02-18T15:46:54.538492",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 501811177,
        "user_id": 38145610,
        "timestamp": "2023-02-18T15:47:00.164806",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 501020018,
        "user_id": 30298543,
        "timestamp": "2023-02-18T15:47:05.666086",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 500978801,
        "user_id": 72521132,
        "timestamp": "2023-02-18T15:47:11.280415",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 499958582,
        "user_id": 3890033,
        "timestamp": "2023-02-18T15:47:16.867020",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 499393702,
        "user_id": 2657861,
        "timestamp": "2023-02-18T15:47:22.666918",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 499011289,
        "user_id": 219796,
        "timestamp": "2023-02-18T15:47:28.234575",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 496359109,
        "user_id": 68846083,
        "timestamp": "2023-02-18T15:47:33.967865",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 496040339,
        "user_id": 72950547,
        "timestamp": "2023-02-18T15:47:39.437740",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "nope": "edit.undo()"
                }
            },
            {
                "file": "tags/file_manager/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "go parent": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 495996856,
        "user_id": 1685782,
        "timestamp": "2023-02-18T15:47:45.197334",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 493820384,
        "user_id": 5733273,
        "timestamp": "2023-02-18T15:47:50.770100",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 492839871,
        "user_id": 15148721,
        "timestamp": "2023-02-18T15:47:56.303415",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 492654295,
        "user_id": 35981215,
        "timestamp": "2023-02-18T15:48:01.945519",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 492285676,
        "user_id": 50581015,
        "timestamp": "2023-02-18T15:48:07.461673",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 491695898,
        "user_id": 35980963,
        "timestamp": "2023-02-18T15:48:12.965184",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 491565023,
        "user_id": 70188,
        "timestamp": "2023-02-18T15:48:18.790872",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 491065465,
        "user_id": 2750828,
        "timestamp": "2023-02-18T15:48:24.522577",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 490060551,
        "user_id": 26747205,
        "timestamp": "2023-02-18T15:48:30.136719",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 489691433,
        "user_id": 251735,
        "timestamp": "2023-02-18T15:48:35.684201",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 487768074,
        "user_id": 2545447,
        "timestamp": "2023-02-18T15:48:41.361940",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 487022333,
        "user_id": 52972088,
        "timestamp": "2023-02-18T15:48:47.018878",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 486969883,
        "user_id": 70598503,
        "timestamp": "2023-02-18T15:48:52.655950",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 486497118,
        "user_id": 73256703,
        "timestamp": "2023-02-18T15:48:58.180063",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 485531522,
        "user_id": 13891656,
        "timestamp": "2023-02-18T15:49:03.697477",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 485354182,
        "user_id": 6370704,
        "timestamp": "2023-02-18T15:49:09.244192",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 483468855,
        "user_id": 651237,
        "timestamp": "2023-02-18T15:49:14.786684",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 483010937,
        "user_id": 15976214,
        "timestamp": "2023-02-18T15:49:20.318135",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 482710597,
        "user_id": 11326293,
        "timestamp": "2023-02-18T15:49:26.101540",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 482650083,
        "user_id": 2743660,
        "timestamp": "2023-02-18T15:49:31.931049",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 482604559,
        "user_id": 2433202,
        "timestamp": "2023-02-18T15:49:37.519056",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 482548674,
        "user_id": 5789544,
        "timestamp": "2023-02-18T15:49:44.885192",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 481448611,
        "user_id": 9357792,
        "timestamp": "2023-02-18T15:49:50.587361",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 480003685,
        "user_id": 22850071,
        "timestamp": "2023-02-18T15:49:56.576494",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 479147542,
        "user_id": 36237645,
        "timestamp": "2023-02-18T15:50:02.136653",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 478705637,
        "user_id": 20424160,
        "timestamp": "2023-02-18T15:50:08.344646",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 478051978,
        "user_id": 30693990,
        "timestamp": "2023-02-18T15:50:14.199141",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477959371,
        "user_id": 30133577,
        "timestamp": "2023-02-18T15:50:20.044813",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477884937,
        "user_id": 27601096,
        "timestamp": "2023-02-18T15:50:25.579649",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477389446,
        "user_id": 102916005,
        "timestamp": "2023-02-18T15:50:31.513277",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "undo that | nope": "edit.undo()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "end drag | drag end |drag off": "user.mouse_drag_end()",
                    "wheel downing": "user.mouse_scroll_down_continuous()",
                    "wheel upping": "user.mouse_scroll_up_continuous()",
                    "[wheel] stop": "user.mouse_scroll_stop()"
                }
            },
            {
                "file": "plugin/datetimeinsert/datetimeinsert.talon",
                "context": "datetimeinsert",
                "commands": {
                    "f555date insert": "insert(user.time_format(\"%Y-%m-%d\"))"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (parens | args | round)": "user.insert_between(\"(\", \")\")",
                    "inside (squares | square brackets | box)": "user.insert_between(\"[\", \"]\")",
                    "inside (double quotes | dub quotes | quad )": "user.insert_between('\"', '\"')",
                    "(angle | diamond) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(square | square bracket | box) that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(bracket | brace | curly ) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args | round) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(quote | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(double quote | dub quote | quad ) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "(grave | back tick | ski) that": "text = edit.selected_text()\nuser.paste(\"`{text}`\")"
                }
            },
            {
                "file": "tags/find_and_replace/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "hunt here": "user.find(\"\")",
                    "hunt here <user.text>": "user.find(text)",
                    "hunt here (pace | paste)": "user.find(\"\")\nsleep(25ms)\nedit.paste()"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 477174740,
        "user_id": 42753901,
        "timestamp": "2023-02-18T15:50:37.147310",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477019158,
        "user_id": 9081484,
        "timestamp": "2023-02-18T15:50:42.881675",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 476841958,
        "user_id": 12724445,
        "timestamp": "2023-02-18T15:50:48.937808",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 474990819,
        "user_id": 12444206,
        "timestamp": "2023-02-18T15:50:54.527732",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 474940647,
        "user_id": 22856173,
        "timestamp": "2023-02-18T15:51:00.461303",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 474546646,
        "user_id": 1550505,
        "timestamp": "2023-02-18T15:51:05.964416",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 474388910,
        "user_id": 45516337,
        "timestamp": "2023-02-18T15:51:11.479896",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 472432551,
        "user_id": 5840057,
        "timestamp": "2023-02-18T15:51:16.989799",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 472104221,
        "user_id": 2882631,
        "timestamp": "2023-02-18T15:51:22.540664",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 471889008,
        "user_id": 31149794,
        "timestamp": "2023-02-18T15:51:28.260633",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 471520796,
        "user_id": 15989073,
        "timestamp": "2023-02-18T15:51:33.831881",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 471178304,
        "user_id": 5151593,
        "timestamp": "2023-02-18T15:51:39.338221",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 468980764,
        "user_id": 91553746,
        "timestamp": "2023-02-18T15:51:45.062075",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 467356180,
        "user_id": 298026,
        "timestamp": "2023-02-18T15:51:50.585977",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466954393,
        "user_id": 11667004,
        "timestamp": "2023-02-18T15:51:56.345236",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466295739,
        "user_id": 25558903,
        "timestamp": "2023-02-18T15:52:02.071990",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466283180,
        "user_id": 78682,
        "timestamp": "2023-02-18T15:52:07.611824",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466200467,
        "user_id": 8952123,
        "timestamp": "2023-02-18T15:52:13.061062",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 465328479,
        "user_id": 5657510,
        "timestamp": "2023-02-18T15:52:19.205217",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 464712307,
        "user_id": 14843677,
        "timestamp": "2023-02-18T15:52:24.892428",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 464229346,
        "user_id": 100534119,
        "timestamp": "2023-02-18T15:52:30.533235",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 464070135,
        "user_id": 24357577,
        "timestamp": "2023-02-18T15:52:36.148827",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 463540524,
        "user_id": 195468,
        "timestamp": "2023-02-18T15:52:41.701059",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 462815102,
        "user_id": 4099370,
        "timestamp": "2023-02-18T15:52:47.268605",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 461892074,
        "user_id": 3690443,
        "timestamp": "2023-02-18T15:52:52.859393",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 460682561,
        "user_id": 1181721,
        "timestamp": "2023-02-18T15:52:58.377103",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 460052479,
        "user_id": 20117014,
        "timestamp": "2023-02-18T15:53:03.804023",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "desk right": "user.desktop_next()",
                    "desk left": "user.desktop_last()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 459360446,
        "user_id": 36056663,
        "timestamp": "2023-02-18T15:53:09.447759",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/desktops.talon",
                "context": "desktops",
                "commands": {
                    "desk right": "user.desktop_next()",
                    "desk left": "user.desktop_last()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 458903871,
        "user_id": 24389100,
        "timestamp": "2023-02-18T15:53:14.916193",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 458152184,
        "user_id": 1429641,
        "timestamp": "2023-02-18T15:53:20.453919",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 457589121,
        "user_id": 1400380,
        "timestamp": "2023-02-18T15:53:25.878061",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "page up": "edit.page_up()",
                    "page down": "edit.page_down()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 457542669,
        "user_id": 49439044,
        "timestamp": "2023-02-18T15:53:31.485109",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 457521235,
        "user_id": 243140,
        "timestamp": "2023-02-18T15:53:36.950319",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 457010828,
        "user_id": 98036866,
        "timestamp": "2023-02-18T15:53:43.097208",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 456707613,
        "user_id": 28880958,
        "timestamp": "2023-02-18T15:53:48.629834",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 456258798,
        "user_id": 17749921,
        "timestamp": "2023-02-18T15:53:54.295438",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 456027437,
        "user_id": 6052475,
        "timestamp": "2023-02-18T15:53:59.870180",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 455381897,
        "user_id": 3068446,
        "timestamp": "2023-02-18T15:54:05.386448",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 455250600,
        "user_id": 98972908,
        "timestamp": "2023-02-18T15:54:10.970508",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454814239,
        "user_id": 93682204,
        "timestamp": "2023-02-18T15:54:16.545431",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454385959,
        "user_id": 17555463,
        "timestamp": "2023-02-18T15:54:22.043633",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454326092,
        "user_id": 16470874,
        "timestamp": "2023-02-18T15:54:27.497758",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454188859,
        "user_id": 7919039,
        "timestamp": "2023-02-18T15:54:33.108030",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 453692329,
        "user_id": 14280211,
        "timestamp": "2023-02-18T15:54:38.618244",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 453656894,
        "user_id": 11901400,
        "timestamp": "2023-02-18T15:54:44.135601",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 453215774,
        "user_id": 1472923,
        "timestamp": "2023-02-18T15:54:49.877004",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 452884028,
        "user_id": 93023868,
        "timestamp": "2023-02-18T15:54:55.346720",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 452483437,
        "user_id": 92004154,
        "timestamp": "2023-02-18T15:55:00.802152",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 452463744,
        "user_id": 94268524,
        "timestamp": "2023-02-18T15:55:06.344724",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 451726600,
        "user_id": 42344656,
        "timestamp": "2023-02-18T15:55:11.909013",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 450907189,
        "user_id": 12602371,
        "timestamp": "2023-02-18T15:55:17.444579",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 450253352,
        "user_id": 24943868,
        "timestamp": "2023-02-18T15:55:22.885575",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 450180737,
        "user_id": 1293125,
        "timestamp": "2023-02-18T15:55:28.400951",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 449806698,
        "user_id": 1839981,
        "timestamp": "2023-02-18T15:55:34.076290",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448991976,
        "user_id": 10353928,
        "timestamp": "2023-02-18T15:55:39.693106",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448852582,
        "user_id": 15121366,
        "timestamp": "2023-02-18T15:55:45.277714",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448667797,
        "user_id": 4704069,
        "timestamp": "2023-02-18T15:55:50.938961",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448469426,
        "user_id": 2145008,
        "timestamp": "2023-02-18T15:55:56.614199",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 447450940,
        "user_id": 82670783,
        "timestamp": "2023-02-18T15:56:03.411773",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 446945956,
        "user_id": 35548127,
        "timestamp": "2023-02-18T15:56:09.021134",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 446581588,
        "user_id": 20517406,
        "timestamp": "2023-02-18T15:56:14.693667",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 446067710,
        "user_id": 163128,
        "timestamp": "2023-02-18T15:56:20.314680",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 445939534,
        "user_id": 3219419,
        "timestamp": "2023-02-18T15:56:25.759848",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 445816388,
        "user_id": 63201480,
        "timestamp": "2023-02-18T15:56:31.286877",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 445691841,
        "user_id": 12655228,
        "timestamp": "2023-02-18T15:56:36.771256",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(nope | undo that)": "edit.undo()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "[go] tab (open | new)": "app.tab_open()",
                    "[go] tab (last | previous)": "app.tab_previous()",
                    "[go] tab final": "user.tab_final()"
                }
            }
        ]
    },
    {
        "repo_id": 444564467,
        "user_id": 53412558,
        "timestamp": "2023-02-18T15:56:42.263577",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 443978995,
        "user_id": 21286812,
        "timestamp": "2023-02-18T15:56:47.918495",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 443889257,
        "user_id": 18250094,
        "timestamp": "2023-02-18T15:56:53.559030",
        "branch": "custom",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "red light [<phrase>]": "speech.disable()",
                    "green light": "speech.enable()"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "spam": "\", \"",
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring | dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 443450461,
        "user_id": 95110067,
        "timestamp": "2023-02-18T15:56:59.168847",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 443171806,
        "user_id": 5711101,
        "timestamp": "2023-02-18T15:57:04.673803",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 442458309,
        "user_id": 25511262,
        "timestamp": "2023-02-18T15:57:10.155480",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 441919485,
        "user_id": 7907782,
        "timestamp": "2023-02-18T15:57:15.780201",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 441762817,
        "user_id": 26435834,
        "timestamp": "2023-02-18T15:57:21.263055",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 441560011,
        "user_id": 15986712,
        "timestamp": "2023-02-18T15:57:26.716685",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 441556743,
        "user_id": 4312305,
        "timestamp": "2023-02-18T15:57:32.231609",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 440296382,
        "user_id": 15270272,
        "timestamp": "2023-02-18T15:57:37.832656",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 440053279,
        "user_id": 74739,
        "timestamp": "2023-02-18T15:57:43.343387",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 437084814,
        "user_id": 60481661,
        "timestamp": "2023-02-18T15:57:49.551441",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 437048021,
        "user_id": 38531814,
        "timestamp": "2023-02-18T15:57:55.013682",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 436546230,
        "user_id": 17482349,
        "timestamp": "2023-02-18T15:58:00.436841",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 436089181,
        "user_id": 1801875,
        "timestamp": "2023-02-18T15:58:06.117662",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 435856117,
        "user_id": 6841417,
        "timestamp": "2023-02-18T15:58:11.825607",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 434275425,
        "user_id": 830218,
        "timestamp": "2023-02-18T15:58:17.368325",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 433969454,
        "user_id": 2236620,
        "timestamp": "2023-02-18T15:58:22.818530",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 433510707,
        "user_id": 36557576,
        "timestamp": "2023-02-18T15:58:28.257986",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 432989937,
        "user_id": 22130400,
        "timestamp": "2023-02-18T15:58:33.715653",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 431996009,
        "user_id": 13921790,
        "timestamp": "2023-02-18T15:58:39.195892",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 430919486,
        "user_id": 12286472,
        "timestamp": "2023-02-18T15:58:44.634089",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 430783951,
        "user_id": 1587084,
        "timestamp": "2023-02-18T15:58:50.055349",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 429972176,
        "user_id": 3287378,
        "timestamp": "2023-02-18T15:58:55.637999",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 429930875,
        "user_id": 848589,
        "timestamp": "2023-02-18T15:59:01.314560",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "empty dubstring": "user.insert_between('\"', '\"')",
                    "empty escaped (dubstring|dub quotes)": "user.insert_between('\\\\\"', '\\\\\"')",
                    "inside (double quotes | dubquotes)": "user.insert_between('\"', '\"')",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 429486665,
        "user_id": 1620051,
        "timestamp": "2023-02-18T15:59:09.069425",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 428364442,
        "user_id": 726818,
        "timestamp": "2023-02-18T15:59:14.512795",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 426988120,
        "user_id": 45826559,
        "timestamp": "2023-02-18T15:59:20.164921",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 425874932,
        "user_id": 32393906,
        "timestamp": "2023-02-18T15:59:25.565821",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 425184629,
        "user_id": 3219671,
        "timestamp": "2023-02-18T15:59:31.270274",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 424266409,
        "user_id": 216216,
        "timestamp": "2023-02-18T15:59:36.699664",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 422905258,
        "user_id": 41682903,
        "timestamp": "2023-02-18T15:59:42.172816",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422785308,
        "user_id": 4354311,
        "timestamp": "2023-02-18T15:59:47.585410",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422617945,
        "user_id": 5358449,
        "timestamp": "2023-02-18T15:59:53.201682",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422560443,
        "user_id": 6410431,
        "timestamp": "2023-02-18T15:59:58.629161",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 420491244,
        "user_id": 23173985,
        "timestamp": "2023-02-18T16:00:05.514446",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "cop": "edit.copy()",
                    "cut it": "edit.cut()",
                    "paish": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 420281023,
        "user_id": 717852,
        "timestamp": "2023-02-18T16:00:11.122998",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 419531730,
        "user_id": 71795669,
        "timestamp": "2023-02-18T16:00:16.592445",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 417851538,
        "user_id": 28291528,
        "timestamp": "2023-02-18T16:00:22.024336",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 416893916,
        "user_id": 12233471,
        "timestamp": "2023-02-18T16:00:27.458407",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 414386266,
        "user_id": 55820966,
        "timestamp": "2023-02-18T16:00:33.084274",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 414108639,
        "user_id": 63059805,
        "timestamp": "2023-02-18T16:00:38.484904",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 413320713,
        "user_id": 5217684,
        "timestamp": "2023-02-18T16:00:44.098507",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 412890404,
        "user_id": 29584603,
        "timestamp": "2023-02-18T16:00:49.595200",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 412103160,
        "user_id": 91682292,
        "timestamp": "2023-02-18T16:00:55.205109",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 411736468,
        "user_id": 289079,
        "timestamp": "2023-02-18T16:01:00.806981",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 410770630,
        "user_id": 88945074,
        "timestamp": "2023-02-18T16:01:06.464603",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            }
        ]
    },
    {
        "repo_id": 410395641,
        "user_id": 21588,
        "timestamp": "2023-02-18T16:01:12.245627",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 407236199,
        "user_id": 84646533,
        "timestamp": "2023-02-18T16:01:17.760284",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 406344318,
        "user_id": 56249075,
        "timestamp": "2023-02-18T16:01:23.352989",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 406294417,
        "user_id": 8206630,
        "timestamp": "2023-02-18T16:01:28.839280",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 405180930,
        "user_id": 192751,
        "timestamp": "2023-02-18T16:01:34.442672",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 404442342,
        "user_id": 1432129,
        "timestamp": "2023-02-18T16:01:40.059248",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 403757096,
        "user_id": 51184,
        "timestamp": "2023-02-18T16:01:45.537720",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 403741487,
        "user_id": 38996442,
        "timestamp": "2023-02-18T16:01:51.158881",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 403112768,
        "user_id": 1163925,
        "timestamp": "2023-02-18T16:01:56.829069",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 402391927,
        "user_id": 128854,
        "timestamp": "2023-02-18T16:02:02.777117",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 401897761,
        "user_id": 9433472,
        "timestamp": "2023-02-18T16:02:08.216624",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 401847267,
        "user_id": 17151865,
        "timestamp": "2023-02-18T16:02:13.765050",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "wakey wakey": "speech.enable()",
                    "drowsy [<phrase>]": "speech.disable()"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "(disk|file save)": "edit.save()",
                    "(disk oliver|file save all)": "edit.save_all()",
                    "pour": "edit.line_insert_down()"
                }
            }
        ]
    },
    {
        "repo_id": 401590650,
        "user_id": 1522310,
        "timestamp": "2023-02-18T16:02:21.232259",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/modes/wake_and_sleep.talon",
                "context": "wake and sleep",
                "commands": {
                    "wakey wakey": "speech.enable()",
                    "drowsy [<phrase>]": "speech.disable()"
                }
            }
        ]
    },
    {
        "repo_id": 401471705,
        "user_id": 138279,
        "timestamp": "2023-02-18T16:02:26.654711",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 401085077,
        "user_id": 20683271,
        "timestamp": "2023-02-18T16:02:32.168462",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 398661149,
        "user_id": 46428485,
        "timestamp": "2023-02-18T16:02:37.578437",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 397448120,
        "user_id": 43415278,
        "timestamp": "2023-02-18T16:02:43.005805",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 396540453,
        "user_id": 13631007,
        "timestamp": "2023-02-18T16:02:48.579489",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 395633945,
        "user_id": 10852023,
        "timestamp": "2023-02-18T16:02:53.977601",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 395343151,
        "user_id": 3109283,
        "timestamp": "2023-02-18T16:02:59.472570",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 393783000,
        "user_id": 4572377,
        "timestamp": "2023-02-18T16:03:05.065246",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 393204210,
        "user_id": 39004650,
        "timestamp": "2023-02-18T16:03:10.710580",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 392454405,
        "user_id": 22085373,
        "timestamp": "2023-02-18T16:03:16.104255",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 392153553,
        "user_id": 905280,
        "timestamp": "2023-02-18T16:03:21.519437",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 391319376,
        "user_id": 51181822,
        "timestamp": "2023-02-18T16:03:26.915749",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 391174212,
        "user_id": 7913776,
        "timestamp": "2023-02-18T16:03:32.412753",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 391098151,
        "user_id": 56436734,
        "timestamp": "2023-02-18T16:03:38.058825",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 390706318,
        "user_id": 75254598,
        "timestamp": "2023-02-18T16:03:45.817000",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 389290964,
        "user_id": 82244060,
        "timestamp": "2023-02-18T16:03:51.207967",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 389064353,
        "user_id": 1420169,
        "timestamp": "2023-02-18T16:03:56.635802",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 388827141,
        "user_id": 793774,
        "timestamp": "2023-02-18T16:04:02.026210",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 387545516,
        "user_id": 63086420,
        "timestamp": "2023-02-18T16:04:07.698677",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 386706548,
        "user_id": 13141110,
        "timestamp": "2023-02-18T16:04:13.126824",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 386678509,
        "user_id": 220967,
        "timestamp": "2023-02-18T16:04:18.564424",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385933502,
        "user_id": 19817302,
        "timestamp": "2023-02-18T16:04:24.156983",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385851610,
        "user_id": 583851,
        "timestamp": "2023-02-18T16:04:29.644660",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385110154,
        "user_id": 225847,
        "timestamp": "2023-02-18T16:04:35.039888",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 385067243,
        "user_id": 15631555,
        "timestamp": "2023-02-18T16:04:40.450145",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 384928910,
        "user_id": 5533167,
        "timestamp": "2023-02-18T16:04:46.040498",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 384549508,
        "user_id": 2035323,
        "timestamp": "2023-02-18T16:04:51.668329",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 384154127,
        "user_id": 376105,
        "timestamp": "2023-02-18T16:04:57.242607",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 382437159,
        "user_id": 76692911,
        "timestamp": "2023-02-18T16:05:02.656121",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 382378868,
        "user_id": 770269,
        "timestamp": "2023-02-18T16:05:08.114653",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 382032821,
        "user_id": 85769,
        "timestamp": "2023-02-18T16:05:13.651223",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 381154547,
        "user_id": 17451821,
        "timestamp": "2023-02-18T16:05:19.145425",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 380682923,
        "user_id": 3511326,
        "timestamp": "2023-02-18T16:05:24.608319",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 378086563,
        "user_id": 10260883,
        "timestamp": "2023-02-18T16:05:30.101035",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 377972846,
        "user_id": 1231294,
        "timestamp": "2023-02-18T16:05:35.518002",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 375912462,
        "user_id": 24251362,
        "timestamp": "2023-02-18T16:05:41.002222",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 375783747,
        "user_id": 414788,
        "timestamp": "2023-02-18T16:05:46.472847",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 375363540,
        "user_id": 14166902,
        "timestamp": "2023-02-18T16:05:52.088543",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 374854063,
        "user_id": 31605846,
        "timestamp": "2023-02-18T16:05:57.523525",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 374017931,
        "user_id": 221511,
        "timestamp": "2023-02-18T16:06:02.936170",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 373513920,
        "user_id": 3151827,
        "timestamp": "2023-02-18T16:06:08.338237",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 373079326,
        "user_id": 14088282,
        "timestamp": "2023-02-18T16:06:13.902875",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 372312569,
        "user_id": 9077250,
        "timestamp": "2023-02-18T16:06:19.374901",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 372307617,
        "user_id": 10604952,
        "timestamp": "2023-02-18T16:06:24.792513",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 372223016,
        "user_id": 4321827,
        "timestamp": "2023-02-18T16:06:30.291892",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 370349195,
        "user_id": 6242530,
        "timestamp": "2023-02-18T16:06:35.765081",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 370171319,
        "user_id": 15764229,
        "timestamp": "2023-02-18T16:06:41.196542",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 365022071,
        "user_id": 57390056,
        "timestamp": "2023-02-18T16:06:46.568499",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 364685941,
        "user_id": 20028,
        "timestamp": "2023-02-18T16:06:52.113092",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 364626829,
        "user_id": 3256759,
        "timestamp": "2023-02-18T16:06:57.540205",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 363648910,
        "user_id": 69818598,
        "timestamp": "2023-02-18T16:07:03.018028",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 362912901,
        "user_id": 1590447,
        "timestamp": "2023-02-18T16:07:08.475135",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 362210081,
        "user_id": 7584665,
        "timestamp": "2023-02-18T16:07:14.023652",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 360954098,
        "user_id": 57394581,
        "timestamp": "2023-02-18T16:07:19.546883",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 360842356,
        "user_id": 21974901,
        "timestamp": "2023-02-18T16:07:24.978059",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 360119531,
        "user_id": 3371840,
        "timestamp": "2023-02-18T16:07:30.357548",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 359588017,
        "user_id": 13191586,
        "timestamp": "2023-02-18T16:07:35.736353",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 359443211,
        "user_id": 17959719,
        "timestamp": "2023-02-18T16:07:41.257672",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 358793474,
        "user_id": 17622855,
        "timestamp": "2023-02-18T16:07:46.692746",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 357513522,
        "user_id": 25530469,
        "timestamp": "2023-02-18T16:07:52.061595",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 357372146,
        "user_id": 229924,
        "timestamp": "2023-02-18T16:07:57.441462",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 357041957,
        "user_id": 35416770,
        "timestamp": "2023-02-18T16:08:02.820833",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 356743718,
        "user_id": 9221501,
        "timestamp": "2023-02-18T16:08:08.412673",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 356633847,
        "user_id": 812847,
        "timestamp": "2023-02-18T16:08:13.787311",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 355551983,
        "user_id": 1383198,
        "timestamp": "2023-02-18T16:08:19.202781",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 355368945,
        "user_id": 68569318,
        "timestamp": "2023-02-18T16:08:24.787796",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 355000747,
        "user_id": 25496850,
        "timestamp": "2023-02-18T16:08:30.215108",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 354618162,
        "user_id": 536668,
        "timestamp": "2023-02-18T16:08:35.871697",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 354326300,
        "user_id": 54818975,
        "timestamp": "2023-02-18T16:08:41.513502",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 354170041,
        "user_id": 10595845,
        "timestamp": "2023-02-18T16:08:46.870495",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 353746144,
        "user_id": 30735158,
        "timestamp": "2023-02-18T16:08:52.379082",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 353659759,
        "user_id": 22653028,
        "timestamp": "2023-02-18T16:08:57.904279",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 351824490,
        "user_id": 21959941,
        "timestamp": "2023-02-18T16:09:03.261206",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 350688578,
        "user_id": 4063086,
        "timestamp": "2023-02-18T16:09:08.874396",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 350470759,
        "user_id": 6205841,
        "timestamp": "2023-02-18T16:09:14.344126",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 350166824,
        "user_id": 193480,
        "timestamp": "2023-02-18T16:09:19.892136",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 349466138,
        "user_id": 39571771,
        "timestamp": "2023-02-18T16:09:25.452432",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 349279325,
        "user_id": 23261427,
        "timestamp": "2023-02-18T16:09:30.795660",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 349113249,
        "user_id": 17651683,
        "timestamp": "2023-02-18T16:09:36.361820",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 348791512,
        "user_id": 19470970,
        "timestamp": "2023-02-18T16:09:41.745804",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 348747303,
        "user_id": 38437248,
        "timestamp": "2023-02-18T16:09:47.246919",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 348665193,
        "user_id": 29524288,
        "timestamp": "2023-02-18T16:09:52.640437",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 348395788,
        "user_id": 1656493,
        "timestamp": "2023-02-18T16:09:58.028512",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 347679345,
        "user_id": 1138625,
        "timestamp": "2023-02-18T16:10:03.546613",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 346491657,
        "user_id": 8116016,
        "timestamp": "2023-02-18T16:10:08.958199",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 345319211,
        "user_id": 16936908,
        "timestamp": "2023-02-18T16:10:14.447842",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 345186817,
        "user_id": 2436460,
        "timestamp": "2023-02-18T16:10:19.950182",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 344615212,
        "user_id": 15257711,
        "timestamp": "2023-02-18T16:10:25.459428",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 344305692,
        "user_id": 9664877,
        "timestamp": "2023-02-18T16:10:30.914582",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 344007171,
        "user_id": 36384768,
        "timestamp": "2023-02-18T16:10:36.311003",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 343957616,
        "user_id": 32660718,
        "timestamp": "2023-02-18T16:10:41.693920",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 342462230,
        "user_id": 8659099,
        "timestamp": "2023-02-18T16:10:47.170459",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 342293729,
        "user_id": 9314305,
        "timestamp": "2023-02-18T16:10:52.600695",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 342074745,
        "user_id": 74514113,
        "timestamp": "2023-02-18T16:10:58.145303",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 340793922,
        "user_id": 2476974,
        "timestamp": "2023-02-18T16:11:03.499928",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 340365042,
        "user_id": 69343575,
        "timestamp": "2023-02-18T16:11:08.993249",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 339033346,
        "user_id": 68754523,
        "timestamp": "2023-02-18T16:11:14.654485",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 337740683,
        "user_id": 67563877,
        "timestamp": "2023-02-18T16:11:20.122859",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 336413925,
        "user_id": 15655308,
        "timestamp": "2023-02-18T16:11:26.132734",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 336399014,
        "user_id": 32513411,
        "timestamp": "2023-02-18T16:11:31.611914",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335841256,
        "user_id": 31530784,
        "timestamp": "2023-02-18T16:11:37.142910",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335691551,
        "user_id": 6345617,
        "timestamp": "2023-02-18T16:11:42.535099",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335054560,
        "user_id": 7477,
        "timestamp": "2023-02-18T16:11:47.937538",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 334433926,
        "user_id": 145117,
        "timestamp": "2023-02-18T16:11:53.407603",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 333963706,
        "user_id": 18274535,
        "timestamp": "2023-02-18T16:11:58.845749",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 332936928,
        "user_id": 13384477,
        "timestamp": "2023-02-18T16:12:04.297479",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 332926200,
        "user_id": 2823112,
        "timestamp": "2023-02-18T16:12:09.767760",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 332877582,
        "user_id": 4495757,
        "timestamp": "2023-02-18T16:12:15.167602",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 332242417,
        "user_id": 52854254,
        "timestamp": "2023-02-18T16:12:20.565140",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 331793155,
        "user_id": 13315888,
        "timestamp": "2023-02-18T16:12:25.913872",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 331743022,
        "user_id": 70705663,
        "timestamp": "2023-02-18T16:12:31.260758",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 331083750,
        "user_id": 7062009,
        "timestamp": "2023-02-18T16:12:36.677243",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 330247476,
        "user_id": 109418,
        "timestamp": "2023-02-18T16:12:42.465932",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 330139190,
        "user_id": 73491988,
        "timestamp": "2023-02-18T16:12:47.900803",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 330124626,
        "user_id": 931544,
        "timestamp": "2023-02-18T16:12:55.433474",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 329687465,
        "user_id": 8341598,
        "timestamp": "2023-02-18T16:13:00.960489",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 329307061,
        "user_id": 2152027,
        "timestamp": "2023-02-18T16:13:06.334064",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 329047695,
        "user_id": 6142662,
        "timestamp": "2023-02-18T16:13:11.719262",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 328776045,
        "user_id": 1030961,
        "timestamp": "2023-02-18T16:13:17.232478",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327846674,
        "user_id": 509141,
        "timestamp": "2023-02-18T16:13:22.681901",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327767812,
        "user_id": 1348763,
        "timestamp": "2023-02-18T16:13:28.209875",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327762479,
        "user_id": 117642,
        "timestamp": "2023-02-18T16:13:33.640470",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327473194,
        "user_id": 607281,
        "timestamp": "2023-02-18T16:13:39.004416",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327406289,
        "user_id": 31413647,
        "timestamp": "2023-02-18T16:13:44.468822",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 326922917,
        "user_id": 407302,
        "timestamp": "2023-02-18T16:13:49.863115",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 326731774,
        "user_id": 4630670,
        "timestamp": "2023-02-18T16:13:55.228232",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 326476423,
        "user_id": 64963307,
        "timestamp": "2023-02-18T16:14:00.536034",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 326280784,
        "user_id": 17242147,
        "timestamp": "2023-02-18T16:14:05.885133",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 326179577,
        "user_id": 36928885,
        "timestamp": "2023-02-18T16:14:11.352041",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325830117,
        "user_id": 25573864,
        "timestamp": "2023-02-18T16:14:16.751055",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325631725,
        "user_id": 1474758,
        "timestamp": "2023-02-18T16:14:22.140087",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325623187,
        "user_id": 1390086,
        "timestamp": "2023-02-18T16:14:27.764887",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325615708,
        "user_id": 9439781,
        "timestamp": "2023-02-18T16:14:33.129260",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325434799,
        "user_id": 1622392,
        "timestamp": "2023-02-18T16:14:38.480747",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325363921,
        "user_id": 755842,
        "timestamp": "2023-02-18T16:14:44.276709",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/abbreviate/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "<user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} scout <user.text>": "user.search_with_search_engine(search_engine, user.text)"
                }
            },
            {
                "file": "core/edit/standard.talon",
                "context": "standard",
                "commands": {
                    "collapse": "edit.zoom_in()",
                    "expand": "edit.zoom_out()",
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()",
                    "disk oliver": "edit.save_all()",
                    "padding": "user.insert_between(\" \", \" \")",
                    "pour": "edit.line_insert_down()"
                }
            },
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "tug": "edit.left()",
                    "drain": "edit.word_left()",
                    "push": "edit.right()",
                    "step": "edit.word_right()",
                    "head": "edit.line_start()",
                    "tail": "edit.line_end()",
                    "<user.select> lefter": "edit.extend_word_left()",
                    "<user.select> writer": "edit.extend_word_right()",
                    "take head": "edit.extend_line_start()",
                    "take tail": "edit.extend_line_end()",
                    "<user.delete> up": "edit.extend_line_up()\nedit.delete()",
                    "<user.delete> down": "edit.extend_line_down()\nedit.delete()",
                    "<user.delete> word": "edit.delete_word()",
                    "<user.delete> head": "edit.extend_line_start()\nedit.delete()",
                    "<user.delete> tail": "edit.extend_line_end()\nedit.delete()",
                    "<user.delete> way up": "edit.extend_file_start()\nedit.delete()",
                    "<user.delete> way down": "edit.extend_file_end()\nedit.delete()",
                    "<user.delete> all": "edit.select_all()\nedit.delete()"
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab make": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "core/text/text.talon",
                "context": "text",
                "commands": {
                    "<user.format_text>": "user.insert_many(format_text_list)",
                    "<user.format_text> halt": "user.insert_many(format_text_list)",
                    "strict <user.format_text>": "user.insert_many(format_text_list)"
                }
            },
            {
                "file": "plugin/cancel/cancel.talon",
                "context": "cancel",
                "commands": {
                    "cancel": "skip()"
                }
            },
            {
                "file": "plugin/desktops/desktops.talon",
                "context": "desktops",
                "commands": {
                    "pop desk <number_small>": "user.desktop(number_small)",
                    "pop desk next": "user.desktop_next()",
                    "pop desk last": "user.desktop_last()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "dub click": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(scroll | school) down": "user.mouse_scroll_down()",
                    "(scroll | school) down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "(scroll | school) tiny [down]": "user.mouse_scroll_down(0.2)",
                    "(scroll | school) tiny [down] here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down(0.2)",
                    "(scroll | school) downer": "user.mouse_scroll_down_continuous()",
                    "(scroll | school) downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "(scroll | school) up": "user.mouse_scroll_up()",
                    "(scroll | school) up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up()",
                    "(scroll | school) tiny up": "user.mouse_scroll_up(0.2)",
                    "(scroll | school) tiny up here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up(0.2)",
                    "(scroll | school) upper": "user.mouse_scroll_up_continuous()",
                    "(scroll | school) upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "(scroll | school) gaze": "user.mouse_gaze_scroll()",
                    "(scroll | school) gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "(scroll | school) stop": "user.mouse_scroll_stop()",
                    "(scroll | school) stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()",
                    "(scroll | school) left": "user.mouse_scroll_left()",
                    "(scroll | school) left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left()",
                    "(scroll | school) tiny left": "user.mouse_scroll_left(0.5)",
                    "(scroll | school) tiny left here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_left(0.5)",
                    "(scroll | school) right": "user.mouse_scroll_right()",
                    "(scroll | school) right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right()",
                    "(scroll | school) tiny right": "user.mouse_scroll_right(0.5)",
                    "(scroll | school) tiny right here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_right(0.5)"
                }
            },
            {
                "file": "plugin/symbols/symbols.talon",
                "context": "symbols",
                "commands": {
                    "pebbles": "\"...\"",
                    "spam": "\", \"",
                    "quad": "user.insert_between('\"', '\"')",
                    "twin": "user.insert_between(\"'\", \"'\")",
                    "ski": "user.insert_between(\"`\", \"`\")",
                    "escaped quad": "user.insert_between('\\\\\"', '\\\\\"')",
                    "escaped twin": "user.insert_between(\"\\\\'\", \"\\\\'\")",
                    "round": "user.insert_between(\"(\", \")\")",
                    "square": "user.insert_between(\"[\", \"]\")",
                    "curly": "user.insert_between(\"{\", \"}\")",
                    "(diamond | angle) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(curly | lace) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(round | leper) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(double | quad) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "(single | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "plugin/repeater/repeater.talon",
                "context": "repeater",
                "commands": {
                    "twice": "core.repeat_command(1)"
                }
            },
            {
                "file": "tags/find_and_replace/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "<user.find> case": "user.find_toggle_match_by_case()",
                    "<user.find> word": "user.find_toggle_match_by_word()",
                    "<user.find> expression": "user.find_toggle_match_by_regex()",
                    "<user.find> next": "user.find_next()",
                    "<user.find> previous": "user.find_previous()"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 324985035,
        "user_id": 18719098,
        "timestamp": "2023-02-18T16:14:49.679887",
        "branch": "master",
        "command_groups": [
            {
                "file": "core/abbreviate/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "<user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab make": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "core/keys/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "tags/find_and_replace/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "<user.find> case": "user.find_toggle_match_by_case()",
                    "<user.find> word": "user.find_toggle_match_by_word()",
                    "<user.find> expression": "user.find_toggle_match_by_regex()",
                    "<user.find> next": "user.find_next()",
                    "<user.find> previous": "user.find_previous()"
                }
            },
            {
                "file": "tags/terminal/terminal.talon",
                "context": "terminal",
                "commands": {
                    "katie [<user.text>]": "user.terminal_change_directory(text or \"\")"
                }
            }
        ]
    },
    {
        "repo_id": 324636743,
        "user_id": 1121562,
        "timestamp": "2023-02-18T16:14:55.977136",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 324501008,
        "user_id": 22695960,
        "timestamp": "2023-02-18T16:15:01.473448",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 323120515,
        "user_id": 6768125,
        "timestamp": "2023-02-18T16:15:06.928452",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 322675255,
        "user_id": 85699,
        "timestamp": "2023-02-18T16:15:12.308662",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 322622132,
        "user_id": 655662,
        "timestamp": "2023-02-18T16:15:17.701308",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 321896045,
        "user_id": 11382032,
        "timestamp": "2023-02-18T16:15:23.034165",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 321422815,
        "user_id": 1341513,
        "timestamp": "2023-02-18T16:15:28.446581",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 321420075,
        "user_id": 1522755,
        "timestamp": "2023-02-18T16:15:33.798011",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 321317204,
        "user_id": 26982377,
        "timestamp": "2023-02-18T16:15:40.596658",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(bracket) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            }
        ]
    },
    {
        "repo_id": 320949729,
        "user_id": 75915115,
        "timestamp": "2023-02-18T16:15:46.047461",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 320418113,
        "user_id": 4473327,
        "timestamp": "2023-02-18T16:15:51.406527",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 319504484,
        "user_id": 6190142,
        "timestamp": "2023-02-18T16:15:56.812304",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 319409784,
        "user_id": 5891146,
        "timestamp": "2023-02-18T16:16:02.192251",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 319306558,
        "user_id": 20419551,
        "timestamp": "2023-02-18T16:16:07.724864",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 318240280,
        "user_id": 1012322,
        "timestamp": "2023-02-18T16:16:13.215907",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 317919444,
        "user_id": 74801510,
        "timestamp": "2023-02-18T16:16:18.720827",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 317186209,
        "user_id": 48803018,
        "timestamp": "2023-02-18T16:16:24.178906",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 315437621,
        "user_id": 540820,
        "timestamp": "2023-02-18T16:16:29.692202",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 314792396,
        "user_id": 35661160,
        "timestamp": "2023-02-18T16:16:35.053910",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 314618668,
        "user_id": 1500330,
        "timestamp": "2023-02-18T16:16:40.468823",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 313348019,
        "user_id": 30940553,
        "timestamp": "2023-02-18T16:16:45.977886",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 313148859,
        "user_id": 13286932,
        "timestamp": "2023-02-18T16:16:51.359133",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 312427481,
        "user_id": 6810733,
        "timestamp": "2023-02-18T16:16:56.782130",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 312376602,
        "user_id": 68613162,
        "timestamp": "2023-02-18T16:17:02.293200",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 312078495,
        "user_id": 6209894,
        "timestamp": "2023-02-18T16:17:07.729476",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311843534,
        "user_id": 2889740,
        "timestamp": "2023-02-18T16:17:13.220401",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 311713270,
        "user_id": 5415776,
        "timestamp": "2023-02-18T16:17:18.627453",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311626284,
        "user_id": 17849478,
        "timestamp": "2023-02-18T16:17:24.464230",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311509912,
        "user_id": 34281919,
        "timestamp": "2023-02-18T16:17:29.944923",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 310973410,
        "user_id": 9855832,
        "timestamp": "2023-02-18T16:17:35.344719",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 310146072,
        "user_id": 12578541,
        "timestamp": "2023-02-18T16:17:40.744406",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 309754915,
        "user_id": 11227560,
        "timestamp": "2023-02-18T16:17:46.128184",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 309503136,
        "user_id": 11822551,
        "timestamp": "2023-02-18T16:17:51.492601",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 308764186,
        "user_id": 2544,
        "timestamp": "2023-02-18T16:17:56.837359",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 308749794,
        "user_id": 391217,
        "timestamp": "2023-02-18T16:18:02.212627",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 308575021,
        "user_id": 245131,
        "timestamp": "2023-02-18T16:18:09.637952",
        "branch": "master",
        "command_groups": [
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 308389307,
        "user_id": 16633957,
        "timestamp": "2023-02-18T16:18:15.663623",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 308354451,
        "user_id": 7370305,
        "timestamp": "2023-02-18T16:18:21.295602",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 308083280,
        "user_id": 6002123,
        "timestamp": "2023-02-18T16:18:26.759065",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 308037068,
        "user_id": 784395,
        "timestamp": "2023-02-18T16:18:32.243603",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307748026,
        "user_id": 46014,
        "timestamp": "2023-02-18T16:18:37.605701",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307733438,
        "user_id": 18484366,
        "timestamp": "2023-02-18T16:18:43.068777",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307679339,
        "user_id": 6322017,
        "timestamp": "2023-02-18T16:18:48.398436",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 307591368,
        "user_id": 22757756,
        "timestamp": "2023-02-18T16:18:53.767867",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 307220480,
        "user_id": 1487851,
        "timestamp": "2023-02-18T16:18:59.317964",
        "branch": "personal",
        "command_groups": [
            {
                "file": "core/numbers/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "core/windows_and_tabs/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (close | delete)": "user.tab_close_wrapper()"
                }
            }
        ]
    },
    {
        "repo_id": 307148350,
        "user_id": 24275520,
        "timestamp": "2023-02-18T16:19:04.822248",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307030698,
        "user_id": 9410259,
        "timestamp": "2023-02-18T16:19:10.185773",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 306999501,
        "user_id": 659425,
        "timestamp": "2023-02-18T16:19:15.503973",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 306875261,
        "user_id": 70815886,
        "timestamp": "2023-02-18T16:19:23.755158",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 306503417,
        "user_id": 3289356,
        "timestamp": "2023-02-18T16:19:29.164449",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 306438270,
        "user_id": 1071954,
        "timestamp": "2023-02-18T16:19:34.639318",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 306233873,
        "user_id": 102322,
        "timestamp": "2023-02-18T16:19:40.116348",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 306149514,
        "user_id": 422351,
        "timestamp": "2023-02-18T16:19:45.493559",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 306119531,
        "user_id": 9026786,
        "timestamp": "2023-02-18T16:19:50.889620",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 306032778,
        "user_id": 8534723,
        "timestamp": "2023-02-18T16:19:56.269582",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 305172709,
        "user_id": 63643181,
        "timestamp": "2023-02-18T16:20:01.682076",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 304761759,
        "user_id": 19195374,
        "timestamp": "2023-02-18T16:20:07.078495",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 304177733,
        "user_id": 17128644,
        "timestamp": "2023-02-18T16:20:12.659833",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 303216638,
        "user_id": 97816,
        "timestamp": "2023-02-18T16:20:18.098320",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 303114508,
        "user_id": 10352319,
        "timestamp": "2023-02-18T16:20:23.992882",
        "branch": "jp",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> right click": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "fat arrow": "\"=>\""
                }
            }
        ]
    },
    {
        "repo_id": 302971998,
        "user_id": 18706229,
        "timestamp": "2023-02-18T16:20:29.500897",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 302752929,
        "user_id": 6108994,
        "timestamp": "2023-02-18T16:20:34.878396",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 301890435,
        "user_id": 54477607,
        "timestamp": "2023-02-18T16:20:40.247501",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 301744386,
        "user_id": 9698054,
        "timestamp": "2023-02-18T16:20:45.619318",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 301436880,
        "user_id": 8015081,
        "timestamp": "2023-02-18T16:20:51.001000",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 301019806,
        "user_id": 21976313,
        "timestamp": "2023-02-18T16:20:56.336143",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "gone": "g",
                    "johnny": "j",
                    "mad": "m",
                    "wet": "w",
                    "zeta": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "scatter": "escape",
                    "junk": "backspace",
                    "skunks": "enter"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";",
                    "under score": "_",
                    "cola": ":",
                    "R brace": "}",
                    "dubquote": "\"",
                    "crunder": "\""
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat twice": "core.repeat_command(1)",
                    "repeat <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(dub arrow|implies)": "\"=>\"",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            }
        ]
    },
    {
        "repo_id": 299424853,
        "user_id": 45152129,
        "timestamp": "2023-02-18T16:21:01.724871",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 298661264,
        "user_id": 72190,
        "timestamp": "2023-02-18T16:21:07.120771",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 298547874,
        "user_id": 40725916,
        "timestamp": "2023-02-18T16:21:12.602347",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 298526245,
        "user_id": 6624600,
        "timestamp": "2023-02-18T16:21:17.991336",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 298450871,
        "user_id": 18283966,
        "timestamp": "2023-02-18T16:21:23.429780",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 298385753,
        "user_id": 733785,
        "timestamp": "2023-02-18T16:21:28.848391",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 297013216,
        "user_id": 3668899,
        "timestamp": "2023-02-18T16:21:34.187977",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 296901070,
        "user_id": 71561126,
        "timestamp": "2023-02-18T16:21:39.542292",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 296835864,
        "user_id": 167771,
        "timestamp": "2023-02-18T16:21:45.091812",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 295226049,
        "user_id": 102321,
        "timestamp": "2023-02-18T16:21:50.487345",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 293404684,
        "user_id": 54991041,
        "timestamp": "2023-02-18T16:21:56.037500",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 291340252,
        "user_id": 9662927,
        "timestamp": "2023-02-18T16:22:01.474693",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 291175756,
        "user_id": 69595,
        "timestamp": "2023-02-18T16:22:07.033373",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 290739994,
        "user_id": 1415856,
        "timestamp": "2023-02-18T16:22:12.386377",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 289439496,
        "user_id": 1733493,
        "timestamp": "2023-02-18T16:22:17.825362",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 289389044,
        "user_id": 86104,
        "timestamp": "2023-02-18T16:22:23.271169",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 289305379,
        "user_id": 56042962,
        "timestamp": "2023-02-18T16:22:28.632296",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 288951773,
        "user_id": 1822656,
        "timestamp": "2023-02-18T16:22:34.082486",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 286056922,
        "user_id": 63370027,
        "timestamp": "2023-02-18T16:22:39.419661",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 285632515,
        "user_id": 16143,
        "timestamp": "2023-02-18T16:22:45.011134",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 284771656,
        "user_id": 60350599,
        "timestamp": "2023-02-18T16:22:50.381833",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 284344389,
        "user_id": 6225521,
        "timestamp": "2023-02-18T16:22:55.775746",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 284233518,
        "user_id": 37806340,
        "timestamp": "2023-02-18T16:23:01.283566",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 284073479,
        "user_id": 62727053,
        "timestamp": "2023-02-18T16:23:06.647215",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 282429782,
        "user_id": 26546453,
        "timestamp": "2023-02-18T16:23:12.005270",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 282317502,
        "user_id": 68303,
        "timestamp": "2023-02-18T16:23:17.759408",
        "branch": "nriley",
        "command_groups": []
    },
    {
        "repo_id": 281967447,
        "user_id": 6692932,
        "timestamp": "2023-02-18T16:23:23.162581",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 281743457,
        "user_id": 29542,
        "timestamp": "2023-02-18T16:23:28.562730",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 281230322,
        "user_id": 28070802,
        "timestamp": "2023-02-18T16:23:33.919418",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 280505492,
        "user_id": 47227280,
        "timestamp": "2023-02-18T16:23:39.256750",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 280243668,
        "user_id": 9683693,
        "timestamp": "2023-02-18T16:23:44.706514",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 279141559,
        "user_id": 8095,
        "timestamp": "2023-02-18T16:23:50.110499",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 279110353,
        "user_id": 775602,
        "timestamp": "2023-02-18T16:23:55.445086",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 274991887,
        "user_id": 21044858,
        "timestamp": "2023-02-18T16:24:00.892374",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 274039239,
        "user_id": 7183947,
        "timestamp": "2023-02-18T16:24:06.232453",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 273909275,
        "user_id": 15688148,
        "timestamp": "2023-02-18T16:24:11.537356",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 273639237,
        "user_id": 2071583,
        "timestamp": "2023-02-18T16:24:16.936339",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 273622533,
        "user_id": 1237457,
        "timestamp": "2023-02-18T16:24:22.297378",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 273488014,
        "user_id": 221395,
        "timestamp": "2023-02-18T16:24:27.603284",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 273104878,
        "user_id": 5633015,
        "timestamp": "2023-02-18T16:24:33.002818",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 272800071,
        "user_id": 465955,
        "timestamp": "2023-02-18T16:24:38.320929",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 272680038,
        "user_id": 4499807,
        "timestamp": "2023-02-18T16:24:43.630086",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 272562044,
        "user_id": 14012083,
        "timestamp": "2023-02-18T16:24:49.108015",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 272287700,
        "user_id": 3903883,
        "timestamp": "2023-02-18T16:24:54.417504",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 271209156,
        "user_id": 44053,
        "timestamp": "2023-02-18T16:24:59.752926",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 271034444,
        "user_id": 2762244,
        "timestamp": "2023-02-18T16:25:05.066210",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 269575712,
        "user_id": 3338723,
        "timestamp": "2023-02-18T16:25:10.434267",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 269255402,
        "user_id": 15963642,
        "timestamp": "2023-02-18T16:25:15.758018",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 269063117,
        "user_id": 30029456,
        "timestamp": "2023-02-18T16:25:21.042348",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 268822230,
        "user_id": 195691,
        "timestamp": "2023-02-18T16:25:26.729022",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 268588819,
        "user_id": 20529132,
        "timestamp": "2023-02-18T16:25:32.137608",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 268437353,
        "user_id": 24466561,
        "timestamp": "2023-02-18T16:25:37.442229",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 268333373,
        "user_id": 28877984,
        "timestamp": "2023-02-18T16:25:43.146705",
        "branch": "main",
        "command_groups": [
            {
                "file": "core/edit/edit.talon",
                "context": "edit",
                "commands": {
                    "find that": "edit.find()",
                    "find next": "edit.find_next()",
                    "line delete": "edit.delete_line()",
                    "move in": "edit.indent_more()",
                    "move out": "edit.indent_less()",
                    "sauce": "edit.up()",
                    "dunce": "edit.down()",
                    "lease": "edit.left()",
                    "ross": "edit.right()",
                    "pinch": "edit.page_up()",
                    "punch": "edit.page_down()",
                    "struck out": "edit.file_end()",
                    "strike out": "edit.file_start()",
                    "role": "edit.word_right()",
                    "lord": "edit.word_left()",
                    "strike": "edit.line_start()",
                    "struck": "edit.line_end()",
                    "take all": "edit.select_all()",
                    "take ross": "edit.extend_right()",
                    "take lease": "edit.extend_left()",
                    "take start": "edit.extend_file_start()",
                    "take end": "edit.extend_file_end()",
                    "take line": "edit.select_line()",
                    "take strike": "edit.extend_line_start()",
                    "take struck": "edit.extend_line_end()",
                    "take word": "edit.select_word()",
                    "take lord": "edit.extend_word_left()",
                    "take role": "edit.extend_word_right()"
                }
            },
            {
                "file": "plugin/desktops/desktops.talon",
                "context": "desktops",
                "commands": {
                    "(work | space) <number_small>": "user.desktop(number_small)",
                    "(work | space) (next | right)": "user.desktop_next()",
                    "(work | space) (last | left)": "user.desktop_last()",
                    "(work | space) show": "user.desktop_show()",
                    "send (last | left)": "user.window_move_desktop_left()",
                    "send (next | right)": "user.window_move_desktop_right()"
                }
            },
            {
                "file": "plugin/mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "kick": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "psychic": "mouse_click(1)\nuser.grid_close()",
                    "midkick": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> kick": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "<user.modifiers> psychic": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "tags/line_commands/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "go line <number>": "edit.jump_line(number)",
                    "go line <number> end": "edit.jump_line(number)\nedit.line_end()"
                }
            }
        ]
    },
    {
        "repo_id": 268076627,
        "user_id": 5120858,
        "timestamp": "2023-02-18T16:25:48.587510",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 267140863,
        "user_id": 7101437,
        "timestamp": "2023-02-18T16:25:53.937013",
        "branch": "master",
        "command_groups": [
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 266382222,
        "user_id": 1672198,
        "timestamp": "2023-02-18T16:25:59.367635",
        "branch": "livioso",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(double quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 265252318,
        "user_id": 824653,
        "timestamp": "2023-02-18T16:26:04.719702",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 265147686,
        "user_id": 5149913,
        "timestamp": "2023-02-18T16:26:10.101088",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 265075675,
        "user_id": 65195073,
        "timestamp": "2023-02-18T16:26:15.512235",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 265000961,
        "user_id": 23029324,
        "timestamp": "2023-02-18T16:26:20.816878",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 264501308,
        "user_id": 11707739,
        "timestamp": "2023-02-18T16:26:26.200860",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 264230788,
        "user_id": 7613966,
        "timestamp": "2023-02-18T16:26:31.526527",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 263009933,
        "user_id": 13691822,
        "timestamp": "2023-02-18T16:26:36.907742",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 261881557,
        "user_id": 3040,
        "timestamp": "2023-02-18T16:26:42.222559",
        "branch": "master",
        "command_groups": [
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 261841439,
        "user_id": 279612,
        "timestamp": "2023-02-18T16:26:47.519355",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 261146606,
        "user_id": 3083638,
        "timestamp": "2023-02-18T16:26:53.170165",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()",
                    "run <user.launch_applications>": "user.switcher_launch(launch_applications)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "central": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 260735564,
        "user_id": 500119,
        "timestamp": "2023-02-18T16:26:58.503072",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "paste that": "edit.paste()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 260316468,
        "user_id": 1389549,
        "timestamp": "2023-02-18T16:27:03.831599",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 259433533,
        "user_id": 5678977,
        "timestamp": "2023-02-18T16:27:09.196555",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 259113388,
        "user_id": 6349369,
        "timestamp": "2023-02-18T16:27:14.630004",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 257315987,
        "user_id": 9889378,
        "timestamp": "2023-02-18T16:27:19.949218",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 256858087,
        "user_id": 314009,
        "timestamp": "2023-02-18T16:27:25.264107",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 256775335,
        "user_id": 4771794,
        "timestamp": "2023-02-18T16:27:30.579936",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 255445240,
        "user_id": 287396,
        "timestamp": "2023-02-18T16:27:35.888114",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 253763855,
        "user_id": 13679876,
        "timestamp": "2023-02-18T16:27:41.734693",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 253432877,
        "user_id": 3946314,
        "timestamp": "2023-02-18T16:27:47.157106",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            }
        ]
    },
    {
        "repo_id": 253386344,
        "user_id": 3613189,
        "timestamp": "2023-02-18T16:27:52.596078",
        "branch": "trapiers",
        "command_groups": []
    },
    {
        "repo_id": 253360438,
        "user_id": 5565479,
        "timestamp": "2023-02-18T16:27:58.136892",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 253084709,
        "user_id": 187354,
        "timestamp": "2023-02-18T16:28:03.452405",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 251687093,
        "user_id": 582133,
        "timestamp": "2023-02-18T16:28:08.738323",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 251439585,
        "user_id": 567000,
        "timestamp": "2023-02-18T16:28:14.124365",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 250833527,
        "user_id": 9398481,
        "timestamp": "2023-02-18T16:28:19.426577",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 250621197,
        "user_id": 91972,
        "timestamp": "2023-02-18T16:28:24.832095",
        "branch": "personal",
        "command_groups": []
    },
    {
        "repo_id": 250298215,
        "user_id": 29916215,
        "timestamp": "2023-02-18T16:28:30.198674",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "downer": "user.mouse_scroll_down_continuous()",
                    "supper": "user.mouse_scroll_up_continuous()",
                    "gaze wheel": "user.mouse_gaze_scroll()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 249500418,
        "user_id": 19349,
        "timestamp": "2023-02-18T16:28:35.596307",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "(select|cell) folder {user.file_manager_directories}": "user.file_manager_select_directory(file_manager_directories)",
                    "(select|cell) file {user.file_manager_files}": "user.file_manager_select_file(file_manager_files)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste that": "edit.paste()",
                    "save that": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "window (new|open)": "app.window_open()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume|media) mute": "key(mute)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "abbreviate {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "(repeat that|twice)": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [lowercase]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (reopen|restore)": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "midclick": "mouse_click(2)\nuser.grid_close()",
                    "(dubclick | duke)": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(tripclick | triplick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> (line|lines)": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> (line|lines)": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> (word|words)": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> (word|words)": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> (word|words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (word|words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> (character|characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> (character|characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "talon_draft_window/draft_window.talon",
                "context": "draft window",
                "commands": {
                    "cursor <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor before <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\")",
                    "cursor after <user.draft_anchor>": "user.draft_position_caret(\"{draft_anchor}\", 1)",
                    "select <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\")",
                    "select <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(\"{draft_anchor_1}\", \"{draft_anchor_2}\")",
                    "clear <user.draft_anchor>": "user.draft_select(\"{draft_anchor}\", \"\", 1)\nkey(backspace)",
                    "clear <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nkey(backspace)",
                    "<user.formatters> <user.draft_anchor> through <user.draft_anchor>": "user.draft_select(draft_anchor_1, draft_anchor_2, 1)\nuser.formatters_reformat_selection(user.formatters)"
                }
            }
        ]
    },
    {
        "repo_id": 248855369,
        "user_id": 2822010,
        "timestamp": "2023-02-18T16:28:40.963259",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 248471893,
        "user_id": 2271290,
        "timestamp": "2023-02-18T16:28:46.298290",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 247501390,
        "user_id": 459631,
        "timestamp": "2023-02-18T16:28:51.796437",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 246150333,
        "user_id": 3289426,
        "timestamp": "2023-02-18T16:28:57.438213",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 245662201,
        "user_id": 25167,
        "timestamp": "2023-02-18T16:29:02.909110",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 245575817,
        "user_id": 40249668,
        "timestamp": "2023-02-18T16:29:08.239435",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 241652958,
        "user_id": 13386344,
        "timestamp": "2023-02-18T16:29:13.523828",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            }
        ]
    }
]
{
    "repo_id": "240185541",
    "user_id": "15005956",
    "timestamp": "2023-02-18T10:29:11.207335",
    "branch": "master",
    "command_groups": [
        {
            "file": "code/keys.py",
            "context": "user.letter",
            "commands": {
                "air": "a",
                "bat": "b",
                "cap": "c",
                "drum": "d",
                "each": "e",
                "fine": "f",
                "gust": "g",
                "harp": "h",
                "sit": "i",
                "jury": "j",
                "crunch": "k",
                "look": "l",
                "made": "m",
                "near": "n",
                "odd": "o",
                "pit": "p",
                "quench": "q",
                "red": "r",
                "sun": "s",
                "trap": "t",
                "urge": "u",
                "vest": "v",
                "whale": "w",
                "plex": "x",
                "yank": "y",
                "zip": "z"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.number_key",
            "commands": {
                "zero": "0",
                "one": "1",
                "two": "2",
                "three": "3",
                "four": "4",
                "five": "5",
                "six": "6",
                "seven": "7",
                "eight": "8",
                "nine": "9"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.modifier_key",
            "commands": {
                "alt": "alt",
                "control": "ctrl",
                "shift": "shift",
                "super": "super",
                "command": "cmd",
                "option": "alt"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.special_key",
            "commands": {
                "end": "end",
                "enter": "enter",
                "escape": "escape",
                "home": "home",
                "insert": "insert",
                "pagedown": "pagedown",
                "pageup": "pageup",
                "space": "space",
                "tab": "tab",
                "wipe": "backspace",
                "delete": "backspace",
                "forward delete": "delete",
                "page up": "pageup",
                "page down": "pagedown"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.symbol_key",
            "commands": {
                "dot": ".",
                "point": ".",
                "quote": "'",
                "question": "?",
                "apostrophe": "'",
                "L square": "[",
                "left square": "[",
                "square": "[",
                "R square": "]",
                "right square": "]",
                "slash": "/",
                "backslash": "\\",
                "minus": "-",
                "dash": "-",
                "equals": "=",
                "plus": "+",
                "tilde": "~",
                "bang": "!",
                "down score": "_",
                "underscore": "_",
                "paren": "(",
                "brace": "{",
                "left brace": "{",
                "brack": "{",
                "bracket": "{",
                "left bracket": "{",
                "r brace": "}",
                "right brace": "}",
                "r brack": "}",
                "r bracket": "}",
                "right bracket": "}",
                "angle": "<",
                "left angle": "<",
                "less than": "<",
                "rangle": ">",
                "R angle": ">",
                "right angle": ">",
                "greater than": ">",
                "star": "*",
                "hash": "#",
                "percent": "%",
                "caret": "^",
                "amper": "&",
                "pipe": "|",
                "dub quote": "\"",
                "double quote": "\"",
                "dollar": "$",
                "pound": "\u00a3",
                "`": "`",
                ",": ",",
                "back tick": "`",
                "grave": "`",
                "comma": ",",
                "coma": ",",
                "period": ".",
                "full stop": ".",
                "semicolon": ";",
                "colon": ":",
                "forward slash": "/",
                "question mark": "?",
                "exclamation mark": "!",
                "exclamation point": "!",
                "asterisk": "*",
                "hash sign": "#",
                "number sign": "#",
                "percent sign": "%",
                "at sign": "@",
                "and sign": "&",
                "ampersand": "&",
                "dollar sign": "$",
                "pound sign": "\u00a3",
                "hyphen": "-",
                "L paren": "(",
                "left paren": "(",
                "R paren": ")",
                "right paren": ")"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.arrow_key",
            "commands": {
                "down": "down",
                "left": "left",
                "right": "right",
                "up": "up"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.punctuation",
            "commands": {
                "`": "`",
                ",": ",",
                "back tick": "`",
                "grave": "`",
                "comma": ",",
                "coma": ",",
                "period": ".",
                "full stop": ".",
                "semicolon": ";",
                "colon": ":",
                "forward slash": "/",
                "question mark": "?",
                "exclamation mark": "!",
                "exclamation point": "!",
                "asterisk": "*",
                "hash sign": "#",
                "number sign": "#",
                "percent sign": "%",
                "at sign": "@",
                "and sign": "&",
                "ampersand": "&",
                "dollar sign": "$",
                "pound sign": "\u00a3",
                "hyphen": "-",
                "L paren": "(",
                "left paren": "(",
                "R paren": ")",
                "right paren": ")"
            }
        },
        {
            "file": "code/keys.py",
            "context": "user.function_key",
            "commands": {
                "F one": "f1",
                "F two": "f2",
                "F three": "f3",
                "F four": "f4",
                "F five": "f5",
                "F six": "f6",
                "F seven": "f7",
                "F eight": "f8",
                "F nine": "f9",
                "F ten": "f10",
                "F eleven": "f11",
                "F twelve": "f12"
            }
        },
        {
            "file": "code/formatters.py",
            "context": "user.formatters",
            "commands": {
                "all cap": "EXAMPLE OF FORMATTING WITH ALL CAP",
                "all down": "example of formatting with all down",
                "camel": "exampleOfFormattingWithCamel",
                "dotted": "example.of.formatting.with.dotted",
                "dub string": "\"example of formatting with dub string\"",
                "dunder": "__example__offormattingwithdunder",
                "hammer": "ExampleOfFormattingWithHammer",
                "kebab": "example-of-formatting-with-kebab",
                "packed": "example::of::formatting::with::packed",
                "padded": " example of formatting with padded ",
                "slasher": "/example/of/formatting/with/slasher",
                "smash": "exampleofformattingwithsmash",
                "snake": "example_of_formatting_with_snake",
                "string": "'example of formatting with string'",
                "title": "Example of Formatting With Title"
            }
        },
        {
            "file": "core/numbers/numbers.talon",
            "context": "numbers",
            "commands": {
                "<user.number_string>": "\"{number_string}\""
            }
        },
        {
            "file": "core/abbreviate/abbreviate.talon",
            "context": "abbreviate",
            "commands": {
                "(abbreviate | abreviate | brief) {user.abbreviation}": "\"{abbreviation}\""
            }
        },
        {
            "file": "core/modes/language_modes.talon",
            "context": "language modes",
            "commands": {
                "force {user.language_mode}": "user.code_set_language_mode(language_mode)",
                "clear language modes": "user.code_clear_language_mode()",
                "[enable] debug mode": "mode.enable(\"user.gdb\")",
                "disable debug mode": "mode.disable(\"user.gdb\")"
            }
        },
        {
            "file": "core/modes/dictation_mode.talon",
            "context": "dictation mode",
            "commands": {
                "press <user.modifiers>": "key(modifiers)",
                "press <user.keys>": "key(keys)",
                "<user.raw_prose>": "user.dictation_insert(raw_prose)",
                "cap": "user.dictation_format_cap()",
                "(no cap | no-caps)": "user.dictation_format_no_cap()",
                "(no space | no-space)": "user.dictation_format_no_space()",
                "cap that": "user.dictation_reformat_cap()",
                "(no cap | no-caps) that": "user.dictation_reformat_no_cap()",
                "(no space | no-space) that": "user.dictation_reformat_no_space()",
                "go up <number_small> (line | lines)": "edit.up()\nrepeat(number_small - 1)",
                "go down <number_small> (line | lines)": "edit.down()\nrepeat(number_small - 1)",
                "go left <number_small> (word | words)": "edit.word_left()\nrepeat(number_small - 1)",
                "go right <number_small> (word | words)": "edit.word_right()\nrepeat(number_small - 1)",
                "go line start": "edit.line_start()",
                "go line end": "edit.line_end()",
                "select left <number_small> (word | words)": "edit.extend_word_left()\nrepeat(number_small - 1)",
                "select right <number_small> (word | words)": "edit.extend_word_right()\nrepeat(number_small - 1)",
                "select left <number_small> (character | characters)": "edit.extend_left()\nrepeat(number_small - 1)",
                "select right <number_small> (character | characters)": "edit.extend_right()\nrepeat(number_small - 1)",
                "clear left <number_small> (word | words)": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                "clear right <number_small> (word | words)": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                "clear left <number_small> (character | characters)": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                "clear right <number_small> (character | characters)": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()",
                "formatted <user.format_text>": "user.dictation_insert_raw(format_text)",
                "format selection <user.formatters>": "user.formatters_reformat_selection(formatters)",
                "scratch that": "user.clear_last_phrase()",
                "scratch selection": "edit.delete()",
                "select that": "user.select_last_phrase()",
                "spell that <user.letters>": "user.dictation_insert(letters)",
                "spell that <user.formatters> <user.letters>": "result = user.formatted_text(letters, formatters)\nuser.dictation_insert_raw(result)",
                "escape <user.text>": "user.dictation_insert(user.text)"
            }
        },
        {
            "file": "core/modes/wake_and_sleep_wav2letter.talon",
            "context": "wake and sleep wav2letter",
            "commands": {
                "go to sleep [<phrase>]": "speech.disable()",
                "wake up": "speech.enable()"
            }
        },
        {
            "file": "core/modes/dragon_mode.talon",
            "context": "dragon mode",
            "commands": {
                "dragon mode": "user.dragon_mode()",
                "talon mode": "user.talon_mode()"
            }
        },
        {
            "file": "core/modes/modes.talon",
            "context": "modes",
            "commands": {
                "dictation mode": "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")",
                "command mode": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")"
            }
        },
        {
            "file": "core/modes/wake_and_sleep.talon",
            "context": "wake and sleep",
            "commands": {
                "welcome back": "user.mouse_wake()\nuser.history_enable()\nuser.talon_mode()",
                "sleep all [<phrase>]": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                "talon sleep [<phrase>]": "speech.disable()",
                "talon wake": "speech.enable()"
            }
        },
        {
            "file": "core/modes/sleep_mode_wav2letter.talon",
            "context": "sleep mode wav2letter",
            "commands": {
                "<phrase>": "skip()"
            }
        },
        {
            "file": "core/websites_and_search_engines/websites_and_search_engines.talon",
            "context": "websites and search engines",
            "commands": {
                "open {user.website}": "user.open_url(website)",
                "{user.search_engine} hunt <user.text>": "user.search_with_search_engine(search_engine, user.text)",
                "{user.search_engine} (that | this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
            }
        },
        {
            "file": "core/screens/screens.talon",
            "context": "screens",
            "commands": {
                "screen numbers": "user.screens_show_numbering()"
            }
        },
        {
            "file": "core/edit/standard.talon",
            "context": "standard",
            "commands": {
                "zoom in": "edit.zoom_in()",
                "zoom out": "edit.zoom_out()",
                "zoom reset": "edit.zoom_reset()",
                "scroll up": "edit.page_up()",
                "scroll down": "edit.page_down()",
                "copy that": "edit.copy()",
                "cut that": "edit.cut()",
                "(pace | paste) that": "edit.paste()",
                "(pace | paste) enter": "edit.paste()\nkey(enter)",
                "undo that": "edit.undo()",
                "redo that": "edit.redo()",
                "paste match": "edit.paste_match_style()",
                "file save": "edit.save()",
                "file save all": "edit.save_all()",
                "(pad | padding)": "user.insert_between(\" \", \" \")",
                "(pad | padding) <user.symbol_key>+": "insert(\" \")\nuser.insert_many(symbol_key_list)\ninsert(\" \")",
                "slap": "edit.line_insert_down()"
            }
        },
        {
            "file": "core/edit/edit.talon",
            "context": "edit",
            "commands": {
                "find it": "edit.find()",
                "next one": "edit.find_next()",
                "go word left": "edit.word_left()",
                "go word right": "edit.word_right()",
                "go left": "edit.left()",
                "go right": "edit.right()",
                "go up": "edit.up()",
                "go down": "edit.down()",
                "go line start": "edit.line_start()",
                "go line end": "edit.line_end()",
                "go way left": "edit.line_start()\nedit.line_start()",
                "go way right": "edit.line_end()",
                "go way down": "edit.file_end()",
                "go way up": "edit.file_start()",
                "go bottom": "edit.file_end()",
                "go top": "edit.file_start()",
                "go page down": "edit.page_down()",
                "go page up": "edit.page_up()",
                "select line": "edit.select_line()",
                "select all": "edit.select_all()",
                "select left": "edit.extend_left()",
                "select right": "edit.extend_right()",
                "select up": "edit.extend_line_up()",
                "select down": "edit.extend_line_down()",
                "select word": "edit.select_word()",
                "select word left": "edit.extend_word_left()",
                "select word right": "edit.extend_word_right()",
                "select way left": "edit.extend_line_start()",
                "select way right": "edit.extend_line_end()",
                "select way up": "edit.extend_file_start()",
                "select way down": "edit.extend_file_end()",
                "indent [more]": "edit.indent_more()",
                "(indent less | out dent)": "edit.indent_less()",
                "clear line": "edit.delete_line()",
                "clear left": "key(backspace)",
                "clear right": "key(delete)",
                "clear up": "edit.extend_line_up()\nedit.delete()",
                "clear down": "edit.extend_line_down()\nedit.delete()",
                "clear word": "edit.delete_word()",
                "clear word left": "edit.extend_word_left()\nedit.delete()",
                "clear word right": "edit.extend_word_right()\nedit.delete()",
                "clear way left": "edit.extend_line_start()\nedit.delete()",
                "clear way right": "edit.extend_line_end()\nedit.delete()",
                "clear way up": "edit.extend_file_start()\nedit.delete()",
                "clear way down": "edit.extend_file_end()\nedit.delete()",
                "clear all": "edit.select_all()\nedit.delete()",
                "copy all": "edit.select_all()\nedit.copy()",
                "copy word": "edit.select_word()\nedit.copy()",
                "copy word left": "user.copy_word_left()",
                "copy word right": "user.copy_word_right()",
                "copy line": "edit.select_line()\nedit.copy()",
                "cut all": "edit.select_all()\nedit.cut()",
                "cut word": "edit.select_word()\nedit.cut()",
                "cut word left": "user.cut_word_left()",
                "cut word right": "user.cut_word_right()",
                "cut line": "user.cut_line()",
                "(pace | paste) all": "edit.select_all()\nedit.paste()",
                "clone that": "edit.selection_clone()",
                "clone line": "edit.line_clone()"
            }
        },
        {
            "file": "core/edit_settings.talon",
            "context": "edit settings",
            "commands": {
                "customize {user.talon_settings_csv}": "user.edit_text_file(talon_settings_csv)\nsleep(500ms)\nedit.file_end()"
            }
        },
        {
            "file": "core/homophones/homophones.talon",
            "context": "homophones",
            "commands": {
                "phones <user.homophones_canonical>": "user.homophones_show(homophones_canonical)",
                "phones that": "user.homophones_show_auto()",
                "phones force <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                "phones force": "user.homophones_force_show_selection()",
                "phones hide": "user.homophones_hide()",
                "phones word": "edit.select_word()\nuser.homophones_show_selection()",
                "phones [<user.ordinals>] word left": "n = ordinals or 1\nuser.words_left(n - 1)\nedit.extend_word_left()\nuser.homophones_show_selection()",
                "phones [<user.ordinals>] word right": "n = ordinals or 1\nuser.words_right(n - 1)\nedit.extend_word_right()\nuser.homophones_show_selection()"
            }
        },
        {
            "file": "core/homophones/homophones_open.talon",
            "context": "homophones open",
            "commands": {
                "choose <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                "choose <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
            }
        },
        {
            "file": "core/windows_and_tabs/window_management.talon",
            "context": "window management",
            "commands": {
                "window (new | open)": "app.window_open()",
                "window next": "app.window_next()",
                "window last": "app.window_previous()",
                "window close": "app.window_close()",
                "focus <user.running_applications>": "user.switcher_focus(running_applications)",
                "focus": "user.switcher_menu()",
                "running list": "user.switcher_toggle_running()",
                "running close": "user.switcher_hide_running()",
                "launch <user.launch_applications>": "user.switcher_launch(launch_applications)",
                "snap <user.window_snap_position>": "user.snap_window(window_snap_position)",
                "snap next [screen]": "user.move_window_next_screen()",
                "snap last [screen]": "user.move_window_previous_screen()",
                "snap screen <number>": "user.move_window_to_screen(number)",
                "snap <user.running_applications> <user.window_snap_position>": "user.snap_app(running_applications, window_snap_position)",
                "snap <user.running_applications> [screen] <number>": "user.move_app_to_screen(running_applications, number)"
            }
        },
        {
            "file": "core/windows_and_tabs/tabs.talon",
            "context": "tabs",
            "commands": {
                "tab (open | new)": "app.tab_open()",
                "tab (last | previous)": "app.tab_previous()",
                "tab next": "app.tab_next()",
                "tab close": "user.tab_close_wrapper()",
                "tab (reopen | restore)": "app.tab_reopen()",
                "go tab <number>": "user.tab_jump(number)",
                "go tab final": "user.tab_final()",
                "tab duplicate": "user.tab_duplicate()"
            }
        },
        {
            "file": "core/keys/keys.talon",
            "context": "keys",
            "commands": {
                "go <user.arrow_keys>": "user.move_cursor(arrow_keys)",
                "<user.letter>": "key(letter)",
                "(ship | uppercase) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")",
                "<user.symbol_key>": "key(symbol_key)",
                "<user.function_key>": "key(function_key)",
                "<user.special_key>": "key(special_key)",
                "<user.modifiers> <user.unmodified_key>": "key(\"{modifiers}-{unmodified_key}\")",
                "press <user.modifiers>": "key(modifiers)",
                "press <user.keys>": "key(keys)"
            }
        },
        {
            "file": "core/text/text.talon",
            "context": "text",
            "commands": {
                "phrase <user.text>": "user.add_phrase_to_history(text)\ninsert(text)",
                "phrase <user.text> over": "user.add_phrase_to_history(text)\ninsert(text)",
                "{user.prose_formatter} <user.prose>": "user.insert_formatted(prose, prose_formatter)",
                "{user.prose_formatter} <user.prose> over": "user.insert_formatted(prose, prose_formatter)",
                "<user.format_text>+": "user.insert_many(format_text_list)",
                "<user.format_text>+ over": "user.insert_many(format_text_list)",
                "<user.formatters> that": "user.formatters_reformat_selection(user.formatters)",
                "word <user.word>": "user.add_phrase_to_history(word)\ninsert(word)",
                "recent list": "user.toggle_phrase_history()",
                "recent close": "user.phrase_history_hide()",
                "recent repeat <number_small>": "recent_phrase = user.get_recent_phrase(number_small)\nuser.add_phrase_to_history(recent_phrase)\ninsert(recent_phrase)",
                "recent copy <number_small>": "clip.set_text(user.get_recent_phrase(number_small))",
                "select that": "user.select_last_phrase()",
                "before that": "user.before_last_phrase()",
                "nope that | scratch that": "user.clear_last_phrase()",
                "nope that was <user.formatters>": "user.formatters_reformat_last(formatters)"
            }
        },
        {
            "file": "core/file_extension/file_extension.talon",
            "context": "file extension",
            "commands": {
                "{user.file_extension}": "\"{file_extension}\""
            }
        },
        {
            "file": "core/mouse_grid/mouse_grid_open.talon",
            "context": "mouse grid open",
            "commands": {
                "<user.number_key>": "user.grid_narrow(number_key)",
                "grid off": "user.grid_close()",
                "grid reset": "user.grid_reset()",
                "grid back": "user.grid_go_back()"
            }
        },
        {
            "file": "core/mouse_grid/mouse_grid.talon",
            "context": "mouse grid",
            "commands": {
                "M grid": "app.notify(\"please use the voice command 'mouse grid' instead of 'm grid'\")\nuser.grid_select_screen(1)\nuser.grid_activate()"
            }
        },
        {
            "file": "core/mouse_grid/mouse_grid_always.talon",
            "context": "mouse grid always",
            "commands": {
                "mouse grid": "user.grid_select_screen(1)\nuser.grid_activate()",
                "grid win": "user.grid_place_window()\nuser.grid_activate()",
                "grid <user.number_key>+": "user.grid_activate()\nuser.grid_narrow_list(number_key_list)",
                "grid screen [<number>]": "user.grid_select_screen(number or 1)\nuser.grid_activate()"
            }
        },
        {
            "file": "core/vocabulary/edit_vocabulary.talon",
            "context": "edit vocabulary",
            "commands": {
                "copy to vocab [as <phrase>]": "user.add_selection_to_vocabulary(phrase or \"\")",
                "copy name to vocab [as <phrase>]": "user.add_selection_to_vocabulary(phrase or \"\", \"name\")",
                "copy noun to vocab [as <phrase>]": "user.add_selection_to_vocabulary(phrase or \"\", \"noun\")",
                "copy to replacements as <phrase>": "user.add_selection_to_words_to_replace(phrase)",
                "copy name to replacements as <phrase>": "user.add_selection_to_words_to_replace(phrase, \"name\")",
                "copy noun to replacements as <phrase>": "user.add_selection_to_words_to_replace(phrase, \"noun\")"
            }
        },
        {
            "file": "core/help/help_scope_open.talon",
            "context": "help scope open",
            "commands": {
                "scope (hide | close)": "user.help_scope_toggle()"
            }
        },
        {
            "file": "core/help/help_open.talon",
            "context": "help open",
            "commands": {
                "help next": "user.help_next()",
                "help previous": "user.help_previous()",
                "help <number>": "user.help_select_index(number - 1)",
                "help return": "user.help_return()",
                "help refresh": "user.help_refresh()",
                "help close": "user.help_hide()"
            }
        },
        {
            "file": "core/help/help.talon",
            "context": "help",
            "commands": {
                "help alphabet": "user.help_list(\"user.letter\")",
                "help symbols": "user.help_list(\"user.symbol_key\")",
                "help numbers": "user.help_list(\"user.number_key\")",
                "help punctuation": "user.help_list(\"user.punctuation\")",
                "help modifier": "user.help_list(\"user.modifier_key\")",
                "help special keys": "user.help_list(\"user.special_key\")",
                "help function keys": "user.help_list(\"user.function_key\")",
                "help arrows": "user.help_list(\"user.arrow_key\")",
                "(help formatters | help format | format help)": "user.help_formatters(user.get_formatters_words())",
                "help context": "user.help_context()",
                "help active": "user.help_context_enabled()",
                "help search <user.text>": "user.help_search(text)",
                "help context {user.help_contexts}": "user.help_selected_context(help_contexts)",
                "help help": "user.help_search(\"help\")",
                "help scope": "user.help_scope_toggle()"
            }
        },
        {
            "file": "apps/wsl/wsl.talon",
            "context": "wsl",
            "commands": {
                "go <user.letter>": "user.file_manager_open_volume(\"/mnt/{letter}\")",
                "(wsl | weasel) reset path detection": "user.wsl_reset_path_detection()",
                "(wsl | weasel) speak": "user.wsl_speak()"
            }
        },
        {
            "file": "apps/firefox/firefox.talon",
            "context": "firefox",
            "commands": {
                "tab search": "browser.focus_address()\ninsert(\"% \")",
                "tab search <user.text>": "browser.focus_address()\ninsert(\"% {text}\")\nkey(down)"
            }
        },
        {
            "file": "apps/anaconda/anaconda.talon",
            "context": "anaconda",
            "commands": {
                "anaconda": "\"conda \"",
                "anaconda help": "\"conda --help\\n\"",
                "anaconda version": "\"conda --version\\n\"",
                "anaconda environment list": "\"conda env list\\n\"",
                "anaconda environment create": "\"conda env create -f \"",
                "anaconda environment remove": "\"conda env remove -n \"",
                "anaconda activate": "\"conda activate \"",
                "anaconda clean": "\"conda clean \"",
                "anaconda compare": "\"conda compare \"",
                "anaconda config": "\"conda config \"",
                "anaconda create": "\"conda create \"",
                "anaconda info": "\"conda info \"",
                "anaconda init": "\"conda init \"",
                "anaconda install": "\"conda install \"",
                "anaconda list": "\"conda list \"",
                "anaconda package": "\"conda package \"",
                "anaconda remove": "\"conda remove \"",
                "anaconda uninstall": "\"conda uninstall \"",
                "anaconda run": "\"conda run \"",
                "anaconda search": "\"conda search \"",
                "anaconda update": "\"conda update \"",
                "anaconda upgrade": "\"conda upgrade \"",
                "anaconda build": "\"conda build \"",
                "anaconda convert": "\"conda convert \"",
                "anaconda debug": "\"conda debug \"",
                "anaconda develop": "\"conda develop \"",
                "anaconda environment": "\"conda env \"",
                "anaconda index": "\"conda index \"",
                "anaconda inspect": "\"conda inspect \"",
                "anaconda metapackage": "\"conda metapackage \"",
                "anaconda render": "\"conda render \"",
                "anaconda server": "\"conda server \"",
                "anaconda skeleton": "\"conda skeleton \"",
                "anaconda verify": "\"conda verify \""
            }
        },
        {
            "file": "apps/terraform/terraform.talon",
            "context": "terraform",
            "commands": {
                "terraform": "\"terraform \"",
                "terraform apply": "\"terraform apply \"",
                "terraform destroy": "\"terraform destroy \"",
                "terraform format recursive": "\"terraform fmt -recursive\\n\"",
                "terraform format": "\"terraform fmt\\n\"",
                "terraform help": "\"terraform -help\"",
                "terraform init upgrade": "\"terraform init -upgrade\\n\"",
                "terraform init": "\"terraform init\\n\"",
                "terraform plan": "\"terraform plan\\n\"",
                "terraform state move": "\"terraform state mv \"",
                "terraform validate": "\"terraform validate\\n\""
            }
        },
        {
            "file": "apps/twitter/twitter.talon",
            "context": "twitter",
            "commands": {
                "(show shortcuts | shortcuts help)": "key(?)",
                "next tweet": "key(j)",
                "previous tweet": "key(k)",
                "page down": "key(space)",
                "load new tweet": "key(.)",
                "go home": "insert(\"gh\")",
                "go explore": "insert(\"ge\")",
                "go notifications": "insert(\"gn\")",
                "go mentions": "insert(\"gr\")",
                "go profile": "insert(\"gp\")",
                "go likes": "insert(\"gl\")",
                "go lists": "insert(\"gi\")",
                "go direct messages": "insert(\"gm\")",
                "go settings": "insert(\"gs\")",
                "go book marks": "insert(\"gb\")",
                "go to user": "insert(\"gu\")",
                "display settings": "insert(\"gd\")",
                "new tweet": "key(n)",
                "send tweet": "key(ctrl-enter)",
                "new direct message": "key(m)",
                "search": "key(/)",
                "like message": "key(l)",
                "reply message": "key(r)",
                "re tweet [message]": "key(t)",
                "share tweet": "key(s)",
                "bookmark": "key(b)",
                "mute account": "key(urge)",
                "block account": "key(x)",
                "open details": "key(enter)",
                "expand photo": "key(o)"
            }
        },
        {
            "file": "apps/gdb/gdb.talon",
            "context": "gdb",
            "commands": {
                "until <number>": "\"until {number}\"",
                "force clear all break points": "insert(\"d br\\n\")\ninsert(\"y\\n\")",
                "break [on] clipboard": "insert(\"break \")\nkey(ctrl-shift-v)\nkey(enter)",
                "list [source]": "\"list\\n\"",
                "info source": "\"info source\\n\"",
                "print": "\"p \"",
                "print [variable] <user.text>": "\"p {text}\"",
                "print hex": "\"p/x \"",
                "print hex [variable] <user.text>": "\"p/x {text}\"",
                "print string": "\"p/s \"",
                "hex dump <number> bytes": "\"x/{number}bx \"",
                "hex dump <number> (half | short) words": "\"x/{number}hx \"",
                "hex dump <number> (d | long) words": "\"x/{number}dx \"",
                "hex dump <number> quad words": "\"x/{number}gx \"",
                "hex dump": "\"x/100gx \"",
                "hex dump highlighted": "insert(\"x/100gx \")\nedit.copy()\nedit.paste()\nkey(enter)",
                "hex dump clipboard": "insert(\"x/100gx \")\nedit.paste()\nkey(enter)",
                "source": "\"source \\t\\t\"",
                "(list | show | info) display": "\"info display\\n\"",
                "display assembly line": "\"display /i $pc\\n\"",
                "display source": "\"display \"",
                "enable display <number_small>": "\"enable display {number_small}\\n\"",
                "disable display <number_small>": "\"disable display {number_small}\\n\"",
                "undisplay": "\"undisplay\\n\"",
                "(list | show | info) local": "\"info local \"",
                "(list | show | info) local typed": "\"info local -t \"",
                "(list | show | info) variable": "\"info variable \"",
                "(list | show | info) variable typed": "\"info variable -t \"",
                "(list | show | info) locals": "\"info local\\n\"",
                "(list | show | info) variables": "\"info variables\\n\"",
                "info threads": "\"info threads\\n\"",
                "restart [program]": "\"r\\n\"",
                "continue": "\"c\\n\"",
                "back trace": "\"bt\\n\"",
                "debug quit": "\"quit\\n\"",
                "debug force quit": "\"quit\\ny\\n\"",
                "(show | info) (inf | inferiors)": "\"info inferiors\\n\"",
                "inferior <number_small>": "\"inferior {number_small}\\n\"",
                "inferior": "\"inferior \"",
                "resume main (inf | inferior)": "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")",
                "resume [from] (inf | inferior) <number_small>": "insert(\"inferior {number_small}\\n\")\ninsert(\"c\\n\")",
                "set args": "\"set args \"",
                "show follow (fork | forks) [mode]": "\"show follow-fork-mode\\n\"",
                "[set] follow (fork | forks) [mode] child": "\"set follow-fork-mode child\\n\"",
                "[set] follow (fork | forks) [mode] parent": "\"set follow-fork-mode parent\\n\"",
                "show detach on fork": "\"show detach-on-fork\\n\"",
                "set detach on fork": "\"set detach-on-fork on\\n\"",
                "unset detach on fork": "\"set detach-on-fork off\\n\"",
                "show list size": "\"show listsize\\n\"",
                "set list size <number_small>": "\"set listsize {number_small}\\n\"",
                "clear screen": "\"shell clear\\n\""
            }
        },
        {
            "file": "apps/talon_repl/talon_repl.talon",
            "context": "talon repl",
            "commands": {
                "test last": "phrase = user.history_get(1)\ncommand = \"sim('{phrase}')\"\ninsert(command)\nkey(enter)",
                "test <phrase>": "insert(\"sim('{phrase}')\")\nkey(enter)",
                "test numb <number_small>": "phrase = user.history_get(number_small)\ncommand = \"sim('{phrase}')\"\ninsert(command)\nkey(enter)",
                "debug action {user.talon_actions}": "insert(\"actions.find('{user.talon_actions}')\")\nkey(enter)",
                "debug list {user.talon_lists}": "insert(\"actions.user.talon_pretty_print(registry.lists['{talon_lists}'])\")\nkey(enter)",
                "debug tags": "insert(\"actions.user.talon_pretty_print(registry.tags)\")\nkey(enter)",
                "debug settings": "insert(\"actions.user.talon_pretty_print(registry.settings)\")\nkey(enter)",
                "debug modes": "insert(\"actions.user.talon_pretty_print(scope.get('mode'))\")\nkey(enter)",
                "debug scope {user.talon_scopes}": "insert(\"actions.user.talon_pretty_print(scope.get('{talon_scopes}'))\")\nkey(enter)",
                "debug running apps": "insert(\"actions.user.talon_pretty_print(ui.apps(background=False))\")\nkey(enter)",
                "debug all windows": "insert(\"actions.user.talon_pretty_print(ui.windows())\")\nkey(enter)",
                "debug {user.running} windows": "insert(\"actions.user.talon_debug_app_windows('{running}')\")\nkey(enter)"
            }
        },
        {
            "file": "apps/discord/discord.talon",
            "context": "discord",
            "commands": {
                "[channel] mentions last": "user.discord_mentions_last()",
                "[channel] mentions next": "user.discord_mentions_next()",
                "oldest unread": "user.discord_oldest_unread()",
                "{user.discord_destination} [<user.text>]": "user.discord_quick_switcher(user.discord_destination, user.text or \"\")",
                "switcher": "user.discord_quick_switcher(\"\", \"\")",
                "current call": "user.discord_go_current_call()",
                "toggle (dee ems | dims)": "user.discord_toggle_dms()",
                "toggle pins": "user.discord_toggle_pins()",
                "toggle inbox": "user.discord_toggle_inbox()",
                "toggle (members | member list)": "user.discord_toggle_members()",
                "pick emoji": "user.discord_emoji_picker()",
                "pick (jif | gif | gift)": "user.discord_gif_picker()",
                "mark inbox channel read": "user.discord_mark_inbox_read()",
                "[toggle] (mute | unmute)": "user.discord_mute()",
                "(mute | unmute) and sleep": "user.discord_mute()\nspeech.disable()",
                "[toggle] (deafen | undeafen)": "user.discord_deafen()",
                "answer call": "user.discord_answer_call()",
                "decline call": "user.discord_decline_call()"
            }
        },
        {
            "file": "apps/eclipse/eclipse.talon",
            "context": "eclipse",
            "commands": {
                "please [<user.text>]": "key(ctrl-3)\ninsert(user.text or \"\")",
                "bar explore": "key(alt-shift-w p)",
                "bar outline": "key(alt-shift-q o)",
                "panel output": "key(alt-shift-q)\nsleep(200ms)\nkey(c)",
                "panel problems": "key(alt-shift-q)\nsleep(200ms)\nkey(x)",
                "panel errors": "key(alt-shift-q)\nsleep(200ms)\nkey(l)",
                "panel breakpoints": "key(alt-shift-q)\nsleep(200ms)\nkey(b)",
                "panel search": "key(alt-shift-q)\nsleep(200ms)\nkey(s)",
                "panel variables": "key(alt-shift-q)\nsleep(200ms)\nkey(v)",
                "show settings": "key(alt-w p)",
                "show shortcuts": "key(ctrl-shift-l)",
                "file hunt [<user.text>]": "key(ctrl-shift-r)\nsleep(50ms)\ninsert(text or \"\")",
                "file create": "key(ctrl-n)",
                "file open folder": "key(alt-shift-w x)",
                "file rename": "key(alt-shift-w p enter f2)",
                "file reveal": "key(alt-shift-w p enter)",
                "imports fix": "key(ctrl-shift-o)",
                "refactor rename": "key(alt-shift-r)",
                "refactor this": "key(alt-shift-i)",
                "(go declaration | follow)": "key(f3)",
                "go back": "key(alt-left)",
                "go forward": "key(alt-right)",
                "go marks": "key(alt-end)",
                "toggle mark": "key(ctrl-alt-b down enter)",
                "go next mark": "key(alt-pagedown)",
                "go last mark": "key(alt-pageup)",
                "break point": "key(ctrl-shift-b)",
                "step over": "key(f6)",
                "debug step into": "key(f5)",
                "debug step out [of]": "key(f7)",
                "debug continue": "key(f8)",
                "copy line down": "key(ctrl-alt-down)",
                "copy line up": "key(ctrl-alt-up)"
            }
        },
        {
            "file": "apps/gitlab/gitlab.talon",
            "context": "gitlab",
            "commands": {
                "show shortcuts": "key(?)",
                "go to projects [page]": "key(shift-p)",
                "go to groups [page]": "key(shift-g)",
                "go to activity [page]": "key(shift-a)",
                "go to milestones [page]": "key(shift-l)",
                "go to snippets [page]": "key(shift-s)",
                "search page": "key(s)",
                "go to issues [page]": "key(shift-i)",
                "go to merge requests [page]": "key(shift-m)",
                "go to to do [list] [page]": "key(shift-t)",
                "(show | hide) performance bar": "key(p)",
                "edit last comment": "key(1)",
                "toggle mark down [preview]": "key(ctrl-shift-p)",
                "go [to] project home [page]": "insert(\"gp\")",
                "go [to] project activity [feed]": "insert(\"gv\")",
                "go [to] project releases [list]": "insert(\"gr\")",
                "go [to] project files [list]": "insert(\"gf\")",
                "go [to] project file search [page]": "key(t)",
                "go [to] project (commit | commits) [list]": "insert(\"gc\")",
                "go [to] (repository | repo) graph [page]": "insert(\"gn\")",
                "go [to] (repository | repo) charts": "insert(\"gd\")",
                "go [to] project issues [list]": "insert(\"gi\")",
                "go [to] new issues [list]": "insert(\"i\")",
                "go [to] project issues boards [list]": "insert(\"gb\")",
                "go [to] project merge requests [list]": "insert(\"gm\")",
                "go [to] jobs [list]": "insert(\"gj\")",
                "go [to] project metrics": "insert(\"gl\")",
                "go [to] project environments": "insert(\"ge\")",
                "go [to] project cubes": "insert(\"gk\")",
                "go [to] project snippets [list]": "insert(\"gs\")",
                "go [to] project wiki": "insert(\"gw\")",
                "edit description": "key(e)",
                "change assignee": "key(a)",
                "change milestone": "key(m)",
                "change label": "key(l)",
                "right comment": "key(r)",
                "next [unresolved] discussion": "key(n)",
                "previous [unresolved] discussion": "key(p)",
                "next file": "key(])",
                "previous file": "key([)",
                "back to files": "key(escape)",
                "open permalink": "key(y)",
                "edit page": "key(e)"
            }
        },
        {
            "file": "apps/visualstudio/visual_studio.talon",
            "context": "visual studio",
            "commands": {
                "panel solution": "key(ctrl-alt-l)",
                "panel properties": "key(f4)",
                "panel output": "key(ctrl-alt-o)",
                "panel class": "key(ctrl-shift-c)",
                "panel errors": "key(ctrl-\\ ctrl-e)",
                "panel design": "key(shift-f7)",
                "panel marks": "key(ctrl-k ctrl-w)",
                "panel breakpoints": "key(ctrl-alt-b)",
                "show settings": "key(alt-t o)",
                "fullscreen switch": "key(shift-alt-enter)",
                "wrap switch": "key(ctrl-e ctrl-w)",
                "file hunt [<user.text>]": "key(ctrl-shift-t)\ninsert(text or \"\")",
                "file create": "key(ctrl-n)",
                "file rename": "key(ctrl-[ s f2)",
                "file reveal": "key(ctrl-[ s)",
                "hint show": "key(ctrl-shift-space)",
                "definition show": "key(f12)",
                "definition peek": "key(alt-f12)",
                "references find": "key(shift-f12)",
                "format that": "key(ctrl-k ctrl-d)",
                "format selection": "key(ctrl-k ctrl-f)",
                "imports fix": "key(ctrl-r ctrl-g)",
                "refactor field": "key(ctrl-r ctrl-e)",
                "refactor interface": "key(ctrl-r ctrl-i)",
                "refactor method": "key(ctrl-r ctrl-m)",
                "refactor reorder parameters": "key(ctrl-r ctrl-o)",
                "refactor remove parameters": "key(ctrl-r ctrl-v)",
                "refactor that": "key(ctrl-r ctrl-r)",
                "(go declaration | follow)": "key(ctrl-f12)",
                "go back": "key(ctrl--)",
                "go forward": "key(ctrl-shift--)",
                "go implementation": "key(f12)",
                "go recent [<user.text>]": "key(ctrl-1 ctrl-r)\nsleep(100ms)\ninsert(text or \"\")",
                "go type [<user.text>]": "key(ctrl-1 ctrl-t)\nsleep(100ms)\ninsert(text or \"\")",
                "go member [<user.text>]": "key(alt-\\)\nsleep(100ms)\ninsert(text or \"\")",
                "go usage": "key(shift-f12)",
                "go marks": "key(ctrl-k ctrl-w)",
                "toggle mark": "key(ctrl-k ctrl-k)",
                "go next mark": "key(ctrl-k ctrl-n)",
                "go last mark": "key(ctrl-k ctrl-p)",
                "fold toggle": "key(ctrl-m ctrl-m)",
                "fold toggle all": "key(ctrl-m ctrl-l)",
                "fold definitions": "key(ctrl-m ctrl-o)",
                "break point": "key(f9)",
                "step over": "key(f10)",
                "debug step into": "key(f11)",
                "debug step out [of]": "key(f10)",
                "debug start": "key(f5)",
                "debug stopper": "key(shift-f5)",
                "debug continue": "key(f5)"
            }
        },
        {
            "file": "apps/windows_terminal/windows_terminal.talon",
            "context": "windows terminal",
            "commands": {
                "settings open": "key(ctrl-,)",
                "focus left": "key(ctrl-alt-shift-left)",
                "focus right": "key(ctrl-alt-shift-right)",
                "focus up": "key(ctrl-alt-shift-up)",
                "focus down": "key(ctrl-alt-shift-down)",
                "term menu": "key(ctrl-shift-f1)",
                "find it": "edit.find()",
                "find it <phrase>": "key(escape)\nedit.find(\"{phrase}\\n\")"
            }
        },
        {
            "file": "apps/i3wm/i3wm.talon",
            "context": "i3wm",
            "commands": {
                "port <number_small>": "user.system_command(\"i3-msg workspace number {number_small}\")",
                "(port flip | flipper)": "user.system_command(\"i3-msg workspace back_and_forth\")",
                "port right": "user.system_command(\"i3-msg workspace next\")",
                "port left": "user.system_command(\"i3-msg workspace prev\")",
                "(win | window) left": "user.system_command(\"i3-msg focus left\")",
                "(win | window) right": "user.system_command(\"i3-msg focus right\")",
                "(win | window) up": "user.system_command(\"i3-msg focus up\")",
                "(win | window) down": "user.system_command(\"i3-msg focus down\")",
                "(win | window) kill": "user.system_command(\"i3-msg kill\")",
                "(win | window) stacking": "user.system_command(\"i3-msg layout stacking\")",
                "(win | window) default": "user.system_command(\"i3-msg layout toggle split\")",
                "(win | window) tabbed": "user.system_command(\"i3-msg layout tabbed\")",
                "reload i three config": "user.system_command(\"i3-msg reload\")",
                "restart i three": "user.system_command(\"i3-msg restart\")",
                "(full screen | scuba)": "user.system_command(\"i3-msg fullscreen\")",
                "toggle floating": "user.system_command(\"i3-msg floating toggle\")",
                "focus floating": "user.system_command(\"i3-msg focus mode_toggle\")",
                "center window": "user.system_command(\"i3-msg move position center\")",
                "resize mode": "user.system_command('i3-msg mode \"resize\"')",
                "focus parent": "user.system_command(\"i3-msg focus parent\")",
                "focus child": "user.system_command(\"i3-msg focus child\")",
                "grow window": "user.system_command('i3-msg mode \"resize\"')\nkey(right:10)\nkey(down:10)\nkey(escape)\nsleep(200ms)\nuser.system_command(\"i3-msg move position center\")",
                "shrink window": "user.system_command('i3-msg mode \"resize\"')\nkey(left:10)\nkey(up:10)\nkey(escape)\nsleep(200ms)\nuser.system_command(\"i3-msg move position center\")",
                "horizontal (shell | terminal)": "user.system_command(\"i3-msg split h\")\nuser.i3wm_shell()",
                "vertical (shell | terminal)": "user.system_command(\"i3-msg split v\")\nuser.i3wm_shell()",
                "(shuffle | move (win | window) [to] port) <number_small>": "user.system_command(\"i3-msg move container to workspace number {number_small}\")",
                "(shuffle | move (win | window) [to] last port)": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                "(shuffle | move) flipper": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                "(shuffle | move (win | window) left)": "user.system_command(\"i3-msg move left\")",
                "(shuffle | move (win | window) right)": "user.system_command(\"i3-msg move right\")",
                "(shuffle | move (win | window) up)": "user.system_command(\"i3-msg move up\")",
                "(shuffle | move (win | window) down)": "user.system_command(\"i3-msg move down\")",
                "(win | window) horizontal": "user.system_command(\"i3-msg split h\")",
                "(win | window) vertical": "user.system_command(\"i3-msg split v\")",
                "make scratch": "user.system_command(\"i3-msg move scratchpad\")",
                "[(show | hide)] scratch": "user.system_command(\"i3-msg scratchpad show\")",
                "next scratch": "user.system_command(\"i3-msg scratchpad show\")\nuser.system_command(\"i3-msg scratchpad show\")",
                "launch": "user.i3wm_launch()",
                "launch <user.text>": "user.i3wm_launch()\nsleep(100ms)\ninsert(\"{text}\")",
                "lock screen": "user.i3wm_lock()",
                "(launch shell | koopa)": "user.i3wm_shell()",
                "new scratch (shell | window)": "user.i3wm_shell()\nsleep(200ms)\nuser.system_command(\"i3-msg move scratchpad\")\nuser.system_command(\"i3-msg scratchpad show\")",
                "murder": "user.deprecate_command(\"2023-02-04\", \"murder\", \"win kill\")\nuser.system_command(\"i3-msg kill\")"
            }
        },
        {
            "file": "apps/windows_explorer/windows_explorer.talon",
            "context": "windows explorer",
            "commands": {
                "go <user.letter>": "user.file_manager_open_volume(\"{letter}:\")",
                "go app data": "user.file_manager_open_directory(\"%AppData%\")",
                "go program files": "user.file_manager_open_directory(\"%programfiles%\")"
            }
        },
        {
            "file": "apps/windbg/windbg.talon",
            "context": "windbg",
            "commands": {
                "register <user.registers>": "key(@)\ninsert(\"{registers}\")",
                "open help": "insert(\".hh\\n\")",
                "add microsoft symbols": "insert(\"srv*C:\\\\symbols*http://msdl.microsoft.com/download/symbols;\\n\")",
                "force reload symbols": "insert(\".reload /f\\n\")",
                "reload symbols": "insert(\".reload\\n\")",
                "loaded modules": "insert(\"lm l\\n\")",
                "display pointers": "insert(\"dps \")",
                "dereference pointer": "user.insert_between(\"poi(\", \")\")",
                "show version": "key(ctrl-alt-w)",
                "view command": "key(alt-1)",
                "view watch": "key(alt-2)",
                "view locals": "key(alt-3)",
                "view registers": "key(alt-4)",
                "view memory": "key(alt-5)",
                "view call stack": "key(alt-6)",
                "view disassembly": "key(alt-7)",
                "view scratch pad": "key(alt-8)",
                "view (processes | threads)": "key(alt-9)",
                "dump function params": "\"r @rcx,@rdx,@r8,@r9\\n\"",
                "(lib | library) <user.windows_dlls>": "\"{windows_dlls}\""
            }
        },
        {
            "file": "apps/amethyst/amethyst.talon",
            "context": "amethyst",
            "commands": {
                "window next": "key(\"alt-shift-j\")",
                "window previous": "key(\"alt-shift-k\")",
                "window full": "key(\"alt-shift-d\")",
                "window tall": "key(\"alt-shift-a\")",
                "window middle": "key(\"alt-shift-`\")",
                "window move main": "key(\"alt-shift-enter\")",
                "window grow": "key(\"alt-shift-l\")",
                "window shrink": "key(\"alt-shift-h\")",
                "window reevaluate": "key(\"alt-shift-z\")"
            }
        },
        {
            "file": "apps/rstudio/rstudio_mac.talon",
            "context": "rstudio mac",
            "commands": {
                "run that": "key(\"cmd-enter\")",
                "run document": "key(\"cmd-alt-r\")",
                "run from top": "key(\"cmd-alt-b\")",
                "run to end": "key(\"cmd-alt-e\")",
                "run (function | funk)": "key(\"cmd-alt-f\")",
                "run section": "key(\"cmd-alt-t\")",
                "run previous chunks": "key(\"cmd-alt-p\")",
                "run chunk": "key(\"cmd-alt-c\")",
                "run next chunk": "key(\"cmd-alt-n\")",
                "run all": "key(\"cmd-shift-s\")",
                "run knitter": "key(\"cmd-shift-k\")",
                "run profiler": "key(\"cmd-shift-alt-p\")",
                "jump back": "key(\"cmd-f9\")",
                "jump forward": "key(\"cmd-f10\")",
                "close all tabs": "key(\"cmd-shift-w\")",
                "indent lines": "key(\"cmd-i\")",
                "toggle comment": "key(\"cmd-shift-c\")",
                "reformat comment": "key(\"cmd-shift-/\")",
                "reformat R code": "key(\"cmd-shift-a\")",
                "line up": "key(\"alt-up\")",
                "line down": "key(\"alt-down\")",
                "duplicate line up": "key(\"cmd-alt-up\")",
                "duplicate line [down]": "key(\"cmd-alt-down\")",
                "select to paren": "key(\"ctrl-shift-e\")",
                "select to matching paren": "key(\"ctrl-shift-alt-e\")",
                "jump to matching": "key(\"ctrl-p\")",
                "expand selection": "key(\"shift-alt-cmd-up\")",
                "reduce selection": "key(\"shift-alt-cmd-down\")",
                "add cursor up": "key(\"ctrl-alt-up\")",
                "add cursor down": "key(\"ctrl-alt-down\")",
                "move active cursor up": "key(\"ctrl-alt-shift-up\")",
                "move active cursor down": "key(\"ctrl-alt-shift-down\")",
                "delete line": "key(\"cmd-d\")",
                "delete word left": "key(\"alt-backspace\")",
                "delete word right": "key(\"alt-delete\")",
                "assign that": "key(\"alt--\")",
                "pipe that": "key(\"cmd-shift-m\")",
                "insert knitter chunk": "key(\"cmd-alt-i\")",
                "fold that": "key(\"cmd-alt-l\")",
                "unfold that": "key(\"cmd-shift-alt-l\")",
                "fold all": "key(\"cmd-alt-o\")",
                "unfold all": "key(\"cmd-shift-alt-o\")",
                "find and replace": "key(\"cmd-f\")",
                "find next": "key(\"cmd-g\")",
                "find previous": "key(\"cmd-shift-g\")",
                "find with selection": "key(\"cmd-e\")",
                "find in files": "key(\"cmd-shift-f\")",
                "run replace": "key(\"cmd-shift-j\")",
                "run spell check": "key(\"f7\")",
                "go to source": "key(\"ctrl-1\")",
                "go to console": "key(\"ctrl-2\")",
                "go to help": "key(\"ctrl-3\")",
                "go to history": "key(\"ctrl-4\")",
                "go to files": "key(\"ctrl-5\")",
                "go to (plots | plot)": "key(\"ctrl-6\")",
                "go to packages": "key(\"ctrl-7\")",
                "go to environment": "key(\"ctrl-8\")",
                "go to git": "key(\"ctrl-9\")",
                "go to build": "key(\"ctrl-0\")",
                "go to terminal": "key(\"alt-shift-t\")",
                "go to omni": "key(\"ctrl-.\")",
                "go to line": "key(\"cmd-shift-alt-g\")",
                "go to section": "key(\"cmd-shift-alt-j\")",
                "go to tab": "key(\"ctrl-shift-.\")",
                "go to previous tab": "key(\"ctrl-f11\")",
                "go to next tab": "key(\"ctrl-f12\")",
                "go to first tab": "key(\"ctrl-shift-f11\")",
                "go to last tab": "key(\"ctrl-shift-f12\")",
                "zoom source": "key(\"ctrl-shift-1\")",
                "(zoom | show) all": "key(\"ctrl-shift-0\")",
                "help that": "key(\"f1\")",
                "define that": "key(\"f2\")",
                "previous plot": "key(\"cmd-alt-f11\")",
                "next plot": "key(\"cmd-alt-f12\")",
                "restart R session": "key(\"cmd-shift-f10\")",
                "dev tools build": "key(\"cmd-shift-b\")",
                "dev tools load all": "key(\"cmd-shift-l\")",
                "dev tools test": "key(\"cmd-shift-t\")",
                "dev tools check": "key(\"cmd-shift-e\")",
                "dev tools document": "key(\"cmd-shift-d\")",
                "toggle breakpoint": "key(\"shift-f9\")",
                "debug next": "key(\"f10\")",
                "debug step into (function | funk)": "key(\"shift-f4\")",
                "debug finish (function | funk)": "key(\"shift-f6\")",
                "debug continue": "key(\"shift-f5\")",
                "debug stop": "key(\"shift-f8\")",
                "run git diff": "key(\"ctrl-alt-d\")",
                "run git commit": "key(\"ctrl-alt-m\")"
            }
        },
        {
            "file": "apps/dunst/dunst.talon",
            "context": "dunst",
            "commands": {
                "show notifications": "key(ctrl-`)",
                "dismiss [notifications]": "user.system_command(\"dunstctl close\")",
                "dismiss all [notifications]": "user.system_command(\"dunstctl close-all\")"
            }
        },
        {
            "file": "apps/jetbrains/jetbrains.talon",
            "context": "jetbrains",
            "commands": {
                "complete": "user.idea(\"action CodeCompletion\")",
                "perfect": "user.idea(\"action CodeCompletion,action CodeCompletion\")",
                "smart": "user.idea(\"action SmartTypeCompletion\")",
                "(done | finish)": "user.idea(\"action EditorCompleteStatement\")",
                "grab <number>": "user.idea_grab(number)",
                "(action | please)": "user.idea(\"action GotoAction\")",
                "(action | please) <user.text>": "user.idea(\"action GotoAction\")\ninsert(text)",
                "refactor": "user.idea(\"action Refactorings.QuickListPopupAction\")",
                "refactor <user.text>": "user.idea(\"action Refactorings.QuickListPopupAction\")\ninsert(text)",
                "extract variable": "user.idea(\"action IntroduceVariable\")",
                "extract field": "user.idea(\"action IntroduceField\")",
                "extract constant": "user.idea(\"action IntroduceConstant\")",
                "extract parameter": "user.idea(\"action IntroduceParameter\")",
                "extract interface": "user.idea(\"action ExtractInterface\")",
                "extract method": "user.idea(\"action ExtractMethod\")",
                "refactor in line": "user.idea(\"action Inline\")",
                "refactor move": "user.idea(\"action Move\")",
                "refactor rename": "user.idea(\"action RenameElement\")",
                "rename file": "user.idea(\"action RenameFile\")",
                "fix (format | formatting)": "user.idea(\"action ReformatCode\")",
                "fix imports": "user.idea(\"action OptimizeImports\")",
                "(go declaration | follow)": "user.idea(\"action GotoDeclaration\")",
                "go implementation": "user.idea(\"action GotoImplementation\")",
                "go usage": "user.idea(\"action FindUsages\")",
                "go type": "user.idea(\"action GotoTypeDeclaration\")",
                "go test": "user.idea(\"action GotoTest\")",
                "go back": "user.idea(\"action Back\")",
                "go forward": "user.idea(\"action Forward\")",
                "find (everywhere | all)": "user.idea(\"action SearchEverywhere\")",
                "find (everywhere | all) <user.text> [over]": "user.idea(\"action SearchEverywhere\")\nsleep(500ms)\ninsert(text)",
                "(search | find) class": "user.idea(\"action GotoClass\")",
                "(search | find) file": "user.idea(\"action GotoFile\")",
                "(search | find) path": "user.idea(\"action FindInPath\")",
                "(search | find) symbol": "user.idea(\"action GotoSymbol\")",
                "(search | find) symbol <user.text>": "user.idea(\"action GotoSymbol\")\ninsert(text)\nkey(\"enter\")",
                "recent": "user.idea(\"action RecentFiles\")",
                "surround [this] with <user.text> [over]": "idea(\"action SurroundWith\")\nsleep(500ms)\ninsert(text)",
                "insert generated <user.text> [over]": "user.idea(\"action Generate\")\nsleep(500ms)\ninsert(text)",
                "insert template <user.text> [over]": "idea(\"action InsertLiveTemplate\")\nsleep(500ms)\ninsert(text)",
                "create (template | snippet)": "user.idea(\"action SaveAsTemplate\")",
                "toggle recording": "user.idea(\"action StartStopMacroRecording\")",
                "change (recording | recordings)": "user.idea(\"action EditMacros\")",
                "play recording": "user.idea(\"action PlaybackLastMacro\")",
                "play recording <user.text> [over]": "idea(\"action PlaySavedMacrosAction\")\ninsert(text)\nsleep(500ms)\nKey(\"enter\")",
                "go mark": "user.idea(\"action ShowBookmarks\")",
                "toggle mark": "user.idea(\"action ToggleBookmark\")",
                "go next mark": "user.idea(\"action GotoNextBookmark\")",
                "go last mark": "user.idea(\"action GotoPreviousBookmark\")",
                "toggle mark <number>": "user.idea(\"action ToggleBookmark{number}\")",
                "go mark <number>": "user.idea(\"action GotoBookmark{number}\")",
                "expand deep": "user.idea(\"action ExpandRegionRecursively\")",
                "expand all": "user.idea(\"action ExpandAllRegions\")",
                "collapse deep": "user.idea(\"action CollapseRegionRecursively\")",
                "collapse all": "user.idea(\"action CollapseAllRegions\")",
                "go next (method | function)": "user.idea(\"action MethodDown\")",
                "go last (method | function)": "user.idea(\"action MethodUp\")",
                "clippings": "user.idea(\"action PasteMultiple\")",
                "copy path": "user.idea(\"action CopyPaths\")",
                "copy reference": "user.idea(\"action CopyReference\")",
                "copy pretty": "user.idea(\"action CopyAsRichText\")",
                "create sibling": "user.idea(\"action NewElementSamePlace\")",
                "create sibling <user.text> [over]": "user.idea(\"action NewElementSamePlace\")\nsleep(500ms)\ninsert(text)",
                "create file": "user.idea(\"action NewElement\")",
                "create file <user.text> [over]": "user.idea(\"action NewElement\")\nsleep(500ms)\ninsert(text)",
                "go task": "user.idea(\"action tasks.goto\")",
                "go browser task": "user.idea(\"action tasks.open.in.browser\")",
                "switch task": "user.idea(\"action tasks.switch\")",
                "clear task": "user.idea(\"action tasks.close\")",
                "configure servers": "user.idea(\"action tasks.configure.servers\")",
                "git pull": "user.idea(\"action Vcs.UpdateProject\")",
                "git commit": "user.idea(\"action CheckinProject\")",
                "git push": "user.idea(\"action CheckinProject\")",
                "git log": "user.idea(\"action Vcs.ShowTabbedFileHistory\")",
                "git browse": "user.idea(\"action Github.Open.In.Browser\")",
                "git (gets | gist)": "user.idea(\"action Github.Create.Gist\")",
                "git (pull request | request)": "user.idea(\"action Github.Create.Pull.Request\")",
                "git (view | show | list) (requests | request)": "user.idea(\"action Github.View.Pull.Request\")",
                "git (annotate | blame)": "user.idea(\"action Annotate\")",
                "git menu": "user.idea(\"action Vcs.QuickListPopupAction\")",
                "toggle project": "user.idea(\"action ActivateProjectToolWindow\")",
                "toggle find": "user.idea(\"action ActivateFindToolWindow\")",
                "toggle run": "user.idea(\"action ActivateRunToolWindow\")",
                "toggle debug": "user.idea(\"action ActivateDebugToolWindow\")",
                "toggle events": "user.idea(\"action ActivateEventLogToolWindow\")",
                "toggle terminal": "user.idea(\"action ActivateTerminalToolWindow\")",
                "toggle git": "user.idea(\"action ActivateVersionControlToolWindow\")",
                "toggle structure": "user.idea(\"action ActivateStructureToolWindow\")",
                "toggle database": "user.idea(\"action ActivateDatabaseToolWindow\")",
                "toggle database changes": "user.idea(\"action ActivateDatabaseChangesToolWindow\")",
                "toggle make": "user.idea(\"action ActivatemakeToolWindow\")",
                "toggle to do": "user.idea(\"action ActivateTODOToolWindow\")",
                "toggle docker": "user.idea(\"action ActivateDockerToolWindow\")",
                "toggle favorites": "user.idea(\"action ActivateFavoritesToolWindow\")",
                "toggle last": "user.idea(\"action JumpToLastWindow\")",
                "toggle pinned": "user.idea(\"action TogglePinnedMode\")",
                "toggle docked": "user.idea(\"action ToggleDockMode\")",
                "toggle floating": "user.idea(\"action ToggleFloatingMode\")",
                "toggle windowed": "user.idea(\"action ToggleWindowedMode\")",
                "toggle split": "user.idea(\"action ToggleSideMode\")",
                "toggle tool buttons": "user.idea(\"action ViewToolButtons\")",
                "toggle toolbar": "user.idea(\"action ViewToolBar\")",
                "toggle status [bar]": "user.idea(\"action ViewStatusBar\")",
                "toggle navigation [bar]": "user.idea(\"action ViewNavigationBar\")",
                "toggle power save": "user.idea(\"action TogglePowerSave\")",
                "toggle whitespace": "user.idea(\"action EditorToggleShowWhitespaces\")",
                "toggle indents": "user.idea(\"action EditorToggleShowIndentLines\")",
                "toggle line numbers": "user.idea(\"action EditorToggleShowLineNumbers\")",
                "toggle (bread crumbs | breadcrumbs)": "user.idea(\"action EditorToggleShowBreadcrumbs\")",
                "toggle gutter icons": "user.idea(\"action EditorToggleShowGutterIcons\")",
                "toggle wrap": "user.idea(\"action EditorToggleUseSoftWraps\")",
                "toggle parameters": "user.idea(\"action ToggleInlineHintsAction\")",
                "toggle fullscreen": "user.idea(\"action ToggleFullScreen\")",
                "toggle distraction [free mode]": "user.idea(\"action ToggleDistractionFreeMode\")",
                "toggle presentation [mode]": "user.idea(\"action TogglePresentationMode\")",
                "toggle comment": "code.toggle_comment()",
                "change scheme": "user.idea(\"action QuickChangeScheme\")",
                "(toggle | pop) (doc | documentation)": "user.idea(\"action QuickJavaDoc\")",
                "(pop deaf | toggle definition)": "user.idea(\"action QuickImplementations\")",
                "pop type": "user.idea(\"action ExpressionTypeInfo\")",
                "pop parameters": "user.idea(\"action ParameterInfo\")",
                "go breakpoints": "user.idea(\"action ViewBreakpoints\")",
                "toggle [line] breakpoint": "user.idea(\"action ToggleLineBreakpoint\")",
                "toggle method breakpoint": "user.idea(\"action ToggleMethodBreakpoint\")",
                "run menu": "user.idea(\"action ChooseRunConfiguration\")",
                "run test": "user.idea(\"action RunClass\")",
                "run test again": "user.idea(\"action Rerun\")",
                "debug test": "user.idea(\"action DebugClass\")",
                "step over": "user.idea(\"action StepOver\")",
                "step into": "user.idea(\"action StepInto\")",
                "step smart": "user.idea(\"action SmartStepInto\")",
                "step to line": "user.idea(\"action RunToCursor\")",
                "continue": "user.idea(\"action Resume\")",
                "(grow | shrink) window right": "user.idea(\"action ResizeToolWindowRight\")",
                "(grow | shrink) window left": "user.idea(\"action ResizeToolWindowLeft\")",
                "(grow | shrink) window up": "user.idea(\"action ResizeToolWindowUp\")",
                "(grow | shrink) window down": "user.idea(\"action ResizeToolWindowDown\")",
                "go next (error | air)": "user.idea(\"action GotoNextError\")",
                "go last (error | air)": "user.idea(\"action GotoPreviousError\")",
                "fix next (error | air)": "user.idea(\"action GotoNextError\")\nuser.idea(\"action ShowIntentionActions\")",
                "fix last (error | air)": "user.idea(\"action GotoPreviousError\")\nuser.idea(\"action ShowIntentionActions\")",
                "select less": "user.idea(\"action EditorUnSelectWord\")",
                "select (more | this)": "user.idea(\"action EditorSelectWord\")",
                "expand <number> until <number>": "user.select_range(number_1, number_2)\nuser.idea(\"action ExpandRegion\")",
                "collapse <number> until <number>": "user.select_range(number_1, number_2)\nuser.idea(\"action CollapseRegion\")",
                "paste <number> until <number>": "user.select_range(number_1, number_2)\nuser.idea(\"action EditorPaste\")",
                "refactor <number> until <number>": "user.select_range(number_1, number_2)\nuser.idea(\"action Refactorings.QuickListPopupAction\")",
                "clone <number>": "user.line_clone(number)",
                "clear last <user.text> [over]": "user.idea(\"find prev {text}, action EditorBackSpace\")",
                "clear next <user.text> [over]": "user.idea(\"find next {text}, action EditorBackSpace\")",
                "comment last <user.text> [over]": "user.idea(\"find prev {text}, action CommentByLineComment\")",
                "comment next <user.text> [over]": "user.idea(\"find next {text}, action CommentByLineComment\")",
                "go last <user.text> [over]": "user.idea(\"find prev {text}, action EditorRight\")",
                "go next <user.text> [over]": "user.idea(\"find next {text}, action EditorRight\")",
                "paste last <user.text> [over]": "user.idea(\"find prev {text}, action EditorRight, action EditorPaste\")",
                "paste next <user.text> [over]": "user.idea(\"find next {text}, action EditorRight, action EditorPaste\")",
                "refactor last <user.text> [over]": "user.idea(\"find prev {text}, action Refactorings.QuickListPopupAction\")",
                "refactor next <user.text> [over]": "user.idea(\"find next {text}, action Refactorings.QuickListPopupAction\")",
                "replace last <user.text> [over]": "user.idea(\"find prev {text}, action EditorPaste\")",
                "replace next <user.text> [over]": "user.idea(\"find next {text}, action EditorPaste\")",
                "select last <user.text> [over]": "user.idea(\"find prev {text}\")",
                "select next <user.text> [over]": "user.idea(\"find next {text}\")",
                "select camel left": "user.extend_camel_left()",
                "select camel right": "user.extend_camel_right()",
                "go camel left": "user.camel_left()",
                "go camel right": "user.camel_right()",
                "blacken": "user.idea(\"action BLACKReformatCode\")"
            }
        },
        {
            "file": "apps/apple_notes/apple_notes.talon",
            "context": "apple notes",
            "commands": {
                "new note": "key(cmd-n)",
                "duplicate note": "key(cmd-d)",
                "new folder": "key(shift-cmd-n)",
                "toggle folders": "key(alt-cmd-s)",
                "show main": "key(cmd-0)",
                "list view": "key(cmd-1)",
                "gallery view": "key(cmd-2)",
                "toggle attachments": "key(cmd-3)",
                "find all": "key(alt-cmd-f)",
                "print note": "key(cmd-p)",
                "attach file": "key(shift-cmd-a)",
                "create link": "key(cmd-k)",
                "insert table": "key(alt-cmd-t)",
                "apply title": "key(shift-cmd-t)",
                "apply heading": "key(shift-cmd-h)",
                "apply subheading": "key(shift-cmd-j)",
                "apply body": "key(shift-cmd-b)",
                "apply mono": "key(shift-cmd-m)",
                "apply bullet": "key(shift-cmd-7)",
                "apply dash": "key(shift-cmd-8)",
                "apply number": "key(shift-cmd-9)",
                "apply checklist": "key(shift-cmd-l)",
                "increase font": "key(cmd-+)",
                "decrease font": "key(cmd--)",
                "line break": "key(ctrl-enter)",
                "mark": "key(shift-cmd-u)",
                "drag [line] down": "key('ctrl-cmd-down')",
                "drag [line] up": "key('ctrl-cmd-up')"
            }
        },
        {
            "file": "apps/protonmail/protonmail.talon",
            "context": "protonmail",
            "commands": {
                "open help": "key(?)",
                "[focus] search": "key(/)",
                "confirm active": "key(enter)",
                "close active": "key(escape)",
                "open command [palette]": "key(shift-space)",
                "new message": "key(c)",
                "send message": "key(ctrl-enter)",
                "save message": "key(ctrl-s)",
                "(go | jump) [to] inbox": "key(g)\nkey(i)",
                "(go | jump) [to] draft": "key(g)\nkey(d)",
                "(go | jump) [to] sent": "key(g)\nkey(s)",
                "(go | jump) [to] starred": "key(g)\nkey(.)",
                "(go | jump) [to] archive": "key(g)\nkey(a)",
                "(go | jump) [to] spam": "key(g)\nkey(x)",
                "(go | jump) [to] trash": "key(g)\nkey(t)",
                "(prev | previous) message": "key(up)",
                "next message": "key(down)",
                "exit message": "key(left)",
                "enter message": "key(right)",
                "(show | display) newer [message]": "key(k)",
                "(show | display) older [message]": "key(j)",
                "open message": "key(enter)",
                "go back": "key(escape)",
                "select all": "key(*)\nkey(a)",
                "(deselect | unselect) all": "key(*)\nkey(n)",
                "select [the] (message | conversation)": "key(x)",
                "mark [as] read": "key(r)",
                "mark [as] unread": "key(u)",
                "star (message | conversation)": "key(.)",
                "move to inbox": "key(i)",
                "move to trash": "key(t)",
                "move to archive": "key(a)",
                "move to spam": "key(s)",
                "reply to (message | conversation)": "key(shift-r)",
                "reply all [to] (message | conversation)": "key(shift-a)",
                "forward (message | conversation)": "key(shift-f)",
                "(prev | previous) contact": "key(up)",
                "next contact": "key(down)",
                "enter contact": "key(right)",
                "delete contact": "key(t)",
                "exit contact": "key(left)",
                "save contact": "key(ctrl-s)"
            }
        },
        {
            "file": "apps/github/github_web.talon",
            "context": "github web",
            "commands": {
                "focus search": "key(s)",
                "go to notifications": "insert(\"gn\")",
                "go to dashboard": "insert(\"gd\")",
                "(keyboard shortcuts show | show keyboard shortcuts)": "key(?)",
                "(selection move down | move selection down)": "key(j)",
                "(selection move up | move selection up)": "key(k)",
                "(selection toggle | toggle selection)": "key(x)",
                "(selection open | open selection)": "key(o)",
                "go to code": "insert(\"gc\")",
                "go to issues": "insert(\"gi\")",
                "go to pull requests": "insert(\"gp\")",
                "go to wiki": "insert(\"gw\")",
                "go to actions": "insert(\"ga\")",
                "go to projects": "insert(\"gb\")",
                "go to discussions": "insert(\"gg\")",
                "[web] editor open": "key(.)",
                "(file find | find file)": "key(t)",
                "jump to line": "key(l)",
                "((branch | tag) switch | switch (branch | tag))": "key(w)",
                "(url expand | expand url)": "key(y)",
                "(show | hide) comments": "key(i)",
                "blame view open": "key(b)",
                "(show | hide) annotations": "key(a)",
                "(issue create | create [an] issue)": "key(c)",
                "search (issues | [pull] requests)": "key(/)",
                "(filter by | edit) labels": "key(l)",
                "(filter by | edit) milestones": "key(m)",
                "(filter by | edit) assignee": "key(a)",
                "reply": "key(r)",
                "(comment submit | submit comment)": "key(ctrl-enter)",
                "(comment preview | preview comment)": "key(ctrl-shift-p)",
                "git hub full screen": "key(ctrl-shift-l)",
                "(form close | close form)": "key(escape)",
                "parent commit": "key(p)",
                "other parent commit": "key(o)",
                "mark as read": "key(y)",
                "(thread mute | mute thread)": "key(shift-m)",
                "(issue open | open issue)": "key(o)",
                "(issue create | create issue)": "key(c)",
                "reviewer request": "key(q)",
                "milestone set": "key(m)",
                "assignee set": "key(a)",
                "label set": "key(l)",
                "go to workflow": "insert(\"gf\")",
                "timestamps toggle": "key(shift-t)",
                "fullscreen toggle": "key(shift-f)"
            }
        },
        {
            "file": "apps/finder/finder.talon",
            "context": "finder",
            "commands": {
                "preferences": "key(cmd-,)",
                "options": "key(cmd-j)",
                "search": "key(cmd-alt-f)",
                "sort by none": "key(ctrl-alt-cmd-0)",
                "sort by name": "key(ctrl-alt-cmd-1)",
                "sort by kind": "key(ctrl-alt-cmd-2)",
                "sort by date opened": "key(ctrl-alt-cmd-3)",
                "sort by date added": "key(ctrl-alt-cmd-4)",
                "sort by date modified": "key(ctrl-alt-cmd-5)",
                "sort by size": "key(ctrl-alt-cmd-6)",
                "icon view": "key(cmd-1)",
                "column view": "key(cmd-3)",
                "list view": "key(cmd-2)",
                "gallery view": "key(cmd-4)",
                "copy path": "key(alt-cmd-c)",
                "trash it": "key(cmd-backspace)",
                "hide [finder]": "key(cmd-h)",
                "hide others": "app.window_hide_others()"
            }
        },
        {
            "file": "apps/chrome/chrome.talon",
            "context": "chrome",
            "commands": {
                "profile switch": "user.chrome_mod(\"shift-m\")"
            }
        },
        {
            "file": "apps/teams/teams_mac.talon",
            "context": "teams mac",
            "commands": {
                "open history": "key(super-shift-h)",
                "view shortcuts": "key(super-.)",
                "show shortcuts": "key(super-.)",
                "[go] [to] search": "key(super-e)",
                "show commands": "key(super-/)",
                "open filter": "key(super-shift-f)",
                "go to": "key(super-g)",
                "open (apps | applications)": "key(ctrl-`)",
                "[start] new chat": "key(super-n)",
                "open settings": "key(super-,)",
                "open help": "key(f1)",
                "close": "key(escape)",
                "reset": "key(escape)\nkey(escape)\nkey(escape)\nkey(escape)",
                "zoom reset": "key(super-0)",
                "open (act | activity)": "key(super-1)",
                "open chat": "key(super-2)",
                "open teams": "key(super-3)",
                "open calendar": "key(super-4)",
                "open calls": "key(super-5)",
                "open files": "key(super-6)",
                "[go] [to] (prev | previous) [list] item": "key(alt-up)",
                "[go] [to] next [list] item": "key(alt-down)",
                "move [selected] team up": "key(super-shift-up)",
                "move [selected] team down": "key(super-shift-down)",
                "[go] [to] (prev | previous) section": "key(super-shift-f6)",
                "[go] [to] next section": "key(super-f6)",
                "[go] [to] compose [box]": "key(shift-alt-c)",
                "[expand] compose [box]": "key(super-shift-x)",
                "send message": "key(super-enter)",
                "attach file": "key(shift-alt-o)",
                "attach local file": "key(shift-alt-o)\nsleep(100ms)\nkey(down)\nkey(space)",
                "[start] new line": "key(shift-enter)",
                "reply [to] [thread]": "key(shift-alt-r)",
                "accept video call": "key(super-shift-a)",
                "accept audio call": "key(super-shift-s)",
                "decline call": "key(super-shift-d)",
                "start audio call": "key(super-shift-c)",
                "start video call": "key(super-shift-u)",
                "toggle mute": "key(super-shift-m)",
                "starch screen share session": "key(super-shift-e)",
                "toggle video": "key(super-shift-o)",
                "[go] [to] sharing toolbar": "key(super-shift-space)",
                "decline screen share": "key(super-shift-d)",
                "accept screen share": "key(super-shift-a)",
                "schedule [a] meeting": "key(alt-shift-n)",
                "go to current time": "key(alt-.)",
                "go to (prev | previous) (day | week)": "key(super-alt-left)",
                "go to next (day | week)": "key(super-alt-right)",
                "view day": "key(super-alt-1)",
                "view work week": "key(super-alt-2)",
                "view week": "key(super-alt-3)",
                "(save | send) meeting request": "key(super-s)",
                "join [from] meeting [details]": "key(alt-shift-j)",
                "go to suggested time": "key(alt-shift-s)",
                "(raise | lower) hand": "key(super-shift-k)",
                "leave team meeting": "key(super-shift-h)"
            }
        },
        {
            "file": "apps/teams/teams.talon",
            "context": "teams",
            "commands": {
                "show shortcuts": "key(ctrl-.)",
                "[go] [to] search": "key(ctrl-e)",
                "show commands": "key(ctrl-/)",
                "open filter": "key(ctrl-shift-f)",
                "go to": "key(ctrl-g)",
                "open (apps | applications)": "key(ctrl-`)",
                "[start] new chat": "key(ctrl-n)",
                "open settings": "key(ctrl-,)",
                "open help": "key(f1)",
                "close": "key(escape)",
                "open activity": "key(ctrl-1)",
                "open chat": "key(ctrl-2)",
                "open teams": "key(ctrl-3)",
                "open calendar": "key(ctrl-4)",
                "open planner": "key(ctrl-5)",
                "open calls": "key(ctrl-6)",
                "open files": "key(ctrl-7)",
                "[go] [to] (prev | previous) [list] item": "key(alt-up)",
                "[go] [to] next [list] item": "key(alt-down)",
                "move [selected] team up": "key(ctrl-shift-up)",
                "move [selected] team down": "key(ctrl-shift-down)",
                "[go] [to] (prev | previous) section": "key(ctrl-shift-f6)",
                "[go] [to] next section": "key(ctrl-f6)",
                "[go] [to] compose [box]": "key(c)",
                "[expand] compose [box]": "key(ctrl-shift-x)",
                "send": "key(ctrl-enter)",
                "attach file": "key(ctrl-o)",
                "[start] new line": "key(shift-enter)",
                "reply [to] [thread]": "key(r)",
                "accept video call": "key(ctrl-shift-a)",
                "accept audio call": "key(ctrl-shift-s)",
                "decline call": "key(ctrl-shift-d)",
                "start audio call": "key(ctrl-shift-c)",
                "start video call": "key(ctrl-shift-u)",
                "toggle mute": "key(ctrl-shift-m)",
                "starch screen share session": "key(ctrl-shift-e)",
                "toggle video": "key(ctrl-shift-o)",
                "[go] [to] sharing toolbar": "key(ctrl-shift-space)",
                "decline screen share": "key(ctrl-shift-d)",
                "accept screen share": "key(ctrl-shift-a)",
                "schedule [a] meeting": "key(alt-shift-n)",
                "go to current time": "key(alt-.)",
                "go to (prev | previous) (day | week)": "key(ctrl-alt-left)",
                "go to next (day | week)": "key(ctrl-alt-right)",
                "view day": "key(ctrl-alt-1)",
                "view work week": "key(ctrl-alt-2)",
                "view week": "key(ctrl-alt-3)",
                "(safe | send) meeting request": "key(ctrl-s)",
                "join [from] meeting [details]": "key(alt-shift-j)",
                "go to suggested time": "key(alt-shift-s)"
            }
        },
        {
            "file": "apps/tmux/tmux.talon",
            "context": "tmux",
            "commands": {
                "go split <user.arrow_key>": "user.tmux_keybind(arrow_key)",
                "go split": "user.tmux_execute_command(\"display-panes -d 0\")"
            }
        },
        {
            "file": "apps/tmux/tmux_linux.talon",
            "context": "tmux linux",
            "commands": {
                "mux": "\"tmux \"",
                "mux new session": "insert(\"tmux new \")",
                "mux sessions": "key(ctrl-b)\nkey(s)",
                "mux name session": "key(ctrl-b)\nkey($)",
                "mux kill session": "insert(\"tmux kill-session -t \")",
                "mux new window": "key(ctrl-b)\nkey(c)",
                "mux window <number>": "key(ctrl-b)\nkey('{number}')",
                "mux previous window": "key(ctrl-b)\nkey(p)",
                "mux next window": "key(ctrl-b)\nkey(n)",
                "mux rename window": "key(ctrl-b)\nkey(,)",
                "mux close window": "key(ctrl-b)\nkey(&)",
                "mux split horizontal": "key(ctrl-b)\nkey(%)",
                "mux split vertical": "key(ctrl-b)\nkey(\")",
                "mux next pane": "key(ctrl-b)\nkey(o)",
                "mux move <user.arrow_key>": "key(ctrl-b)\nkey(arrow_key)",
                "mux close pane": "key(ctrl-b)\nkey(x)",
                "mux pane numbers": "key(ctrl-b)\nkey(q)"
            }
        },
        {
            "file": "apps/slack/slack_win.talon",
            "context": "slack win",
            "commands": {
                "workspace <number>": "key(\"ctrl-{number}\")",
                "(slack | lack) [channel] info": "key(ctrl-shift-i)",
                "focus (move | next)": "key(ctrl-`)",
                "(section | zone) [next]": "key(f6)",
                "(section | zone) (previous | last)": "key(shift-f6)",
                "(slack | lack) [direct] messages": "key(ctrl-shift-k)",
                "(slack | lack) threads": "key(ctrl-shift-t)",
                "(slack | lack) (history [next] | back | backward)": "key(alt-left)",
                "(slack | lack) forward": "key(alt-right)",
                "(element | bit) [next]": "key(tab)",
                "(element | bit) (previous | last)": "key(shift-tab)",
                "(slack | lack) (my stuff | activity)": "key(ctrl-shift-m)",
                "(slack | lack) directory": "key(ctrl-shift-e)",
                "(slack | lack) (starred [items] | stars)": "key(ctrl-shift-s)",
                "(slack | lack) unread [messages]": "key(ctrl-shift-a)",
                "grab left": "key(shift-up)",
                "grab right": "key(shift-down)",
                "add line": "key(shift-enter)",
                "(slack | lack) (react | reaction)": "key(ctrl-shift-\\)",
                "(insert command | commandify)": "key(ctrl-shift-c)",
                "insert code": "insert(\"```\")",
                "(slack | lack) (bull | bullet | bulleted) [list]": "key(ctrl-shift-8)",
                "(slack | lack) (number | numbered) [list]": "key(ctrl-shift-7)",
                "(slack | lack) (quotes | quotation)": "key(ctrl-shift-9)",
                "bold": "key(ctrl-b)",
                "(italic | italicize)": "key(ctrl-i)",
                "(strike | strikethrough)": "key(ctrl-shift-x)",
                "(slack | lack) snippet": "key(ctrl-shift-enter)",
                "([toggle] mute | unmute)": "key(m)",
                "(slack | lack) ([toggle] video)": "key(v)",
                "(slack | lack) invite": "key(a)",
                "(slack | lack) shortcuts": "key(ctrl-/)",
                "emote <user.text>": "\"{text}\"",
                "toggle left sidebar": "key(ctrl-shift-d)",
                "toggle right sidebar": "key(ctrl-.)",
                "(move | next) focus": "app.notify(\"please use the voice command 'focus next' instead of 'next focus'\")\nkey(ctrl-`)",
                "[next] (section | zone)": "app.notify(\"please use the voice command 'section next' instead of 'next section'\")\nkey(f6)",
                "(previous | last) (section | zone)": "app.notify(\"please use the voice command 'section last' instead of 'last section'\")\nkey(shift-f6)",
                "[next] (element | bit)": "app.notify(\"please use the voice command 'element next' instead of 'next element'\")\nkey(tab)",
                "(previous | last) (element | bit)": "app.notify(\"please use the voice command 'element last' instead of 'last element'\")\nkey(shift-tab)"
            }
        },
        {
            "file": "apps/slack/slack_mac.talon",
            "context": "slack mac",
            "commands": {
                "workspace <number>": "key(\"cmd-{number}\")",
                "(slack | lack) [channel] info": "key(cmd-shift-i)",
                "focus (move | next)": "key(ctrl-`)",
                "(section | zone) [next]": "key(f6)",
                "(section | zone) (previous | last)": "key(shift-f6)",
                "(slack | lack) [direct] messages": "key(cmd-shift-k)",
                "(slack | lack) threads": "key(cmd-shift-t)",
                "(slack | lack) (history [next] | back | backward)": "key(cmd-[)",
                "(slack | lack) forward": "key(cmd-])",
                "(element | bit) [next]": "key(tab)",
                "(element | bit) (previous | last)": "key(shift-tab)",
                "(slack | lack) (my stuff | activity)": "key(cmd-shift-m)",
                "(slack | lack) directory": "key(cmd-shift-e)",
                "(slack | lack) (starred [items] | stars)": "key(cmd-shift-s)",
                "(slack | lack) unread [messages]": "key(cmd-shift-a)",
                "(go | undo | toggle) full": "key(ctrl-cmd-f)",
                "grab left": "key(shift-up)",
                "grab right": "key(shift-down)",
                "add line": "key(shift-enter)",
                "(slack | lack) (slap | slaw | slapper)": "key(cmd-right shift-enter)",
                "(slack | lack) (react | reaction)": "key(cmd-shift-\\)",
                "(insert command | commandify)": "key(cmd-shift-c)",
                "insert link": "key(cmd-shift-u)",
                "insert code": "key(cmd-shift-alt-c)",
                "(slack | lack) (bull | bullet | bulleted) [list]": "key(cmd-shift-8)",
                "(slack | lack) (number | numbered) [list]": "key(cmd-shift-7)",
                "(slack | lack) (quotes | quotation)": "key(cmd-shift->)",
                "bold": "key(cmd-b)",
                "(italic | italicize)": "key(cmd-i)",
                "(strike | strikethrough)": "key(cmd-shift-x)",
                "(slack | lack) snippet": "key(cmd-shift-enter)",
                "([toggle] mute | unmute)": "key(m)",
                "(slack | lack) huddle": "key(cmd-shift-h)",
                "(slack | lack) ([toggle] video)": "key(v)",
                "(slack | lack) invite": "key(a)",
                "(slack | lack) shortcuts": "key(cmd-/)",
                "emote <user.text>": "\"{text}\"",
                "toggle left sidebar": "key(cmd-shift-d)",
                "toggle right sidebar": "key(cmd-.)",
                "(move | next) focus": "app.notify(\"please use the voice command 'focus next' instead of 'next focus'\")\nkey(ctrl-`)",
                "[next] (section | zone)": "app.notify(\"please use the voice command 'section next' instead of 'next section'\")\nkey(f6)",
                "(previous | last) (section | zone)": "app.notify(\"please use the voice command 'section last' instead of 'last section'\")\nkey(shift-f6)",
                "[next] (element | bit)": "app.notify(\"please use the voice command 'element next' instead of 'next element'\")\nkey(tab)",
                "(previous | last) (element | bit)": "app.notify(\"please use the voice command 'element last' instead of 'last element'\")\nkey(shift-tab)"
            }
        },
        {
            "file": "apps/apple_terminal/apple_terminal.talon",
            "context": "apple terminal",
            "commands": {
                "suspend": "key(ctrl-z)",
                "resume": "insert(\"fg\")\nkey(enter)"
            }
        },
        {
            "file": "apps/kubectl/kubectl.talon",
            "context": "kubectl",
            "commands": {
                "cube [control]": "\"kubectl \"",
                "cube create": "\"kubectl create \"",
                "cube expose": "\"kubectl expose \"",
                "cube run": "\"kubectl run \"",
                "cube set": "\"kubectl set \"",
                "cube run container": "\"kubectl run-container \"",
                "cube explain": "\"kubectl explain \"",
                "cube get": "\"kubectl get \"",
                "cube edit": "\"kubectl edit \"",
                "cube delete": "\"kubectl delete \"",
                "cube rollout": "\"kubectl rollout \"",
                "cube rolling update": "\"kubectl rolling-update \"",
                "cube scale": "\"kubectl scale \"",
                "cube auto scale": "\"kubectl autoscale \"",
                "cube certificate": "\"kubectl certificate \"",
                "cube top": "\"kubectl top \"",
                "cube drain": "\"kubectl drain \"",
                "cube taint": "\"kubectl taint \"",
                "cube (cord | cordon)": "\"kubectl cordon \"",
                "cube (uncord | uncordon)": "\"kubectl uncordon \"",
                "cube cluster (info | information)": "\"kubectl cluster-info \"",
                "cube describe": "\"kubectl describe \"",
                "cube logs": "\"kubectl logs \"",
                "cube attach": "\"kubectl attach \"",
                "cube exec": "\"kubectl exec \"",
                "cube port forward": "\"kubectl port-forward \"",
                "cube proxy": "\"kubectl proxy \"",
                "cube copy": "\"kubectl cp \"",
                "cube auth": "\"kubectl auth \"",
                "cube diff": "\"kubectl diff \"",
                "cube apply": "\"kubectl apply \"",
                "cube patch": "\"kubectl patch \"",
                "cube replace": "\"kubectl replace \"",
                "cube wait": "\"kubectl wait \"",
                "cube convert": "\"kubectl convert \"",
                "cube customize": "\"kubectl kustomize \"",
                "cube label": "\"kubectl label \"",
                "cube annotate": "\"kubectl annotate \"",
                "cube completion": "\"kubectl completion \"",
                "cube (interface | API)": "\"kubectl api \"",
                "cube interface resources": "\"kubectl api-resources \"",
                "cube interface versions": "\"kubectl api-versions \"",
                "cube config": "\"kubectl config \"",
                "cube help": "\"kubectl help \"",
                "cube plugin": "\"kubectl plugin \"",
                "cube version": "\"kubectl version \"",
                "cube {user.kubectl_action} [{user.kubectl_object}]": "insert(\"kubectl {kubectl_action} \")\ninsert(kubectl_object or \"\")",
                "cube detach": "key(\"ctrl-p\")\nkey(\"ctrl-q\")",
                "cube shell": "user.insert_between(\"kubectl exec -it \", \" -- /bin/bash\")"
            }
        },
        {
            "file": "apps/vscode/vscode.talon",
            "context": "vscode",
            "commands": {
                "window reload": "user.vscode(\"workbench.action.reloadWindow\")",
                "window close": "user.vscode(\"workbench.action.closeWindow\")",
                "please [<user.text>]": "user.vscode(\"workbench.action.showCommands\")\ninsert(user.text or \"\")",
                "bar explore": "user.vscode(\"workbench.view.explorer\")",
                "bar extensions": "user.vscode(\"workbench.view.extensions\")",
                "bar outline": "user.vscode(\"outline.focus\")",
                "bar run": "user.vscode(\"workbench.view.debug\")",
                "bar search": "user.vscode(\"workbench.view.search\")",
                "bar source": "user.vscode(\"workbench.view.scm\")",
                "bar test": "user.vscode(\"workbench.view.testing.focus\")",
                "bar switch": "user.vscode(\"workbench.action.toggleSidebarVisibility\")",
                "symbol hunt [<user.text>]": "user.vscode(\"workbench.action.gotoSymbol\")\nsleep(50ms)\ninsert(text or \"\")",
                "symbol hunt all [<user.text>]": "user.vscode(\"workbench.action.showAllSymbols\")\nsleep(50ms)\ninsert(text or \"\")",
                "panel control": "user.vscode(\"workbench.panel.repl.view.focus\")",
                "panel output": "user.vscode(\"workbench.panel.output.focus\")",
                "panel problems": "user.vscode(\"workbench.panel.markers.view.focus\")",
                "panel switch": "user.vscode(\"workbench.action.togglePanel\")",
                "panel terminal": "user.vscode(\"workbench.action.terminal.focus\")",
                "focus editor": "user.vscode(\"workbench.action.focusActiveEditorGroup\")",
                "show settings": "user.vscode(\"workbench.action.openGlobalSettings\")",
                "show settings json": "user.vscode(\"workbench.action.openSettingsJson\")",
                "show settings folder": "user.vscode(\"workbench.action.openFolderSettings\")",
                "show settings folder json": "user.vscode(\"workbench.action.openFolderSettingsFile\")",
                "show settings workspace": "user.vscode(\"workbench.action.openWorkspaceSettings\")",
                "show settings workspace json": "user.vscode(\"workbench.action.openWorkspaceSettingsFile\")",
                "show shortcuts": "user.vscode(\"workbench.action.openGlobalKeybindings\")",
                "show shortcuts json": "user.vscode(\"workbench.action.openGlobalKeybindingsFile\")",
                "show snippets": "user.vscode(\"workbench.action.openSnippets\")",
                "centered switch": "user.vscode(\"workbench.action.toggleCenteredLayout\")",
                "fullscreen switch": "user.vscode(\"workbench.action.toggleFullScreen\")",
                "theme switch": "user.vscode(\"workbench.action.selectTheme\")",
                "wrap switch": "user.vscode(\"editor.action.toggleWordWrap\")",
                "zen switch": "user.vscode(\"workbench.action.toggleZenMode\")",
                "file hunt [<user.text>]": "user.vscode(\"workbench.action.quickOpen\")\nsleep(50ms)\ninsert(text or \"\")",
                "file hunt (pace | paste)": "user.vscode(\"workbench.action.quickOpen\")\nsleep(50ms)\nedit.paste()",
                "file copy name": "user.vscode(\"fileutils.copyFileName\")",
                "file copy path": "user.vscode(\"copyFilePath\")",
                "file copy local [path]": "user.vscode(\"copyRelativeFilePath\")",
                "file create sibling": "user.vscode_and_wait(\"explorer.newFile\")",
                "file create": "user.vscode(\"workbench.action.files.newUntitledFile\")",
                "file create relative": "user.vscode(\"fileutils.newFile\")",
                "file create root": "user.vscode(\"fileutils.newFileAtRoot\")",
                "file rename": "user.vscode(\"fileutils.renameFile\")\nsleep(150ms)",
                "file move": "user.vscode(\"fileutils.moveFile\")\nsleep(150ms)",
                "file clone": "user.vscode(\"fileutils.duplicateFile\")\nsleep(150ms)",
                "file delete": "user.vscode(\"fileutils.removeFile\")\nsleep(150ms)",
                "file open folder": "user.vscode(\"revealFileInOS\")",
                "file reveal": "user.vscode(\"workbench.files.action.showActiveFileInExplorer\")",
                "save ugly": "user.vscode(\"workbench.action.files.saveWithoutFormatting\")",
                "suggest show": "user.vscode(\"editor.action.triggerSuggest\")",
                "hint show": "user.vscode(\"editor.action.triggerParameterHints\")",
                "definition show": "user.vscode(\"editor.action.revealDefinition\")",
                "definition peek": "user.vscode(\"editor.action.peekDefinition\")",
                "definition side": "user.vscode(\"editor.action.revealDefinitionAside\")",
                "references show": "user.vscode(\"editor.action.goToReferences\")",
                "hierarchy peek": "user.vscode(\"editor.showCallHierarchy\")",
                "references find": "user.vscode(\"references-view.find\")",
                "format that": "user.vscode(\"editor.action.formatDocument\")",
                "format selection": "user.vscode(\"editor.action.formatSelection\")",
                "imports fix": "user.vscode(\"editor.action.organizeImports\")",
                "problem next": "user.vscode(\"editor.action.marker.nextInFiles\")",
                "problem last": "user.vscode(\"editor.action.marker.prevInFiles\")",
                "problem fix": "user.vscode(\"problems.action.showQuickFixes\")",
                "rename that": "user.vscode(\"editor.action.rename\")",
                "refactor that": "user.vscode(\"editor.action.refactor\")",
                "whitespace trim": "user.vscode(\"editor.action.trimTrailingWhitespace\")",
                "language switch": "user.vscode(\"workbench.action.editor.changeLanguageMode\")",
                "refactor rename": "user.vscode(\"editor.action.rename\")",
                "refactor this": "user.vscode(\"editor.action.refactor\")",
                "(go declaration | follow)": "user.vscode(\"editor.action.revealDefinition\")",
                "go back": "user.vscode(\"workbench.action.navigateBack\")",
                "go forward": "user.vscode(\"workbench.action.navigateForward\")",
                "go implementation": "user.vscode(\"editor.action.goToImplementation\")",
                "go type": "user.vscode(\"editor.action.goToTypeDefinition\")",
                "go usage": "user.vscode(\"references-view.find\")",
                "go recent [<user.text>]": "user.vscode(\"workbench.action.openRecent\")\nsleep(50ms)\ninsert(text or \"\")\nsleep(250ms)",
                "go edit": "user.vscode(\"workbench.action.navigateToLastEditLocation\")",
                "go marks": "user.vscode(\"workbench.view.extension.bookmarks\")",
                "toggle mark": "user.vscode(\"bookmarks.toggle\")",
                "go next mark": "user.vscode(\"bookmarks.jumpToNext\")",
                "go last mark": "user.vscode(\"bookmarks.jumpToPrevious\")",
                "close other tabs": "user.vscode(\"workbench.action.closeOtherEditors\")",
                "close all tabs": "user.vscode(\"workbench.action.closeAllEditors\")",
                "close tabs way right": "user.vscode(\"workbench.action.closeEditorsToTheRight\")",
                "close tabs way left": "user.vscode(\"workbench.action.closeEditorsToTheLeft\")",
                "fold that": "user.vscode(\"editor.fold\")",
                "unfold that": "user.vscode(\"editor.unfold\")",
                "fold those": "user.vscode(\"editor.foldAllMarkerRegions\")",
                "unfold those": "user.vscode(\"editor.unfoldRecursively\")",
                "fold all": "user.vscode(\"editor.foldAll\")",
                "unfold all": "user.vscode(\"editor.unfoldAll\")",
                "fold comments": "user.vscode(\"editor.foldAllBlockComments\")",
                "fold one": "user.vscode(\"editor.foldLevel1\")",
                "fold two": "user.vscode(\"editor.foldLevel2\")",
                "fold three": "user.vscode(\"editor.foldLevel3\")",
                "fold four": "user.vscode(\"editor.foldLevel4\")",
                "fold five": "user.vscode(\"editor.foldLevel5\")",
                "fold six": "user.vscode(\"editor.foldLevel6\")",
                "fold seven": "user.vscode(\"editor.foldLevel7\")",
                "git branch": "user.vscode(\"git.branchFrom\")",
                "git branch this": "user.vscode(\"git.branch\")",
                "git checkout [<user.text>]": "user.vscode(\"git.checkout\")\nsleep(50ms)\ninsert(text or \"\")",
                "git commit [<user.text>]": "user.vscode(\"git.commitStaged\")\nsleep(100ms)\nuser.insert_formatted(text or \"\", \"CAPITALIZE_FIRST_WORD\")",
                "git commit undo": "user.vscode(\"git.undoCommit\")",
                "git commit amend": "user.vscode(\"git.commitStagedAmend\")",
                "git diff": "user.vscode(\"git.openChange\")",
                "git fetch": "user.vscode(\"git.fetch\")",
                "git fetch all": "user.vscode(\"git.fetchAll\")",
                "git ignore": "user.vscode(\"git.ignore\")",
                "git merge": "user.vscode(\"git.merge\")",
                "git output": "user.vscode(\"git.showOutput\")",
                "git pull": "user.vscode(\"git.pullRebase\")",
                "git push": "user.vscode(\"git.push\")",
                "git push focus": "user.vscode(\"git.pushForce\")",
                "git rebase abort": "user.vscode(\"git.rebaseAbort\")",
                "git reveal": "user.vscode(\"git.revealInExplorer\")",
                "git revert": "user.vscode(\"git.revertChange\")",
                "git stash": "user.vscode(\"git.stash\")",
                "git stash pop": "user.vscode(\"git.stashPop\")",
                "git status": "user.vscode(\"workbench.scm.focus\")",
                "git stage": "user.vscode(\"git.stage\")",
                "git stage all": "user.vscode(\"git.stageAll\")",
                "git sync": "user.vscode(\"git.sync\")",
                "git unstage": "user.vscode(\"git.unstage\")",
                "git unstage all": "user.vscode(\"git.unstageAll\")",
                "pull request": "user.vscode(\"pr.create\")",
                "change next": "key(alt-f5)",
                "change last": "key(shift-alt-f5)",
                "test run": "user.vscode(\"testing.runAtCursor\")",
                "test run file": "user.vscode(\"testing.runCurrentFile\")",
                "test run all": "user.vscode(\"testing.runAll\")",
                "test run failed": "user.vscode(\"testing.reRunFailTests\")",
                "test run last": "user.vscode(\"testing.reRunLastRun\")",
                "test debug": "user.vscode(\"testing.debugAtCursor\")",
                "test debug file": "user.vscode(\"testing.debugCurrentFile\")",
                "test debug all": "user.vscode(\"testing.debugAll\")",
                "test debug failed": "user.vscode(\"testing.debugFailTests\")",
                "test debug last": "user.vscode(\"testing.debugLastRun\")",
                "test cancel": "user.vscode(\"testing.cancelRun\")",
                "break point": "user.vscode(\"editor.debug.action.toggleBreakpoint\")",
                "step over": "user.vscode(\"workbench.action.debug.stepOver\")",
                "debug step into": "user.vscode(\"workbench.action.debug.stepInto\")",
                "debug step out [of]": "user.vscode(\"workbench.action.debug.stepOut\")",
                "debug start": "user.vscode(\"workbench.action.debug.start\")",
                "debug pause": "user.vscode(\"workbench.action.debug.pause\")",
                "debug stopper": "user.vscode(\"workbench.action.debug.stop\")",
                "debug continue": "user.vscode(\"workbench.action.debug.continue\")",
                "debug restart": "user.vscode(\"workbench.action.debug.restart\")",
                "debug console": "user.vscode(\"workbench.debug.action.toggleRepl\")",
                "debug clean": "user.vscode(\"workbench.debug.panel.action.clearReplAction\")",
                "terminal external": "user.vscode(\"workbench.action.terminal.openNativeConsole\")",
                "terminal new": "user.vscode(\"workbench.action.terminal.new\")",
                "terminal next": "user.vscode(\"workbench.action.terminal.focusNext\")",
                "terminal last": "user.vscode(\"workbench.action.terminal.focusPrevious\")",
                "terminal split": "user.vscode(\"workbench.action.terminal.split\")",
                "terminal zoom": "user.vscode(\"workbench.action.toggleMaximizedPanel\")",
                "terminal trash": "user.vscode(\"workbench.action.terminal.kill\")",
                "terminal toggle": "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")",
                "terminal scroll up": "user.vscode(\"workbench.action.terminal.scrollUp\")",
                "terminal scroll down": "user.vscode(\"workbench.action.terminal.scrollDown\")",
                "terminal <number_small>": "user.vscode_terminal(number_small)",
                "copy line down": "user.vscode(\"editor.action.copyLinesDownAction\")",
                "copy line up": "user.vscode(\"editor.action.copyLinesUpAction\")",
                "select less": "user.vscode(\"editor.action.smartSelect.shrink\")",
                "select (more | this)": "user.vscode(\"editor.action.smartSelect.expand\")",
                "minimap": "user.vscode(\"editor.action.toggleMinimap\")",
                "maximize": "user.vscode(\"workbench.action.minimizeOtherEditors\")",
                "restore": "user.vscode(\"workbench.action.evenEditorWidths\")",
                "select breadcrumb": "user.vscode(\"breadcrumbs.focusAndSelect\")",
                "replace here": "user.replace(\"\")\nkey(cmd-alt-l)",
                "hover show": "user.vscode(\"editor.action.showHover\")",
                "join lines": "user.vscode(\"editor.action.joinLines\")",
                "full screen": "user.vscode(\"workbench.action.toggleFullScreen\")",
                "curse undo": "user.vscode(\"cursorUndo\")",
                "select word": "user.vscode(\"editor.action.addSelectionToNextFindMatch\")",
                "skip word": "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")",
                "cell next": "user.vscode(\"notebook.focusNextEditor\")",
                "cell last": "user.vscode(\"notebook.focusPreviousEditor\")",
                "cell run above": "user.vscode(\"notebook.cell.executeCellsAbove\")",
                "cell run": "user.vscode(\"notebook.cell.execute\")",
                "install local": "user.vscode(\"workbench.extensions.action.installVSIX\")",
                "preview markdown": "user.vscode(\"markdown.showPreview\")"
            }
        },
        {
            "file": "apps/signal/signal_linux.talon",
            "context": "signal linux",
            "commands": {
                "show shortcuts": "key(\"ctrl-/\")",
                "(next | nav | navigate) [by] (sec | section)": "key(\"ctrl-t\")",
                "(prev | previous) (chat | conversation)": "key(\"alt-down\")",
                "next (chat | conversation)": "key(\"alt-up\")",
                "(prev | previous) unread": "key(\"alt-shift-down\")",
                "next unread": "key(\"alt-shift-up\")",
                "[open] (pref | preferences)": "key(\"ctrl-,\")",
                "open conversation menu": "key(\"ctrl-shift-l\")",
                "search": "key(\"ctrl-f\")",
                "search chat": "key(\"ctrl-shift-f\")",
                "focus (chat | composer)": "key(\"ctrl-shift-t\")",
                "open media": "key(\"ctrl-shift-m\")",
                "open emoji": "key(\"ctrl-shift-j\")",
                "open sticker": "key(\"ctrl-shift-s\")",
                "record [voice] message": "key(\"ctrl-shift-v\")",
                "archive chat": "key(\"ctrl-shift-a\")",
                "unarchive chat": "key(\"ctrl-shift-u\")",
                "(first | top) message": "key(\"ctrl-up\")",
                "(last | bottom) message": "key(\"ctrl-down\")",
                "close chat": "key(\"ctrl-shift-c\")",
                "send it": "key(\"enter\")",
                "message details": "key(\"ctrl-d\")",
                "reply [message]": "key(\"ctrl-shift-r\")",
                "react [message]": "key(\"ctrl-shift-e\")",
                "save attachment": "key(\"ctrl-s\")",
                "delete [message]": "key(\"ctrl-shift-d\")",
                "send message": "key(\"ctrl-enter\")",
                "expand chat": "key(\"ctrl-shift-x\")",
                "attach [file]": "key(\"ctrl-u\")",
                "remove [link] preview": "key(\"ctrl-p\")",
                "remove [link] attachment": "key(\"ctrl-shift-p\")"
            }
        },
        {
            "file": "apps/termite/termite.talon",
            "context": "termite",
            "commands": {
                "shell yank": "key(\"y\")",
                "shell select": "key(\"ctrl-shift-space\")",
                "shell insert": "key(\"escape\")",
                "visual line": "key(\"v\")",
                "visual line mode": "key(\"V\")"
            }
        },
        {
            "file": "apps/git/git_add_patch.talon",
            "context": "git add patch",
            "commands": {
                "yank": "key(y)\nkey(enter)",
                "near": "key(n)\nkey(enter)",
                "quench": "key(q)\nkey(enter)",
                "drum": "key(d)\nkey(enter)",
                "air": "key(a)\nkey(enter)"
            }
        },
        {
            "file": "apps/git/git.talon",
            "context": "git",
            "commands": {
                "git {user.git_command} [<user.git_arguments>]": "args = git_arguments or \"\"\n\"git {git_command}{args} \"",
                "git commit [<user.git_arguments>] message [<user.prose>]": "args = git_arguments or \"\"\nmessage = prose or \"\"\nuser.insert_between(\"git commit{args} --message '{message}\", \"'\")",
                "git stash [push] [<user.git_arguments>] message [<user.prose>]": "args = git_arguments or \"\"\nmessage = prose or \"\"\nuser.insert_between(\"git stash push{args} --message '{message}\", \"'\")",
                "git status": "\"git status\\n\"",
                "git add patch": "\"git add --patch\\n\"",
                "git show head": "\"git show HEAD\\n\"",
                "git diff": "\"git diff\\n\"",
                "git diff (cached | cashed)": "\"git diff --cached\\n\"",
                "git clone clipboard": "insert(\"git clone \")\nedit.paste()\nkey(enter)",
                "git diff highlighted": "edit.copy()\ninsert(\"git diff \")\nedit.paste()\nkey(enter)",
                "git diff clipboard": "insert(\"git diff \")\nedit.paste()\nkey(enter)",
                "git add highlighted": "edit.copy()\ninsert(\"git add \")\nedit.paste()\nkey(enter)",
                "git add clipboard": "insert(\"git add \")\nedit.paste()\nkey(enter)",
                "git commit highlighted": "edit.copy()\ninsert(\"git add \")\nedit.paste()\ninsert(\"\\ngit commit\\n\")"
            }
        },
        {
            "file": "apps/thunderbird/thunderbird.talon",
            "context": "thunderbird",
            "commands": {
                "go (mails | messages | inbox)": "user.tab_jump(1)",
                "go (calendar | lightning)": "user.thunderbird_mod(\"shift-c\")",
                "go tasks": "user.thunderbird_mod(\"shift-d\")",
                "(open address [book] | address book | open contacts)": "user.thunderbird_mod(\"shift-b\")",
                "dev tools": "user.thunderbird_mod(\"shift-i\")"
            }
        },
        {
            "file": "apps/thunderbird/thunderbird_inbox.talon",
            "context": "thunderbird inbox",
            "commands": {
                "(mail | message) open": "key(enter)",
                "(mail | message) (up | last)": "key(b)",
                "(mail | message) (down | next)": "key(f)",
                "unread [mail | message] (up | last)": "key(p)",
                "unread [mail | message] (down | next)": "key(n)",
                "go home": "key(alt-home)",
                "toggle (mail | message) [pane]": "key(f8)",
                "(mail | message) (favorite | unfavorite)": "key(s)",
                "(mail | message) (read | unread)": "key(m)",
                "(mail | message) (watch | unwatch)": "key(w)",
                "(mail | message) (ignore | unignore)": "key(k)",
                "(mail | message) suspend": "key(c)",
                "(mail | message) spam": "key(j)",
                "(mail | message) new": "user.thunderbird_mod(\"n\")",
                "(mail | message) edit": "user.thunderbird_mod(\"e\")",
                "(mail | message) reply sender": "user.thunderbird_mod(\"r\")",
                "(mail | message) reply all": "user.thunderbird_mod(\"shift-r\")",
                "(mail | message) reply list": "user.thunderbird_mod(\"shift-l\")",
                "(mail | message) forward": "user.thunderbird_mod(\"l\")",
                "(mail | message) delete": "key(delete)",
                "(mail | message) archive": "key(a)",
                "(mail | message) save": "user.thunderbird_mod(\"s\")",
                "(mail | message) print": "user.thunderbird_mod(\"p\")"
            }
        },
        {
            "file": "apps/thunderbird/thunderbird_contacts.talon",
            "context": "thunderbird contacts",
            "commands": {
                "contact new": "user.thunderbird_mod(\"n\")",
                "contact edit": "user.thunderbird_mod(\"i\")",
                "contact delete": "key(delete)",
                "contact print": "user.thunderbird_mod(\"p\")",
                "contact message": "user.thunderbird_mod(\"m\")",
                "contact up": "key(up)",
                "contact down": "key(down)"
            }
        },
        {
            "file": "apps/thunderbird/thunderbird_tasks.talon",
            "context": "thunderbird tasks",
            "commands": {
                "event new": "user.thunderbird_mod(\"i\")",
                "task new": "user.thunderbird_mod(\"d\")",
                "(task | event) delete": "key(delete)",
                "toggle today": "key(f11)"
            }
        }
    ]
}
{
  "commnad_group": {
    "file_paths": {
      "code/keys.py": {
        "context": {
          "user.letter": {
            "action": {
              "a": {
                "spoken_form": "air",
                "alternate_sopken_forms": [
                  "alfa",
                  "apple",
                  "arch",
                  "arm",
                  "alpha",
                  "amp"
                ]
              },
              "b": {
                "spoken_form": "bat",
                "alternate_sopken_forms": [
                  "back",
                  "beat",
                  "bar",
                  "brav",
                  "brov",
                  "blue",
                  "bravo",
                  "bork"
                ]
              },
              "c": {
                "spoken_form": "cap",
                "alternate_sopken_forms": [
                  "change",
                  "char",
                  "chair",
                  "caf",
                  "charlie"
                ]
              },
              "d": {
                "spoken_form": "drum",
                "alternate_sopken_forms": ["delta", "dip", "dell"]
              },
              "e": {
                "spoken_form": "each",
                "alternate_sopken_forms": ["echo", "ear", "etch", "eve"]
              },
              "f": {
                "spoken_form": "fine",
                "alternate_sopken_forms": [
                  "faint",
                  "foxy",
                  "fin",
                  "fomp",
                  "fox",
                  "foxtrot"
                ]
              },
              "g": {
                "spoken_form": "gust",
                "alternate_sopken_forms": ["golf", "gone", "goof", "gun"]
              },
              "h": {
                "spoken_form": "harp",
                "alternate_sopken_forms": ["hotel", "hat", "house", "hark"]
              },
              "i": {
                "spoken_form": "sit",
                "alternate_sopken_forms": [
                  "ink",
                  "inside",
                  "ivy",
                  "ice",
                  "eek",
                  "spit",
                  "india",
                  "ilk"
                ]
              },
              "j": {
                "spoken_form": "jury",
                "alternate_sopken_forms": [
                  "jane",
                  "jam",
                  "julia",
                  "jail",
                  "jinks",
                  "july",
                  "johnny",
                  "jort"
                ]
              },
              "k": {
                "spoken_form": "crunch",
                "alternate_sopken_forms": [
                  "kick",
                  "kilo",
                  "koop",
                  "keel",
                  "killroy",
                  "carrot"
                ]
              },
              "l": {
                "spoken_form": "look",
                "alternate_sopken_forms": ["lima", "lug"]
              },
              "m": {
                "spoken_form": "made",
                "alternate_sopken_forms": ["mike", "mad", "man", "mowsh"]
              },
              "n": {
                "spoken_form": "near",
                "alternate_sopken_forms": [
                  "next",
                  "nova",
                  "nerb",
                  "nose",
                  "novel"
                ]
              },
              "o": {
                "spoken_form": "odd",
                "alternate_sopken_forms": [
                  "ox",
                  "over",
                  "oscar",
                  "orc",
                  "oats",
                  "ork",
                  "oak",
                  "own",
                  "out"
                ]
              },
              "p": {
                "spoken_form": "pit",
                "alternate_sopken_forms": [
                  "papa",
                  "pill",
                  "prime",
                  "peck",
                  "pooch",
                  "pal"
                ]
              },
              "q": {
                "spoken_form": "quench",
                "alternate_sopken_forms": ["quebec", "queen", "quash"]
              },
              "r": {
                "spoken_form": "red",
                "alternate_sopken_forms": ["romeo", "risk", "rosh"]
              },
              "s": {
                "spoken_form": "sun",
                "alternate_sopken_forms": [
                  "search",
                  "sing",
                  "sally",
                  "spun",
                  "souk",
                  "sierra",
                  "sad"
                ]
              },
              "t": {
                "spoken_form": "trap",
                "alternate_sopken_forms": ["tango", "teek"]
              },
              "u": {
                "spoken_form": "urge",
                "alternate_sopken_forms": ["uniform", "unks", "hut"]
              },
              "v": {
                "spoken_form": "vest",
                "alternate_sopken_forms": ["victor", "verge", "fish"]
              },
              "w": {
                "spoken_form": "whale",
                "alternate_sopken_forms": [
                  "weapon",
                  "whiskey",
                  "word",
                  "well",
                  "wet",
                  "whip",
                  "win",
                  "whisky",
                  "womp"
                ]
              },
              "x": {
                "spoken_form": "plex",
                "alternate_sopken_forms": ["trex"]
              },
              "y": {
                "spoken_form": "yank",
                "alternate_sopken_forms": [
                  "yolo",
                  "yell",
                  "york",
                  "yang",
                  "yankee",
                  "yord"
                ]
              },
              "z": {
                "spoken_form": "zip",
                "alternate_sopken_forms": [
                  "zulu",
                  "easy",
                  "zooch",
                  "zeta",
                  "zed",
                  "zoo",
                  "zuko"
                ]
              }
            }
          },
          "user.number_key": {
            "action": {
              "0": { "spoken_form": "zero", "alternate_sopken_forms": [] },
              "1": { "spoken_form": "one", "alternate_sopken_forms": [] },
              "2": { "spoken_form": "two", "alternate_sopken_forms": [] },
              "3": { "spoken_form": "three", "alternate_sopken_forms": [] },
              "4": { "spoken_form": "four", "alternate_sopken_forms": [] },
              "5": { "spoken_form": "five", "alternate_sopken_forms": [] },
              "6": { "spoken_form": "six", "alternate_sopken_forms": [] },
              "7": { "spoken_form": "seven", "alternate_sopken_forms": [] },
              "8": {
                "spoken_form": "eight",
                "alternate_sopken_forms": ["bubbles"]
              },
              "9": { "spoken_form": "nine", "alternate_sopken_forms": [] }
            }
          },
          "user.modifier_key": {
            "action": {
              "alt": {
                "spoken_form": "option",
                "alternate_sopken_forms": ["alter", "meta"]
              },
              "ctrl": {
                "spoken_form": "control",
                "alternate_sopken_forms": ["troll", "fender", "cone"]
              },
              "shift": {
                "spoken_form": "shift",
                "alternate_sopken_forms": ["sky", "ship"]
              },
              "super": {
                "spoken_form": "super",
                "alternate_sopken_forms": ["soup", "superduper", "win"]
              },
              "cmd": {
                "spoken_form": "command",
                "alternate_sopken_forms": [
                  "taste",
                  "gibson",
                  "many",
                  "mando",
                  "alter",
                  "man"
                ]
              }
            }
          },
          "user.special_key": {
            "action": {
              "end": {
                "spoken_form": "end",
                "alternate_sopken_forms": ["push", "tail", "end key", "ending"]
              },
              "enter": {
                "spoken_form": "enter",
                "alternate_sopken_forms": ["clap", "shock", "skunks", "return"]
              },
              "escape": {
                "spoken_form": "escape",
                "alternate_sopken_forms": [
                  "scrape",
                  "cape",
                  "scape",
                  "skip",
                  "scatter"
                ]
              },
              "home": {
                "spoken_form": "home",
                "alternate_sopken_forms": ["pull", "head", "home key"]
              },
              "insert": {
                "spoken_form": "insert",
                "alternate_sopken_forms": []
              },
              "pagedown": {
                "spoken_form": "page down",
                "alternate_sopken_forms": []
              },
              "pageup": {
                "spoken_form": "page up",
                "alternate_sopken_forms": []
              },
              "space": {
                "spoken_form": "space",
                "alternate_sopken_forms": [
                  "void",
                  "ta",
                  "space it",
                  "sa",
                  "ace",
                  "spacebar",
                  "spacing",
                  "space bar"
                ]
              },
              "tab": {
                "spoken_form": "tab",
                "alternate_sopken_forms": [
                  "tabber",
                  "jump",
                  "tabby",
                  "taby",
                  "tab key",
                  "dent",
                  "pop"
                ]
              },
              "backspace": {
                "spoken_form": "delete",
                "alternate_sopken_forms": [
                  "chuck",
                  "junk",
                  "scratch",
                  "backspace",
                  "ba",
                  "rem",
                  "smack",
                  "shit",
                  "wipe",
                  "white"
                ]
              },
              "delete": {
                "spoken_form": "forward delete",
                "alternate_sopken_forms": [
                  "kill",
                  "drill",
                  "spunk",
                  "junk",
                  "nuke",
                  "delete key",
                  "strike",
                  "eat",
                  "del",
                  "delhi"
                ]
              }
            }
          },
          "user.symbol_key": {
            "action": {
              ".": {
                "spoken_form": "full stop",
                "alternate_sopken_forms": ["buried"]
              },
              "'": {
                "spoken_form": "apostrophe",
                "alternate_sopken_forms": [
                  "single",
                  "single quote",
                  "pie quote",
                  "sing quote",
                  "trophy",
                  "sinquoute",
                  "smote",
                  "tick"
                ]
              },
              "?": {
                "spoken_form": "question mark",
                "alternate_sopken_forms": ["query", "quest", "?", "question"]
              },
              "[": {
                "spoken_form": "square",
                "alternate_sopken_forms": [
                  "lack",
                  "lacker",
                  "open bracket",
                  "[",
                  "lobe",
                  "open square",
                  "lester",
                  "bracket",
                  "left bracket",
                  "locker"
                ]
              },
              "]": {
                "spoken_form": "right square",
                "alternate_sopken_forms": [
                  "close square",
                  "rack",
                  "rare",
                  "racker",
                  "close bracket",
                  "]",
                  "robe",
                  "fester",
                  "right bracket",
                  "squad",
                  "rocker"
                ]
              },
              "/": {
                "spoken_form": "forward slash",
                "alternate_sopken_forms": ["stroke", "/"]
              },
              "\\": {
                "spoken_form": "backslash",
                "alternate_sopken_forms": [
                  "backstroke",
                  "backer",
                  "whack",
                  "quack",
                  "stroke"
                ]
              },
              "-": {
                "spoken_form": "hyphen",
                "alternate_sopken_forms": ["hyphen", "high and"]
              },
              "=": {
                "spoken_form": "equals",
                "alternate_sopken_forms": ["equal", "equit"]
              },
              "+": {
                "spoken_form": "plus",
                "alternate_sopken_forms": ["crop"]
              },
              "~": {
                "spoken_form": "tilde",
                "alternate_sopken_forms": ["squiggle", "wave"]
              },
              "!": {
                "spoken_form": "exclamation point",
                "alternate_sopken_forms": ["goodness", "!", "exclamation"]
              },
              "_": {
                "spoken_form": "underscore",
                "alternate_sopken_forms": [
                  "score",
                  "underscore",
                  "scout",
                  "under score"
                ]
              },
              "(": {
                "spoken_form": "left paren",
                "alternate_sopken_forms": [
                  "lace",
                  "bear",
                  "bracket",
                  "open bracket",
                  "L bracket",
                  "left bracket",
                  "leper",
                  "leap",
                  "(",
                  "open paren",
                  "open brand",
                  "open par",
                  "open parenthesis",
                  "bend",
                  "lub"
                ]
              },
              "{": {
                "spoken_form": "left bracket",
                "alternate_sopken_forms": [
                  "lack",
                  "bracket",
                  "left bracket",
                  "bracer",
                  "curly",
                  "left curly",
                  "lacer",
                  "open brace",
                  "lake",
                  "open curly",
                  "burl",
                  "lacky"
                ]
              },
              "}": {
                "spoken_form": "right bracket",
                "alternate_sopken_forms": [
                  "close brace",
                  "ace",
                  "race",
                  "rack",
                  "R bracket",
                  "right bracket",
                  "nose",
                  "R curly",
                  "right curly",
                  "racer",
                  "rake",
                  "close curly",
                  "curl",
                  "racky",
                  "R brace"
                ]
              },
              "<": {
                "spoken_form": "less than",
                "alternate_sopken_forms": [
                  "langle",
                  "L angle",
                  "open angle",
                  "luke",
                  "open fork"
                ]
              },
              ">": {
                "spoken_form": "greater than",
                "alternate_sopken_forms": [
                  "close angle",
                  "more than",
                  "wrangle",
                  "ruke",
                  "close fork"
                ]
              },
              "*": {
                "spoken_form": "asterisk",
                "alternate_sopken_forms": ["starling", "snow", "*", "splat"]
              },
              "#": {
                "spoken_form": "number sign",
                "alternate_sopken_forms": ["#", "number"]
              },
              "%": {
                "spoken_form": "percent sign",
                "alternate_sopken_forms": ["percy", "Percy", "perco", "cent"]
              },
              "^": {
                "spoken_form": "caret",
                "alternate_sopken_forms": ["tangle", "hat", "power"]
              },
              "&": { "spoken_form": "ampersand", "alternate_sopken_forms": [] },
              "|": {
                "spoken_form": "pipe",
                "alternate_sopken_forms": ["piper"]
              },
              "\"": {
                "spoken_form": "double quote",
                "alternate_sopken_forms": [
                  "double",
                  "doubt",
                  "da boat",
                  "quo",
                  "crunder",
                  "dubquote"
                ]
              },
              "$": {
                "spoken_form": "dollar sign",
                "alternate_sopken_forms": ["dolly", "doll"]
              },
              "£": {
                "spoken_form": "pound sign",
                "alternate_sopken_forms": []
              },
              "`": {
                "spoken_form": "grave",
                "alternate_sopken_forms": [
                  "brick",
                  "bee tick",
                  "be tick",
                  "tick",
                  "smite"
                ]
              },
              ",": {
                "spoken_form": "coma",
                "alternate_sopken_forms": [
                  "drip",
                  "coma",
                  "careful",
                  "come a",
                  "calm"
                ]
              },
              ";": {
                "spoken_form": "semicolon",
                "alternate_sopken_forms": ["semi", "semper", "wink"]
              },
              ":": {
                "spoken_form": "colon",
                "alternate_sopken_forms": [
                  "v dot",
                  "stack",
                  "the colon",
                  "deckel",
                  "corn",
                  "loan",
                  "cola",
                  "cot",
                  "caught",
                  "coal"
                ]
              },
              "@": {
                "spoken_form": "at sign",
                "alternate_sopken_forms": ["@", "swirl", "insta"]
              },
              ")": {
                "spoken_form": "right paren",
                "alternate_sopken_forms": [
                  "close paren",
                  "race",
                  "are paren",
                  "apple",
                  "R bracket",
                  "right bracket",
                  "close bracket",
                  "repper",
                  "reap",
                  ")",
                  "close brand",
                  "close par",
                  "right pra",
                  "close parenthesis",
                  "rend",
                  "rub"
                ]
              }
            }
          },
          "user.arrow_key": {
            "action": {
              "down": { "spoken_form": "down", "alternate_sopken_forms": [] },
              "left": {
                "spoken_form": "left",
                "alternate_sopken_forms": ["lef"]
              },
              "right": { "spoken_form": "right", "alternate_sopken_forms": [] },
              "up": { "spoken_form": "up", "alternate_sopken_forms": [] }
            }
          },
          "user.punctuation": {
            "action": {
              "`": {
                "spoken_form": "grave",
                "alternate_sopken_forms": ["be tick", "tick"]
              },
              ",": {
                "spoken_form": "coma",
                "alternate_sopken_forms": ["coma", "careful", "come a", "calm"]
              },
              ".": {
                "spoken_form": "full stop",
                "alternate_sopken_forms": ["buried", "dot"]
              },
              ";": {
                "spoken_form": "semicolon",
                "alternate_sopken_forms": ["semi", "semper"]
              },
              ":": {
                "spoken_form": "colon",
                "alternate_sopken_forms": [
                  "v dot",
                  "the colon",
                  "deckel",
                  "corn"
                ]
              },
              "/": {
                "spoken_form": "forward slash",
                "alternate_sopken_forms": ["slash"]
              },
              "?": {
                "spoken_form": "question mark",
                "alternate_sopken_forms": ["query", "?", "quest", "question"]
              },
              "!": {
                "spoken_form": "exclamation point",
                "alternate_sopken_forms": [
                  "goodness",
                  "!",
                  "bang",
                  "exclamation"
                ]
              },
              "*": {
                "spoken_form": "asterisk",
                "alternate_sopken_forms": ["*"]
              },
              "#": {
                "spoken_form": "number sign",
                "alternate_sopken_forms": ["#", "hash"]
              },
              "%": {
                "spoken_form": "percent sign",
                "alternate_sopken_forms": ["Percy"]
              },
              "@": {
                "spoken_form": "at sign",
                "alternate_sopken_forms": ["@", "swirl"]
              },
              "&": {
                "spoken_form": "ampersand",
                "alternate_sopken_forms": ["amper"]
              },
              "$": {
                "spoken_form": "dollar sign",
                "alternate_sopken_forms": ["dolly"]
              },
              "£": {
                "spoken_form": "pound sign",
                "alternate_sopken_forms": []
              },
              "-": { "spoken_form": "hyphen", "alternate_sopken_forms": [] },
              "(": {
                "spoken_form": "left paren",
                "alternate_sopken_forms": []
              },
              ")": {
                "spoken_form": "right paren",
                "alternate_sopken_forms": []
              }
            }
          },
          "user.function_key": {
            "action": {
              "f1": {
                "spoken_form": "F one",
                "alternate_sopken_forms": [
                  "f one",
                  "F key one",
                  "funk one",
                  "fun one"
                ]
              },
              "f2": {
                "spoken_form": "F two",
                "alternate_sopken_forms": [
                  "f two",
                  "F key two",
                  "funk two",
                  "fun two"
                ]
              },
              "f3": {
                "spoken_form": "F three",
                "alternate_sopken_forms": [
                  "f three",
                  "F key three",
                  "funk three",
                  "fun three"
                ]
              },
              "f4": {
                "spoken_form": "F four",
                "alternate_sopken_forms": [
                  "f four",
                  "F key four",
                  "funk four",
                  "fun four"
                ]
              },
              "f5": {
                "spoken_form": "F five",
                "alternate_sopken_forms": [
                  "f five",
                  "F key five",
                  "funk five",
                  "fun five"
                ]
              },
              "f6": {
                "spoken_form": "F six",
                "alternate_sopken_forms": [
                  "f six",
                  "F key six",
                  "funk six",
                  "fun six"
                ]
              },
              "f7": {
                "spoken_form": "F seven",
                "alternate_sopken_forms": [
                  "f seven",
                  "F key seven",
                  "funk seven",
                  "fun seven"
                ]
              },
              "f8": {
                "spoken_form": "F eight",
                "alternate_sopken_forms": [
                  "f eight",
                  "F key eight",
                  "funk eight",
                  "fun eight"
                ]
              },
              "f9": {
                "spoken_form": "F nine",
                "alternate_sopken_forms": [
                  "f nine",
                  "F key nine",
                  "funk nine",
                  "fun nine"
                ]
              },
              "f10": {
                "spoken_form": "F ten",
                "alternate_sopken_forms": [
                  "f ten",
                  "F key ten",
                  "funk ten",
                  "fun ten"
                ]
              },
              "f11": {
                "spoken_form": "F eleven",
                "alternate_sopken_forms": [
                  "f eleven",
                  "F key eleven",
                  "funk eleven",
                  "fun eleven"
                ]
              },
              "f12": {
                "spoken_form": "F twelve",
                "alternate_sopken_forms": [
                  "f twelve",
                  "F key twelve",
                  "funk twelve",
                  "fun twelve"
                ]
              }
            }
          }
        }
      },
      "code/formatters.py": {
        "context": {
          "user.formatters": {
            "action": {
              "EXAMPLE OF FORMATTING WITH ALL CAP": {
                "spoken_form": "all cap",
                "alternate_sopken_forms": []
              },
              "example of formatting with all down": {
                "spoken_form": "all down",
                "alternate_sopken_forms": []
              },
              "exampleOfFormattingWithCamel": {
                "spoken_form": "camel",
                "alternate_sopken_forms": []
              },
              "example.of.formatting.with.dotted": {
                "spoken_form": "dotted",
                "alternate_sopken_forms": []
              },
              "\"example of formatting with dub string\"": {
                "spoken_form": "dub string",
                "alternate_sopken_forms": []
              },
              "__example__offormattingwithdunder": {
                "spoken_form": "dunder",
                "alternate_sopken_forms": []
              },
              "ExampleOfFormattingWithHammer": {
                "spoken_form": "hammer",
                "alternate_sopken_forms": []
              },
              "example-of-formatting-with-kebab": {
                "spoken_form": "kebab",
                "alternate_sopken_forms": []
              },
              "example::of::formatting::with::packed": {
                "spoken_form": "packed",
                "alternate_sopken_forms": []
              },
              " example of formatting with padded ": {
                "spoken_form": "padded",
                "alternate_sopken_forms": []
              },
              "/example/of/formatting/with/slasher": {
                "spoken_form": "slasher",
                "alternate_sopken_forms": []
              },
              "exampleofformattingwithsmash": {
                "spoken_form": "smash",
                "alternate_sopken_forms": []
              },
              "example_of_formatting_with_snake": {
                "spoken_form": "snake",
                "alternate_sopken_forms": []
              },
              "'example of formatting with string'": {
                "spoken_form": "string",
                "alternate_sopken_forms": []
              },
              "Example of Formatting With Title": {
                "spoken_form": "title",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/numbers/numbers.talon": {
        "context": {
          "numbers": {
            "action": {
              "\"{number_string}\"": {
                "spoken_form": "<user.number_string>",
                "alternate_sopken_forms": ["numb <user.number_string>"]
              }
            }
          }
        }
      },
      "core/abbreviate/abbreviate.talon": {
        "context": {
          "abbreviate": {
            "action": {
              "\"{abbreviation}\"": {
                "spoken_form": "(abbreviate | abreviate | brief) {user.abbreviation}",
                "alternate_sopken_forms": ["<user.abbreviation>"]
              }
            }
          }
        }
      },
      "core/modes/language_modes.talon": {
        "context": {
          "language modes": {
            "action": {
              "user.code_set_language_mode(language_mode)": {
                "spoken_form": "force {user.language_mode}",
                "alternate_sopken_forms": []
              },
              "user.code_clear_language_mode()": {
                "spoken_form": "clear language modes",
                "alternate_sopken_forms": []
              },
              "mode.enable(\"user.gdb\")": {
                "spoken_form": "[enable] debug mode",
                "alternate_sopken_forms": []
              },
              "mode.disable(\"user.gdb\")": {
                "spoken_form": "disable debug mode",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/modes/dictation_mode.talon": {
        "context": {
          "dictation mode": {
            "action": {
              "key(modifiers)": {
                "spoken_form": "press <user.modifiers>",
                "alternate_sopken_forms": []
              },
              "key(keys)": {
                "spoken_form": "press <user.keys>",
                "alternate_sopken_forms": []
              },
              "user.dictation_insert(raw_prose)": {
                "spoken_form": "<user.raw_prose>",
                "alternate_sopken_forms": []
              },
              "user.dictation_format_cap()": {
                "spoken_form": "cap",
                "alternate_sopken_forms": []
              },
              "user.dictation_format_no_cap()": {
                "spoken_form": "(no cap | no-caps)",
                "alternate_sopken_forms": []
              },
              "user.dictation_format_no_space()": {
                "spoken_form": "(no space | no-space)",
                "alternate_sopken_forms": []
              },
              "user.dictation_reformat_cap()": {
                "spoken_form": "cap that",
                "alternate_sopken_forms": []
              },
              "user.dictation_reformat_no_cap()": {
                "spoken_form": "(no cap | no-caps) that",
                "alternate_sopken_forms": []
              },
              "user.dictation_reformat_no_space()": {
                "spoken_form": "(no space | no-space) that",
                "alternate_sopken_forms": []
              },
              "edit.up()\nrepeat(number_small - 1)": {
                "spoken_form": "go up <number_small> (line | lines)",
                "alternate_sopken_forms": []
              },
              "edit.down()\nrepeat(number_small - 1)": {
                "spoken_form": "go down <number_small> (line | lines)",
                "alternate_sopken_forms": []
              },
              "edit.word_left()\nrepeat(number_small - 1)": {
                "spoken_form": "go left <number_small> (word | words)",
                "alternate_sopken_forms": []
              },
              "edit.word_right()\nrepeat(number_small - 1)": {
                "spoken_form": "go right <number_small> (word | words)",
                "alternate_sopken_forms": []
              },
              "edit.line_start()": {
                "spoken_form": "go line start",
                "alternate_sopken_forms": []
              },
              "edit.line_end()": {
                "spoken_form": "go line end",
                "alternate_sopken_forms": []
              },
              "edit.extend_word_left()\nrepeat(number_small - 1)": {
                "spoken_form": "select left <number_small> (word | words)",
                "alternate_sopken_forms": []
              },
              "edit.extend_word_right()\nrepeat(number_small - 1)": {
                "spoken_form": "select right <number_small> (word | words)",
                "alternate_sopken_forms": []
              },
              "edit.extend_left()\nrepeat(number_small - 1)": {
                "spoken_form": "select left <number_small> (character | characters)",
                "alternate_sopken_forms": []
              },
              "edit.extend_right()\nrepeat(number_small - 1)": {
                "spoken_form": "select right <number_small> (character | characters)",
                "alternate_sopken_forms": []
              },
              "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()": {
                "spoken_form": "clear left <number_small> (word | words)",
                "alternate_sopken_forms": []
              },
              "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()": {
                "spoken_form": "clear right <number_small> (word | words)",
                "alternate_sopken_forms": []
              },
              "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()": {
                "spoken_form": "clear left <number_small> (character | characters)",
                "alternate_sopken_forms": []
              },
              "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()": {
                "spoken_form": "clear right <number_small> (character | characters)",
                "alternate_sopken_forms": []
              },
              "user.dictation_insert_raw(format_text)": {
                "spoken_form": "formatted <user.format_text>",
                "alternate_sopken_forms": []
              },
              "user.formatters_reformat_selection(formatters)": {
                "spoken_form": "format selection <user.formatters>",
                "alternate_sopken_forms": []
              },
              "user.clear_last_phrase()": {
                "spoken_form": "scratch that",
                "alternate_sopken_forms": []
              },
              "edit.delete()": {
                "spoken_form": "scratch selection",
                "alternate_sopken_forms": []
              },
              "user.select_last_phrase()": {
                "spoken_form": "select that",
                "alternate_sopken_forms": []
              },
              "user.dictation_insert(letters)": {
                "spoken_form": "spell that <user.letters>",
                "alternate_sopken_forms": []
              },
              "result = user.formatted_text(letters, formatters)\nuser.dictation_insert_raw(result)": {
                "spoken_form": "spell that <user.formatters> <user.letters>",
                "alternate_sopken_forms": []
              },
              "user.dictation_insert(user.text)": {
                "spoken_form": "escape <user.text>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/modes/wake_and_sleep_wav2letter.talon": {
        "context": {
          "wake and sleep wav2letter": {
            "action": {
              "speech.disable()": {
                "spoken_form": "go to sleep [<phrase>]",
                "alternate_sopken_forms": ["drowse"]
              },
              "speech.enable()": {
                "spoken_form": "wake up",
                "alternate_sopken_forms": ["hello computer"]
              }
            }
          }
        }
      },
      "core/modes/dragon_mode.talon": {
        "context": {
          "dragon mode": {
            "action": {
              "user.dragon_mode()": {
                "spoken_form": "dragon mode",
                "alternate_sopken_forms": []
              },
              "user.talon_mode()": {
                "spoken_form": "talon mode",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/modes/modes.talon": {
        "context": {
          "modes": {
            "action": {
              "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")": {
                "spoken_form": "dictation mode",
                "alternate_sopken_forms": []
              },
              "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")": {
                "spoken_form": "command mode",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/modes/wake_and_sleep.talon": {
        "context": {
          "wake and sleep": {
            "action": {
              "user.mouse_wake()\nuser.history_enable()\nuser.talon_mode()": {
                "spoken_form": "welcome back",
                "alternate_sopken_forms": []
              },
              "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()": {
                "spoken_form": "sleep all [<phrase>]",
                "alternate_sopken_forms": []
              },
              "speech.disable()": {
                "spoken_form": "talon sleep [<phrase>]",
                "alternate_sopken_forms": [
                  "red light [<phrase>]",
                  "drowsy [<phrase>]"
                ]
              },
              "speech.enable()": {
                "spoken_form": "talon wake",
                "alternate_sopken_forms": ["green light", "wakey wakey"]
              }
            }
          }
        }
      },
      "core/modes/sleep_mode_wav2letter.talon": {
        "context": {
          "sleep mode wav2letter": {
            "action": {
              "skip()": {
                "spoken_form": "<phrase>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/websites_and_search_engines/websites_and_search_engines.talon": {
        "context": {
          "websites and search engines": {
            "action": {
              "user.open_url(website)": {
                "spoken_form": "open {user.website}",
                "alternate_sopken_forms": []
              },
              "user.search_with_search_engine(search_engine, user.text)": {
                "spoken_form": "{user.search_engine} hunt <user.text>",
                "alternate_sopken_forms": [
                  "{user.search_engine} scout <user.text>"
                ]
              },
              "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)": {
                "spoken_form": "{user.search_engine} (that | this)",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/screens/screens.talon": {
        "context": {
          "screens": {
            "action": {
              "user.screens_show_numbering()": {
                "spoken_form": "screen numbers",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/edit/standard.talon": {
        "context": {
          "standard": {
            "action": {
              "edit.zoom_in()": {
                "spoken_form": "zoom in",
                "alternate_sopken_forms": ["collapse"]
              },
              "edit.zoom_out()": {
                "spoken_form": "zoom out",
                "alternate_sopken_forms": ["expand"]
              },
              "edit.zoom_reset()": {
                "spoken_form": "zoom reset",
                "alternate_sopken_forms": []
              },
              "edit.page_up()": {
                "spoken_form": "scroll up",
                "alternate_sopken_forms": []
              },
              "edit.page_down()": {
                "spoken_form": "scroll down",
                "alternate_sopken_forms": []
              },
              "edit.copy()": {
                "spoken_form": "copy that",
                "alternate_sopken_forms": []
              },
              "edit.cut()": {
                "spoken_form": "cut that",
                "alternate_sopken_forms": ["(carve it | carve selection)"]
              },
              "edit.paste()": {
                "spoken_form": "(pace | paste) that",
                "alternate_sopken_forms": ["(pace | paste) it"]
              },
              "edit.paste()\nkey(enter)": {
                "spoken_form": "(pace | paste) enter",
                "alternate_sopken_forms": []
              },
              "edit.undo()": {
                "spoken_form": "undo that",
                "alternate_sopken_forms": [
                  "revert that",
                  "nope",
                  "undo it",
                  "undo that | nope",
                  "(undo that | nope)"
                ]
              },
              "edit.redo()": {
                "spoken_form": "redo that",
                "alternate_sopken_forms": [
                  "actually yes",
                  "redo it",
                  "(redo that | yes indeed)"
                ]
              },
              "edit.paste_match_style()": {
                "spoken_form": "paste match",
                "alternate_sopken_forms": [
                  "(pace | paste) plain",
                  "(pace | paste) match style"
                ]
              },
              "edit.save()": {
                "spoken_form": "file save",
                "alternate_sopken_forms": [
                  "disc",
                  "(file | five) save",
                  "(disk|file save)",
                  "disk"
                ]
              },
              "edit.save_all()": {
                "spoken_form": "file save all",
                "alternate_sopken_forms": [
                  "disc all",
                  "(file | five) save all",
                  "(disk oliver|file save all)",
                  "disk oliver"
                ]
              },
              "user.insert_between(\" \", \" \")": {
                "spoken_form": "(pad | padding)",
                "alternate_sopken_forms": ["padding"]
              },
              "insert(\" \")\nuser.insert_many(symbol_key_list)\ninsert(\" \")": {
                "spoken_form": "(pad | padding) <user.symbol_key>+",
                "alternate_sopken_forms": ["padding <user.symbol_key>+"]
              },
              "edit.line_insert_down()": {
                "spoken_form": "slap",
                "alternate_sopken_forms": [
                  "new (line | row)",
                  "(line | row) new",
                  "pour"
                ]
              }
            }
          }
        }
      },
      "core/edit/edit.talon": {
        "context": {
          "edit": {
            "action": {
              "edit.find()": {
                "spoken_form": "find it",
                "alternate_sopken_forms": ["search it", "find that"]
              },
              "edit.find_next()": {
                "spoken_form": "next one",
                "alternate_sopken_forms": ["find next"]
              },
              "edit.word_left()": {
                "spoken_form": "go word left",
                "alternate_sopken_forms": ["pre", "drain", "lord"]
              },
              "edit.word_right()": {
                "spoken_form": "go word right",
                "alternate_sopken_forms": ["step", "role"]
              },
              "edit.left()": {
                "spoken_form": "go left",
                "alternate_sopken_forms": ["tug", "lease"]
              },
              "edit.right()": {
                "spoken_form": "go right",
                "alternate_sopken_forms": ["push", "ross"]
              },
              "edit.up()": {
                "spoken_form": "go up",
                "alternate_sopken_forms": ["sauce"]
              },
              "edit.down()": {
                "spoken_form": "go down",
                "alternate_sopken_forms": ["dunce"]
              },
              "edit.line_start()": {
                "spoken_form": "go line start",
                "alternate_sopken_forms": ["head", "strike"]
              },
              "edit.line_end()": {
                "spoken_form": "go way right",
                "alternate_sopken_forms": ["tail", "struck"]
              },
              "edit.line_start()\nedit.line_start()": {
                "spoken_form": "go way left",
                "alternate_sopken_forms": []
              },
              "edit.file_end()": {
                "spoken_form": "go bottom",
                "alternate_sopken_forms": [
                  "(go | scroll) way down",
                  "(go | scroll) bottom",
                  "struck out"
                ]
              },
              "edit.file_start()": {
                "spoken_form": "go top",
                "alternate_sopken_forms": [
                  "(go | scroll) way up",
                  "(go | scroll) top",
                  "strike out"
                ]
              },
              "edit.page_down()": {
                "spoken_form": "go page down",
                "alternate_sopken_forms": ["punch"]
              },
              "edit.page_up()": {
                "spoken_form": "go page up",
                "alternate_sopken_forms": ["pinch"]
              },
              "edit.select_line()": {
                "spoken_form": "select line",
                "alternate_sopken_forms": ["take line"]
              },
              "edit.select_all()": {
                "spoken_form": "select all",
                "alternate_sopken_forms": ["take all"]
              },
              "edit.extend_left()": {
                "spoken_form": "select left",
                "alternate_sopken_forms": ["take lease"]
              },
              "edit.extend_right()": {
                "spoken_form": "select right",
                "alternate_sopken_forms": ["take ross"]
              },
              "edit.extend_line_up()": {
                "spoken_form": "select up",
                "alternate_sopken_forms": []
              },
              "edit.extend_line_down()": {
                "spoken_form": "select down",
                "alternate_sopken_forms": []
              },
              "edit.select_word()": {
                "spoken_form": "select word",
                "alternate_sopken_forms": ["take word"]
              },
              "edit.extend_word_left()": {
                "spoken_form": "select word left",
                "alternate_sopken_forms": ["<user.select> lefter", "take lord"]
              },
              "edit.extend_word_right()": {
                "spoken_form": "select word right",
                "alternate_sopken_forms": ["<user.select> writer", "take role"]
              },
              "edit.extend_line_start()": {
                "spoken_form": "select way left",
                "alternate_sopken_forms": ["take head", "take strike"]
              },
              "edit.extend_line_end()": {
                "spoken_form": "select way right",
                "alternate_sopken_forms": ["take tail", "take struck"]
              },
              "edit.extend_file_start()": {
                "spoken_form": "select way up",
                "alternate_sopken_forms": ["take start"]
              },
              "edit.extend_file_end()": {
                "spoken_form": "select way down",
                "alternate_sopken_forms": ["take end"]
              },
              "edit.indent_more()": {
                "spoken_form": "indent [more]",
                "alternate_sopken_forms": ["indent", "move in"]
              },
              "edit.indent_less()": {
                "spoken_form": "(indent less | out dent)",
                "alternate_sopken_forms": ["(indent less | dedent)", "move out"]
              },
              "edit.delete_line()": {
                "spoken_form": "clear line",
                "alternate_sopken_forms": ["line delete"]
              },
              "key(backspace)": {
                "spoken_form": "clear left",
                "alternate_sopken_forms": []
              },
              "key(delete)": {
                "spoken_form": "clear right",
                "alternate_sopken_forms": []
              },
              "edit.extend_line_up()\nedit.delete()": {
                "spoken_form": "clear up",
                "alternate_sopken_forms": ["<user.delete> up"]
              },
              "edit.extend_line_down()\nedit.delete()": {
                "spoken_form": "clear down",
                "alternate_sopken_forms": ["<user.delete> down"]
              },
              "edit.delete_word()": {
                "spoken_form": "clear word",
                "alternate_sopken_forms": ["<user.delete> word"]
              },
              "edit.extend_word_left()\nedit.delete()": {
                "spoken_form": "clear word left",
                "alternate_sopken_forms": ["(clear word left | cleft)"]
              },
              "edit.extend_word_right()\nedit.delete()": {
                "spoken_form": "clear word right",
                "alternate_sopken_forms": ["(clear word right | cright)"]
              },
              "edit.extend_line_start()\nedit.delete()": {
                "spoken_form": "clear way left",
                "alternate_sopken_forms": ["<user.delete> head"]
              },
              "edit.extend_line_end()\nedit.delete()": {
                "spoken_form": "clear way right",
                "alternate_sopken_forms": ["<user.delete> tail"]
              },
              "edit.extend_file_start()\nedit.delete()": {
                "spoken_form": "clear way up",
                "alternate_sopken_forms": ["<user.delete> way up"]
              },
              "edit.extend_file_end()\nedit.delete()": {
                "spoken_form": "clear way down",
                "alternate_sopken_forms": ["<user.delete> way down"]
              },
              "edit.select_all()\nedit.delete()": {
                "spoken_form": "clear all",
                "alternate_sopken_forms": ["<user.delete> all"]
              },
              "edit.select_all()\nedit.copy()": {
                "spoken_form": "copy all",
                "alternate_sopken_forms": []
              },
              "edit.select_word()\nedit.copy()": {
                "spoken_form": "copy word",
                "alternate_sopken_forms": []
              },
              "user.copy_word_left()": {
                "spoken_form": "copy word left",
                "alternate_sopken_forms": []
              },
              "user.copy_word_right()": {
                "spoken_form": "copy word right",
                "alternate_sopken_forms": []
              },
              "edit.select_line()\nedit.copy()": {
                "spoken_form": "copy line",
                "alternate_sopken_forms": []
              },
              "edit.select_all()\nedit.cut()": {
                "spoken_form": "cut all",
                "alternate_sopken_forms": []
              },
              "edit.select_word()\nedit.cut()": {
                "spoken_form": "cut word",
                "alternate_sopken_forms": []
              },
              "user.cut_word_left()": {
                "spoken_form": "cut word left",
                "alternate_sopken_forms": []
              },
              "user.cut_word_right()": {
                "spoken_form": "cut word right",
                "alternate_sopken_forms": []
              },
              "user.cut_line()": {
                "spoken_form": "cut line",
                "alternate_sopken_forms": ["carve line"]
              },
              "edit.select_all()\nedit.paste()": {
                "spoken_form": "(pace | paste) all",
                "alternate_sopken_forms": []
              },
              "edit.selection_clone()": {
                "spoken_form": "clone that",
                "alternate_sopken_forms": []
              },
              "edit.line_clone()": {
                "spoken_form": "clone line",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/edit_settings.talon": {
        "context": {
          "edit settings": {
            "action": {
              "user.edit_text_file(talon_settings_csv)\nsleep(500ms)\nedit.file_end()": {
                "spoken_form": "customize {user.talon_settings_csv}",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/homophones/homophones.talon": {
        "context": {
          "homophones": {
            "action": {
              "user.homophones_show(homophones_canonical)": {
                "spoken_form": "phones <user.homophones_canonical>",
                "alternate_sopken_forms": []
              },
              "user.homophones_show_auto()": {
                "spoken_form": "phones that",
                "alternate_sopken_forms": []
              },
              "user.homophones_force_show(homophones_canonical)": {
                "spoken_form": "phones force <user.homophones_canonical>",
                "alternate_sopken_forms": []
              },
              "user.homophones_force_show_selection()": {
                "spoken_form": "phones force",
                "alternate_sopken_forms": []
              },
              "user.homophones_hide()": {
                "spoken_form": "phones hide",
                "alternate_sopken_forms": []
              },
              "edit.select_word()\nuser.homophones_show_selection()": {
                "spoken_form": "phones word",
                "alternate_sopken_forms": []
              },
              "n = ordinals or 1\nuser.words_left(n - 1)\nedit.extend_word_left()\nuser.homophones_show_selection()": {
                "spoken_form": "phones [<user.ordinals>] word left",
                "alternate_sopken_forms": []
              },
              "n = ordinals or 1\nuser.words_right(n - 1)\nedit.extend_word_right()\nuser.homophones_show_selection()": {
                "spoken_form": "phones [<user.ordinals>] word right",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/homophones/homophones_open.talon": {
        "context": {
          "homophones open": {
            "action": {
              "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()": {
                "spoken_form": "choose <number_small>",
                "alternate_sopken_forms": []
              },
              "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()": {
                "spoken_form": "choose <user.formatters> <number_small>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/windows_and_tabs/window_management.talon": {
        "context": {
          "window management": {
            "action": {
              "app.window_open()": {
                "spoken_form": "window (new | open)",
                "alternate_sopken_forms": []
              },
              "app.window_next()": {
                "spoken_form": "window next",
                "alternate_sopken_forms": []
              },
              "app.window_previous()": {
                "spoken_form": "window last",
                "alternate_sopken_forms": []
              },
              "app.window_close()": {
                "spoken_form": "window close",
                "alternate_sopken_forms": []
              },
              "user.switcher_focus(running_applications)": {
                "spoken_form": "focus <user.running_applications>",
                "alternate_sopken_forms": []
              },
              "user.switcher_menu()": {
                "spoken_form": "focus",
                "alternate_sopken_forms": []
              },
              "user.switcher_toggle_running()": {
                "spoken_form": "running list",
                "alternate_sopken_forms": []
              },
              "user.switcher_hide_running()": {
                "spoken_form": "running close",
                "alternate_sopken_forms": []
              },
              "user.switcher_launch(launch_applications)": {
                "spoken_form": "launch <user.launch_applications>",
                "alternate_sopken_forms": []
              },
              "user.snap_window(window_snap_position)": {
                "spoken_form": "snap <user.window_snap_position>",
                "alternate_sopken_forms": []
              },
              "user.move_window_next_screen()": {
                "spoken_form": "snap next [screen]",
                "alternate_sopken_forms": []
              },
              "user.move_window_previous_screen()": {
                "spoken_form": "snap last [screen]",
                "alternate_sopken_forms": []
              },
              "user.move_window_to_screen(number)": {
                "spoken_form": "snap screen <number>",
                "alternate_sopken_forms": []
              },
              "user.snap_app(running_applications, window_snap_position)": {
                "spoken_form": "snap <user.running_applications> <user.window_snap_position>",
                "alternate_sopken_forms": []
              },
              "user.move_app_to_screen(running_applications, number)": {
                "spoken_form": "snap <user.running_applications> [screen] <number>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/windows_and_tabs/tabs.talon": {
        "context": {
          "tabs": {
            "action": {
              "app.tab_open()": {
                "spoken_form": "tab (open | new)",
                "alternate_sopken_forms": ["tab make"]
              },
              "app.tab_previous()": {
                "spoken_form": "tab (last | previous)",
                "alternate_sopken_forms": ["tab last"]
              },
              "app.tab_next()": {
                "spoken_form": "tab next",
                "alternate_sopken_forms": []
              },
              "user.tab_close_wrapper()": {
                "spoken_form": "tab close",
                "alternate_sopken_forms": ["tab (close | delete)"]
              },
              "app.tab_reopen()": {
                "spoken_form": "tab (reopen | restore)",
                "alternate_sopken_forms": []
              },
              "user.tab_jump(number)": {
                "spoken_form": "go tab <number>",
                "alternate_sopken_forms": ["tab <number>"]
              },
              "user.tab_final()": {
                "spoken_form": "go tab final",
                "alternate_sopken_forms": ["tab final"]
              },
              "user.tab_duplicate()": {
                "spoken_form": "tab duplicate",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/keys/keys.talon": {
        "context": {
          "keys": {
            "action": {
              "user.move_cursor(arrow_keys)": {
                "spoken_form": "go <user.arrow_keys>",
                "alternate_sopken_forms": []
              },
              "key(letter)": {
                "spoken_form": "<user.letter>",
                "alternate_sopken_forms": []
              },
              "user.insert_formatted(letters, \"ALL_CAPS\")": {
                "spoken_form": "(ship | uppercase) <user.letters> [(lowercase | sunk)]",
                "alternate_sopken_forms": [
                  "uppercase <user.letters> [(lowercase | sunk)]"
                ]
              },
              "key(symbol_key)": {
                "spoken_form": "<user.symbol_key>",
                "alternate_sopken_forms": []
              },
              "key(function_key)": {
                "spoken_form": "<user.function_key>",
                "alternate_sopken_forms": []
              },
              "key(special_key)": {
                "spoken_form": "<user.special_key>",
                "alternate_sopken_forms": []
              },
              "key(\"{modifiers}-{unmodified_key}\")": {
                "spoken_form": "<user.modifiers> <user.unmodified_key>",
                "alternate_sopken_forms": []
              },
              "key(modifiers)": {
                "spoken_form": "press <user.modifiers>",
                "alternate_sopken_forms": []
              },
              "key(keys)": {
                "spoken_form": "press <user.keys>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/text/text.talon": {
        "context": {
          "text": {
            "action": {
              "user.add_phrase_to_history(text)\ninsert(text)": {
                "spoken_form": "phrase <user.text> over",
                "alternate_sopken_forms": []
              },
              "user.insert_formatted(prose, prose_formatter)": {
                "spoken_form": "{user.prose_formatter} <user.prose> over",
                "alternate_sopken_forms": []
              },
              "user.insert_many(format_text_list)": {
                "spoken_form": "<user.format_text>+ over",
                "alternate_sopken_forms": [
                  "<user.format_text>",
                  "<user.format_text> halt",
                  "strict <user.format_text>"
                ]
              },
              "user.formatters_reformat_selection(user.formatters)": {
                "spoken_form": "<user.formatters> that",
                "alternate_sopken_forms": []
              },
              "user.add_phrase_to_history(word)\ninsert(word)": {
                "spoken_form": "word <user.word>",
                "alternate_sopken_forms": []
              },
              "user.toggle_phrase_history()": {
                "spoken_form": "recent list",
                "alternate_sopken_forms": []
              },
              "user.phrase_history_hide()": {
                "spoken_form": "recent close",
                "alternate_sopken_forms": []
              },
              "recent_phrase = user.get_recent_phrase(number_small)\nuser.add_phrase_to_history(recent_phrase)\ninsert(recent_phrase)": {
                "spoken_form": "recent repeat <number_small>",
                "alternate_sopken_forms": []
              },
              "clip.set_text(user.get_recent_phrase(number_small))": {
                "spoken_form": "recent copy <number_small>",
                "alternate_sopken_forms": []
              },
              "user.select_last_phrase()": {
                "spoken_form": "select that",
                "alternate_sopken_forms": []
              },
              "user.before_last_phrase()": {
                "spoken_form": "before that",
                "alternate_sopken_forms": []
              },
              "user.clear_last_phrase()": {
                "spoken_form": "nope that | scratch that",
                "alternate_sopken_forms": []
              },
              "user.formatters_reformat_last(formatters)": {
                "spoken_form": "nope that was <user.formatters>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/file_extension/file_extension.talon": {
        "context": {
          "file extension": {
            "action": {
              "\"{file_extension}\"": {
                "spoken_form": "{user.file_extension}",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/mouse_grid/mouse_grid_open.talon": {
        "context": {
          "mouse grid open": {
            "action": {
              "user.grid_narrow(number_key)": {
                "spoken_form": "<user.number_key>",
                "alternate_sopken_forms": []
              },
              "user.grid_close()": {
                "spoken_form": "grid off",
                "alternate_sopken_forms": []
              },
              "user.grid_reset()": {
                "spoken_form": "grid reset",
                "alternate_sopken_forms": []
              },
              "user.grid_go_back()": {
                "spoken_form": "grid back",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/mouse_grid/mouse_grid.talon": {
        "context": {
          "mouse grid": {
            "action": {
              "app.notify(\"please use the voice command 'mouse grid' instead of 'm grid'\")\nuser.grid_select_screen(1)\nuser.grid_activate()": {
                "spoken_form": "M grid",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/mouse_grid/mouse_grid_always.talon": {
        "context": {
          "mouse grid always": {
            "action": {
              "user.grid_select_screen(1)\nuser.grid_activate()": {
                "spoken_form": "mouse grid",
                "alternate_sopken_forms": []
              },
              "user.grid_place_window()\nuser.grid_activate()": {
                "spoken_form": "grid win",
                "alternate_sopken_forms": []
              },
              "user.grid_activate()\nuser.grid_narrow_list(number_key_list)": {
                "spoken_form": "grid <user.number_key>+",
                "alternate_sopken_forms": []
              },
              "user.grid_select_screen(number or 1)\nuser.grid_activate()": {
                "spoken_form": "grid screen [<number>]",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/vocabulary/edit_vocabulary.talon": {
        "context": {
          "edit vocabulary": {
            "action": {
              "user.add_selection_to_vocabulary(phrase or \"\")": {
                "spoken_form": "copy to vocab [as <phrase>]",
                "alternate_sopken_forms": []
              },
              "user.add_selection_to_vocabulary(phrase or \"\", \"name\")": {
                "spoken_form": "copy name to vocab [as <phrase>]",
                "alternate_sopken_forms": []
              },
              "user.add_selection_to_vocabulary(phrase or \"\", \"noun\")": {
                "spoken_form": "copy noun to vocab [as <phrase>]",
                "alternate_sopken_forms": []
              },
              "user.add_selection_to_words_to_replace(phrase)": {
                "spoken_form": "copy to replacements as <phrase>",
                "alternate_sopken_forms": []
              },
              "user.add_selection_to_words_to_replace(phrase, \"name\")": {
                "spoken_form": "copy name to replacements as <phrase>",
                "alternate_sopken_forms": []
              },
              "user.add_selection_to_words_to_replace(phrase, \"noun\")": {
                "spoken_form": "copy noun to replacements as <phrase>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/help/help_scope_open.talon": {
        "context": {
          "help scope open": {
            "action": {
              "user.help_scope_toggle()": {
                "spoken_form": "scope (hide | close)",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/help/help_open.talon": {
        "context": {
          "help open": {
            "action": {
              "user.help_next()": {
                "spoken_form": "help next",
                "alternate_sopken_forms": []
              },
              "user.help_previous()": {
                "spoken_form": "help previous",
                "alternate_sopken_forms": []
              },
              "user.help_select_index(number - 1)": {
                "spoken_form": "help <number>",
                "alternate_sopken_forms": []
              },
              "user.help_return()": {
                "spoken_form": "help return",
                "alternate_sopken_forms": []
              },
              "user.help_refresh()": {
                "spoken_form": "help refresh",
                "alternate_sopken_forms": []
              },
              "user.help_hide()": {
                "spoken_form": "help close",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "core/help/help.talon": {
        "context": {
          "help": {
            "action": {
              "user.help_list(\"user.letter\")": {
                "spoken_form": "help alphabet",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.symbol_key\")": {
                "spoken_form": "help symbols",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.number_key\")": {
                "spoken_form": "help numbers",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.punctuation\")": {
                "spoken_form": "help punctuation",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.modifier_key\")": {
                "spoken_form": "help modifier",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.special_key\")": {
                "spoken_form": "help special keys",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.function_key\")": {
                "spoken_form": "help function keys",
                "alternate_sopken_forms": []
              },
              "user.help_list(\"user.arrow_key\")": {
                "spoken_form": "help arrows",
                "alternate_sopken_forms": []
              },
              "user.help_formatters(user.get_formatters_words())": {
                "spoken_form": "(help formatters | help format | format help)",
                "alternate_sopken_forms": []
              },
              "user.help_context()": {
                "spoken_form": "help context",
                "alternate_sopken_forms": []
              },
              "user.help_context_enabled()": {
                "spoken_form": "help active",
                "alternate_sopken_forms": []
              },
              "user.help_search(text)": {
                "spoken_form": "help search <user.text>",
                "alternate_sopken_forms": []
              },
              "user.help_selected_context(help_contexts)": {
                "spoken_form": "help context {user.help_contexts}",
                "alternate_sopken_forms": []
              },
              "user.help_search(\"help\")": {
                "spoken_form": "help help",
                "alternate_sopken_forms": []
              },
              "user.help_scope_toggle()": {
                "spoken_form": "help scope",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/wsl/wsl.talon": {
        "context": {
          "wsl": {
            "action": {
              "user.file_manager_open_volume(\"/mnt/{letter}\")": {
                "spoken_form": "go <user.letter>",
                "alternate_sopken_forms": []
              },
              "user.wsl_reset_path_detection()": {
                "spoken_form": "(wsl | weasel) reset path detection",
                "alternate_sopken_forms": []
              },
              "user.wsl_speak()": {
                "spoken_form": "(wsl | weasel) speak",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/firefox/firefox.talon": {
        "context": {
          "firefox": {
            "action": {
              "browser.focus_address()\ninsert(\"% \")": {
                "spoken_form": "tab search",
                "alternate_sopken_forms": []
              },
              "browser.focus_address()\ninsert(\"% {text}\")\nkey(down)": {
                "spoken_form": "tab search <user.text>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/anaconda/anaconda.talon": {
        "context": {
          "anaconda": {
            "action": {
              "\"conda \"": {
                "spoken_form": "anaconda",
                "alternate_sopken_forms": []
              },
              "\"conda --help\\n\"": {
                "spoken_form": "anaconda help",
                "alternate_sopken_forms": []
              },
              "\"conda --version\\n\"": {
                "spoken_form": "anaconda version",
                "alternate_sopken_forms": []
              },
              "\"conda env list\\n\"": {
                "spoken_form": "anaconda environment list",
                "alternate_sopken_forms": []
              },
              "\"conda env create -f \"": {
                "spoken_form": "anaconda environment create",
                "alternate_sopken_forms": []
              },
              "\"conda env remove -n \"": {
                "spoken_form": "anaconda environment remove",
                "alternate_sopken_forms": []
              },
              "\"conda activate \"": {
                "spoken_form": "anaconda activate",
                "alternate_sopken_forms": []
              },
              "\"conda clean \"": {
                "spoken_form": "anaconda clean",
                "alternate_sopken_forms": []
              },
              "\"conda compare \"": {
                "spoken_form": "anaconda compare",
                "alternate_sopken_forms": []
              },
              "\"conda config \"": {
                "spoken_form": "anaconda config",
                "alternate_sopken_forms": []
              },
              "\"conda create \"": {
                "spoken_form": "anaconda create",
                "alternate_sopken_forms": []
              },
              "\"conda info \"": {
                "spoken_form": "anaconda info",
                "alternate_sopken_forms": []
              },
              "\"conda init \"": {
                "spoken_form": "anaconda init",
                "alternate_sopken_forms": []
              },
              "\"conda install \"": {
                "spoken_form": "anaconda install",
                "alternate_sopken_forms": []
              },
              "\"conda list \"": {
                "spoken_form": "anaconda list",
                "alternate_sopken_forms": []
              },
              "\"conda package \"": {
                "spoken_form": "anaconda package",
                "alternate_sopken_forms": []
              },
              "\"conda remove \"": {
                "spoken_form": "anaconda remove",
                "alternate_sopken_forms": []
              },
              "\"conda uninstall \"": {
                "spoken_form": "anaconda uninstall",
                "alternate_sopken_forms": []
              },
              "\"conda run \"": {
                "spoken_form": "anaconda run",
                "alternate_sopken_forms": []
              },
              "\"conda search \"": {
                "spoken_form": "anaconda search",
                "alternate_sopken_forms": []
              },
              "\"conda update \"": {
                "spoken_form": "anaconda update",
                "alternate_sopken_forms": []
              },
              "\"conda upgrade \"": {
                "spoken_form": "anaconda upgrade",
                "alternate_sopken_forms": []
              },
              "\"conda build \"": {
                "spoken_form": "anaconda build",
                "alternate_sopken_forms": []
              },
              "\"conda convert \"": {
                "spoken_form": "anaconda convert",
                "alternate_sopken_forms": []
              },
              "\"conda debug \"": {
                "spoken_form": "anaconda debug",
                "alternate_sopken_forms": []
              },
              "\"conda develop \"": {
                "spoken_form": "anaconda develop",
                "alternate_sopken_forms": []
              },
              "\"conda env \"": {
                "spoken_form": "anaconda environment",
                "alternate_sopken_forms": []
              },
              "\"conda index \"": {
                "spoken_form": "anaconda index",
                "alternate_sopken_forms": []
              },
              "\"conda inspect \"": {
                "spoken_form": "anaconda inspect",
                "alternate_sopken_forms": []
              },
              "\"conda metapackage \"": {
                "spoken_form": "anaconda metapackage",
                "alternate_sopken_forms": []
              },
              "\"conda render \"": {
                "spoken_form": "anaconda render",
                "alternate_sopken_forms": []
              },
              "\"conda server \"": {
                "spoken_form": "anaconda server",
                "alternate_sopken_forms": []
              },
              "\"conda skeleton \"": {
                "spoken_form": "anaconda skeleton",
                "alternate_sopken_forms": []
              },
              "\"conda verify \"": {
                "spoken_form": "anaconda verify",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/terraform/terraform.talon": {
        "context": {
          "terraform": {
            "action": {
              "\"terraform \"": {
                "spoken_form": "terraform",
                "alternate_sopken_forms": []
              },
              "\"terraform apply \"": {
                "spoken_form": "terraform apply",
                "alternate_sopken_forms": []
              },
              "\"terraform destroy \"": {
                "spoken_form": "terraform destroy",
                "alternate_sopken_forms": []
              },
              "\"terraform fmt -recursive\\n\"": {
                "spoken_form": "terraform format recursive",
                "alternate_sopken_forms": []
              },
              "\"terraform fmt\\n\"": {
                "spoken_form": "terraform format",
                "alternate_sopken_forms": []
              },
              "\"terraform -help\"": {
                "spoken_form": "terraform help",
                "alternate_sopken_forms": []
              },
              "\"terraform init -upgrade\\n\"": {
                "spoken_form": "terraform init upgrade",
                "alternate_sopken_forms": []
              },
              "\"terraform init\\n\"": {
                "spoken_form": "terraform init",
                "alternate_sopken_forms": []
              },
              "\"terraform plan\\n\"": {
                "spoken_form": "terraform plan",
                "alternate_sopken_forms": []
              },
              "\"terraform state mv \"": {
                "spoken_form": "terraform state move",
                "alternate_sopken_forms": []
              },
              "\"terraform validate\\n\"": {
                "spoken_form": "terraform validate",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/twitter/twitter.talon": {
        "context": {
          "twitter": {
            "action": {
              "key(?)": {
                "spoken_form": "(show shortcuts | shortcuts help)",
                "alternate_sopken_forms": []
              },
              "key(j)": {
                "spoken_form": "next tweet",
                "alternate_sopken_forms": []
              },
              "key(k)": {
                "spoken_form": "previous tweet",
                "alternate_sopken_forms": []
              },
              "key(space)": {
                "spoken_form": "page down",
                "alternate_sopken_forms": []
              },
              "key(.)": {
                "spoken_form": "load new tweet",
                "alternate_sopken_forms": []
              },
              "insert(\"gh\")": {
                "spoken_form": "go home",
                "alternate_sopken_forms": []
              },
              "insert(\"ge\")": {
                "spoken_form": "go explore",
                "alternate_sopken_forms": []
              },
              "insert(\"gn\")": {
                "spoken_form": "go notifications",
                "alternate_sopken_forms": []
              },
              "insert(\"gr\")": {
                "spoken_form": "go mentions",
                "alternate_sopken_forms": []
              },
              "insert(\"gp\")": {
                "spoken_form": "go profile",
                "alternate_sopken_forms": []
              },
              "insert(\"gl\")": {
                "spoken_form": "go likes",
                "alternate_sopken_forms": []
              },
              "insert(\"gi\")": {
                "spoken_form": "go lists",
                "alternate_sopken_forms": []
              },
              "insert(\"gm\")": {
                "spoken_form": "go direct messages",
                "alternate_sopken_forms": []
              },
              "insert(\"gs\")": {
                "spoken_form": "go settings",
                "alternate_sopken_forms": []
              },
              "insert(\"gb\")": {
                "spoken_form": "go book marks",
                "alternate_sopken_forms": []
              },
              "insert(\"gu\")": {
                "spoken_form": "go to user",
                "alternate_sopken_forms": []
              },
              "insert(\"gd\")": {
                "spoken_form": "display settings",
                "alternate_sopken_forms": []
              },
              "key(n)": {
                "spoken_form": "new tweet",
                "alternate_sopken_forms": []
              },
              "key(ctrl-enter)": {
                "spoken_form": "send tweet",
                "alternate_sopken_forms": []
              },
              "key(m)": {
                "spoken_form": "new direct message",
                "alternate_sopken_forms": []
              },
              "key(/)": {
                "spoken_form": "search",
                "alternate_sopken_forms": []
              },
              "key(l)": {
                "spoken_form": "like message",
                "alternate_sopken_forms": []
              },
              "key(r)": {
                "spoken_form": "reply message",
                "alternate_sopken_forms": []
              },
              "key(t)": {
                "spoken_form": "re tweet [message]",
                "alternate_sopken_forms": []
              },
              "key(s)": {
                "spoken_form": "share tweet",
                "alternate_sopken_forms": []
              },
              "key(b)": {
                "spoken_form": "bookmark",
                "alternate_sopken_forms": []
              },
              "key(urge)": {
                "spoken_form": "mute account",
                "alternate_sopken_forms": []
              },
              "key(x)": {
                "spoken_form": "block account",
                "alternate_sopken_forms": []
              },
              "key(enter)": {
                "spoken_form": "open details",
                "alternate_sopken_forms": []
              },
              "key(o)": {
                "spoken_form": "expand photo",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/gdb/gdb.talon": {
        "context": {
          "gdb": {
            "action": {
              "\"until {number}\"": {
                "spoken_form": "until <number>",
                "alternate_sopken_forms": []
              },
              "insert(\"d br\\n\")\ninsert(\"y\\n\")": {
                "spoken_form": "force clear all break points",
                "alternate_sopken_forms": []
              },
              "insert(\"break \")\nkey(ctrl-shift-v)\nkey(enter)": {
                "spoken_form": "break [on] clipboard",
                "alternate_sopken_forms": []
              },
              "\"list\\n\"": {
                "spoken_form": "list [source]",
                "alternate_sopken_forms": []
              },
              "\"info source\\n\"": {
                "spoken_form": "info source",
                "alternate_sopken_forms": []
              },
              "\"p \"": {
                "spoken_form": "print",
                "alternate_sopken_forms": []
              },
              "\"p {text}\"": {
                "spoken_form": "print [variable] <user.text>",
                "alternate_sopken_forms": []
              },
              "\"p/x \"": {
                "spoken_form": "print hex",
                "alternate_sopken_forms": []
              },
              "\"p/x {text}\"": {
                "spoken_form": "print hex [variable] <user.text>",
                "alternate_sopken_forms": []
              },
              "\"p/s \"": {
                "spoken_form": "print string",
                "alternate_sopken_forms": []
              },
              "\"x/{number}bx \"": {
                "spoken_form": "hex dump <number> bytes",
                "alternate_sopken_forms": []
              },
              "\"x/{number}hx \"": {
                "spoken_form": "hex dump <number> (half | short) words",
                "alternate_sopken_forms": []
              },
              "\"x/{number}dx \"": {
                "spoken_form": "hex dump <number> (d | long) words",
                "alternate_sopken_forms": []
              },
              "\"x/{number}gx \"": {
                "spoken_form": "hex dump <number> quad words",
                "alternate_sopken_forms": []
              },
              "\"x/100gx \"": {
                "spoken_form": "hex dump",
                "alternate_sopken_forms": []
              },
              "insert(\"x/100gx \")\nedit.copy()\nedit.paste()\nkey(enter)": {
                "spoken_form": "hex dump highlighted",
                "alternate_sopken_forms": []
              },
              "insert(\"x/100gx \")\nedit.paste()\nkey(enter)": {
                "spoken_form": "hex dump clipboard",
                "alternate_sopken_forms": []
              },
              "\"source \\t\\t\"": {
                "spoken_form": "source",
                "alternate_sopken_forms": []
              },
              "\"info display\\n\"": {
                "spoken_form": "(list | show | info) display",
                "alternate_sopken_forms": []
              },
              "\"display /i $pc\\n\"": {
                "spoken_form": "display assembly line",
                "alternate_sopken_forms": [
                  "display (assembly line|program counter|P C)"
                ]
              },
              "\"display \"": {
                "spoken_form": "display source",
                "alternate_sopken_forms": []
              },
              "\"enable display {number_small}\\n\"": {
                "spoken_form": "enable display <number_small>",
                "alternate_sopken_forms": []
              },
              "\"disable display {number_small}\\n\"": {
                "spoken_form": "disable display <number_small>",
                "alternate_sopken_forms": []
              },
              "\"undisplay\\n\"": {
                "spoken_form": "undisplay",
                "alternate_sopken_forms": []
              },
              "\"info local \"": {
                "spoken_form": "(list | show | info) local",
                "alternate_sopken_forms": []
              },
              "\"info local -t \"": {
                "spoken_form": "(list | show | info) local typed",
                "alternate_sopken_forms": []
              },
              "\"info variable \"": {
                "spoken_form": "(list | show | info) variable",
                "alternate_sopken_forms": []
              },
              "\"info variable -t \"": {
                "spoken_form": "(list | show | info) variable typed",
                "alternate_sopken_forms": []
              },
              "\"info local\\n\"": {
                "spoken_form": "(list | show | info) locals",
                "alternate_sopken_forms": []
              },
              "\"info variables\\n\"": {
                "spoken_form": "(list | show | info) variables",
                "alternate_sopken_forms": []
              },
              "\"info threads\\n\"": {
                "spoken_form": "info threads",
                "alternate_sopken_forms": ["(thread list|info threads)"]
              },
              "\"r\\n\"": {
                "spoken_form": "restart [program]",
                "alternate_sopken_forms": []
              },
              "\"c\\n\"": {
                "spoken_form": "continue",
                "alternate_sopken_forms": []
              },
              "\"bt\\n\"": {
                "spoken_form": "back trace",
                "alternate_sopken_forms": []
              },
              "\"quit\\n\"": {
                "spoken_form": "debug quit",
                "alternate_sopken_forms": []
              },
              "\"quit\\ny\\n\"": {
                "spoken_form": "debug force quit",
                "alternate_sopken_forms": []
              },
              "\"info inferiors\\n\"": {
                "spoken_form": "(show | info) (inf | inferiors)",
                "alternate_sopken_forms": ["info inferiors"]
              },
              "\"inferior {number_small}\\n\"": {
                "spoken_form": "inferior <number_small>",
                "alternate_sopken_forms": []
              },
              "\"inferior \"": {
                "spoken_form": "inferior",
                "alternate_sopken_forms": []
              },
              "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")": {
                "spoken_form": "resume main (inf | inferior)",
                "alternate_sopken_forms": ["resume from main"]
              },
              "insert(\"inferior {number_small}\\n\")\ninsert(\"c\\n\")": {
                "spoken_form": "resume [from] (inf | inferior) <number_small>",
                "alternate_sopken_forms": []
              },
              "\"set args \"": {
                "spoken_form": "set args",
                "alternate_sopken_forms": []
              },
              "\"show follow-fork-mode\\n\"": {
                "spoken_form": "show follow (fork | forks) [mode]",
                "alternate_sopken_forms": []
              },
              "\"set follow-fork-mode child\\n\"": {
                "spoken_form": "[set] follow (fork | forks) [mode] child",
                "alternate_sopken_forms": []
              },
              "\"set follow-fork-mode parent\\n\"": {
                "spoken_form": "[set] follow (fork | forks) [mode] parent",
                "alternate_sopken_forms": []
              },
              "\"show detach-on-fork\\n\"": {
                "spoken_form": "show detach on fork",
                "alternate_sopken_forms": []
              },
              "\"set detach-on-fork on\\n\"": {
                "spoken_form": "set detach on fork",
                "alternate_sopken_forms": []
              },
              "\"set detach-on-fork off\\n\"": {
                "spoken_form": "unset detach on fork",
                "alternate_sopken_forms": []
              },
              "\"show listsize\\n\"": {
                "spoken_form": "show list size",
                "alternate_sopken_forms": []
              },
              "\"set listsize {number_small}\\n\"": {
                "spoken_form": "set list size <number_small>",
                "alternate_sopken_forms": []
              },
              "\"shell clear\\n\"": {
                "spoken_form": "clear screen",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/talon_repl/talon_repl.talon": {
        "context": {
          "talon repl": {
            "action": {
              "phrase = user.history_get(1)\ncommand = \"sim('{phrase}')\"\ninsert(command)\nkey(enter)": {
                "spoken_form": "test last",
                "alternate_sopken_forms": []
              },
              "insert(\"sim('{phrase}')\")\nkey(enter)": {
                "spoken_form": "test <phrase>",
                "alternate_sopken_forms": []
              },
              "phrase = user.history_get(number_small)\ncommand = \"sim('{phrase}')\"\ninsert(command)\nkey(enter)": {
                "spoken_form": "test numb <number_small>",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.find('{user.talon_actions}')\")\nkey(enter)": {
                "spoken_form": "debug action {user.talon_actions}",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(registry.lists['{talon_lists}'])\")\nkey(enter)": {
                "spoken_form": "debug list {user.talon_lists}",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(registry.tags)\")\nkey(enter)": {
                "spoken_form": "debug tags",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(registry.settings)\")\nkey(enter)": {
                "spoken_form": "debug settings",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(scope.get('mode'))\")\nkey(enter)": {
                "spoken_form": "debug modes",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(scope.get('{talon_scopes}'))\")\nkey(enter)": {
                "spoken_form": "debug scope {user.talon_scopes}",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(ui.apps(background=False))\")\nkey(enter)": {
                "spoken_form": "debug running apps",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_pretty_print(ui.windows())\")\nkey(enter)": {
                "spoken_form": "debug all windows",
                "alternate_sopken_forms": []
              },
              "insert(\"actions.user.talon_debug_app_windows('{running}')\")\nkey(enter)": {
                "spoken_form": "debug {user.running} windows",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/discord/discord.talon": {
        "context": {
          "discord": {
            "action": {
              "user.discord_mentions_last()": {
                "spoken_form": "[channel] mentions last",
                "alternate_sopken_forms": []
              },
              "user.discord_mentions_next()": {
                "spoken_form": "[channel] mentions next",
                "alternate_sopken_forms": []
              },
              "user.discord_oldest_unread()": {
                "spoken_form": "oldest unread",
                "alternate_sopken_forms": []
              },
              "user.discord_quick_switcher(user.discord_destination, user.text or \"\")": {
                "spoken_form": "{user.discord_destination} [<user.text>]",
                "alternate_sopken_forms": []
              },
              "user.discord_quick_switcher(\"\", \"\")": {
                "spoken_form": "switcher",
                "alternate_sopken_forms": []
              },
              "user.discord_go_current_call()": {
                "spoken_form": "current call",
                "alternate_sopken_forms": []
              },
              "user.discord_toggle_dms()": {
                "spoken_form": "toggle (dee ems | dims)",
                "alternate_sopken_forms": []
              },
              "user.discord_toggle_pins()": {
                "spoken_form": "toggle pins",
                "alternate_sopken_forms": []
              },
              "user.discord_toggle_inbox()": {
                "spoken_form": "toggle inbox",
                "alternate_sopken_forms": []
              },
              "user.discord_toggle_members()": {
                "spoken_form": "toggle (members | member list)",
                "alternate_sopken_forms": []
              },
              "user.discord_emoji_picker()": {
                "spoken_form": "pick emoji",
                "alternate_sopken_forms": []
              },
              "user.discord_gif_picker()": {
                "spoken_form": "pick (jif | gif | gift)",
                "alternate_sopken_forms": []
              },
              "user.discord_mark_inbox_read()": {
                "spoken_form": "mark inbox channel read",
                "alternate_sopken_forms": []
              },
              "user.discord_mute()": {
                "spoken_form": "[toggle] (mute | unmute)",
                "alternate_sopken_forms": []
              },
              "user.discord_mute()\nspeech.disable()": {
                "spoken_form": "(mute | unmute) and sleep",
                "alternate_sopken_forms": []
              },
              "user.discord_deafen()": {
                "spoken_form": "[toggle] (deafen | undeafen)",
                "alternate_sopken_forms": []
              },
              "user.discord_answer_call()": {
                "spoken_form": "answer call",
                "alternate_sopken_forms": []
              },
              "user.discord_decline_call()": {
                "spoken_form": "decline call",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/eclipse/eclipse.talon": {
        "context": {
          "eclipse": {
            "action": {
              "key(ctrl-3)\ninsert(user.text or \"\")": {
                "spoken_form": "please [<user.text>]",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-w p)": {
                "spoken_form": "bar explore",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q o)": {
                "spoken_form": "bar outline",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q)\nsleep(200ms)\nkey(c)": {
                "spoken_form": "panel output",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q)\nsleep(200ms)\nkey(x)": {
                "spoken_form": "panel problems",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q)\nsleep(200ms)\nkey(l)": {
                "spoken_form": "panel errors",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q)\nsleep(200ms)\nkey(b)": {
                "spoken_form": "panel breakpoints",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q)\nsleep(200ms)\nkey(s)": {
                "spoken_form": "panel search",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-q)\nsleep(200ms)\nkey(v)": {
                "spoken_form": "panel variables",
                "alternate_sopken_forms": []
              },
              "key(alt-w p)": {
                "spoken_form": "show settings",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-l)": {
                "spoken_form": "show shortcuts",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-r)\nsleep(50ms)\ninsert(text or \"\")": {
                "spoken_form": "file hunt [<user.text>]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-n)": {
                "spoken_form": "file create",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-w x)": {
                "spoken_form": "file open folder",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-w p enter f2)": {
                "spoken_form": "file rename",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-w p enter)": {
                "spoken_form": "file reveal",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-o)": {
                "spoken_form": "imports fix",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-r)": {
                "spoken_form": "refactor rename",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-i)": {
                "spoken_form": "refactor this",
                "alternate_sopken_forms": []
              },
              "key(f3)": {
                "spoken_form": "(go declaration | follow)",
                "alternate_sopken_forms": []
              },
              "key(alt-left)": {
                "spoken_form": "go back",
                "alternate_sopken_forms": []
              },
              "key(alt-right)": {
                "spoken_form": "go forward",
                "alternate_sopken_forms": []
              },
              "key(alt-end)": {
                "spoken_form": "go marks",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-b down enter)": {
                "spoken_form": "toggle mark",
                "alternate_sopken_forms": []
              },
              "key(alt-pagedown)": {
                "spoken_form": "go next mark",
                "alternate_sopken_forms": []
              },
              "key(alt-pageup)": {
                "spoken_form": "go last mark",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-b)": {
                "spoken_form": "break point",
                "alternate_sopken_forms": []
              },
              "key(f6)": {
                "spoken_form": "step over",
                "alternate_sopken_forms": []
              },
              "key(f5)": {
                "spoken_form": "debug step into",
                "alternate_sopken_forms": []
              },
              "key(f7)": {
                "spoken_form": "debug step out [of]",
                "alternate_sopken_forms": []
              },
              "key(f8)": {
                "spoken_form": "debug continue",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-down)": {
                "spoken_form": "copy line down",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-up)": {
                "spoken_form": "copy line up",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/gitlab/gitlab.talon": {
        "context": {
          "gitlab": {
            "action": {
              "key(?)": {
                "spoken_form": "show shortcuts",
                "alternate_sopken_forms": []
              },
              "key(shift-p)": {
                "spoken_form": "go to projects [page]",
                "alternate_sopken_forms": []
              },
              "key(shift-g)": {
                "spoken_form": "go to groups [page]",
                "alternate_sopken_forms": []
              },
              "key(shift-a)": {
                "spoken_form": "go to activity [page]",
                "alternate_sopken_forms": []
              },
              "key(shift-l)": {
                "spoken_form": "go to milestones [page]",
                "alternate_sopken_forms": []
              },
              "key(shift-s)": {
                "spoken_form": "go to snippets [page]",
                "alternate_sopken_forms": []
              },
              "key(s)": {
                "spoken_form": "search page",
                "alternate_sopken_forms": []
              },
              "key(shift-i)": {
                "spoken_form": "go to issues [page]",
                "alternate_sopken_forms": []
              },
              "key(shift-m)": {
                "spoken_form": "go to merge requests [page]",
                "alternate_sopken_forms": []
              },
              "key(shift-t)": {
                "spoken_form": "go to to do [list] [page]",
                "alternate_sopken_forms": []
              },
              "key(p)": {
                "spoken_form": "previous [unresolved] discussion",
                "alternate_sopken_forms": []
              },
              "key(1)": {
                "spoken_form": "edit last comment",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-p)": {
                "spoken_form": "toggle mark down [preview]",
                "alternate_sopken_forms": []
              },
              "insert(\"gp\")": {
                "spoken_form": "go [to] project home [page]",
                "alternate_sopken_forms": []
              },
              "insert(\"gv\")": {
                "spoken_form": "go [to] project activity [feed]",
                "alternate_sopken_forms": []
              },
              "insert(\"gr\")": {
                "spoken_form": "go [to] project releases [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gf\")": {
                "spoken_form": "go [to] project files [list]",
                "alternate_sopken_forms": []
              },
              "key(t)": {
                "spoken_form": "go [to] project file search [page]",
                "alternate_sopken_forms": []
              },
              "insert(\"gc\")": {
                "spoken_form": "go [to] project (commit | commits) [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gn\")": {
                "spoken_form": "go [to] (repository | repo) graph [page]",
                "alternate_sopken_forms": []
              },
              "insert(\"gd\")": {
                "spoken_form": "go [to] (repository | repo) charts",
                "alternate_sopken_forms": []
              },
              "insert(\"gi\")": {
                "spoken_form": "go [to] project issues [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"i\")": {
                "spoken_form": "go [to] new issues [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gb\")": {
                "spoken_form": "go [to] project issues boards [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gm\")": {
                "spoken_form": "go [to] project merge requests [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gj\")": {
                "spoken_form": "go [to] jobs [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gl\")": {
                "spoken_form": "go [to] project metrics",
                "alternate_sopken_forms": []
              },
              "insert(\"ge\")": {
                "spoken_form": "go [to] project environments",
                "alternate_sopken_forms": []
              },
              "insert(\"gk\")": {
                "spoken_form": "go [to] project cubes",
                "alternate_sopken_forms": []
              },
              "insert(\"gs\")": {
                "spoken_form": "go [to] project snippets [list]",
                "alternate_sopken_forms": []
              },
              "insert(\"gw\")": {
                "spoken_form": "go [to] project wiki",
                "alternate_sopken_forms": []
              },
              "key(e)": {
                "spoken_form": "edit page",
                "alternate_sopken_forms": []
              },
              "key(a)": {
                "spoken_form": "change assignee",
                "alternate_sopken_forms": []
              },
              "key(m)": {
                "spoken_form": "change milestone",
                "alternate_sopken_forms": []
              },
              "key(l)": {
                "spoken_form": "change label",
                "alternate_sopken_forms": []
              },
              "key(r)": {
                "spoken_form": "right comment",
                "alternate_sopken_forms": []
              },
              "key(n)": {
                "spoken_form": "next [unresolved] discussion",
                "alternate_sopken_forms": []
              },
              "key(])": {
                "spoken_form": "next file",
                "alternate_sopken_forms": []
              },
              "key([)": {
                "spoken_form": "previous file",
                "alternate_sopken_forms": []
              },
              "key(escape)": {
                "spoken_form": "back to files",
                "alternate_sopken_forms": []
              },
              "key(y)": {
                "spoken_form": "open permalink",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/visualstudio/visual_studio.talon": {
        "context": {
          "visual studio": {
            "action": {
              "key(ctrl-alt-l)": {
                "spoken_form": "panel solution",
                "alternate_sopken_forms": []
              },
              "key(f4)": {
                "spoken_form": "panel properties",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-o)": {
                "spoken_form": "panel output",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-c)": {
                "spoken_form": "panel class",
                "alternate_sopken_forms": []
              },
              "key(ctrl-\\ ctrl-e)": {
                "spoken_form": "panel errors",
                "alternate_sopken_forms": []
              },
              "key(shift-f7)": {
                "spoken_form": "panel design",
                "alternate_sopken_forms": []
              },
              "key(ctrl-k ctrl-w)": {
                "spoken_form": "go marks",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-b)": {
                "spoken_form": "panel breakpoints",
                "alternate_sopken_forms": []
              },
              "key(alt-t o)": {
                "spoken_form": "show settings",
                "alternate_sopken_forms": []
              },
              "key(shift-alt-enter)": {
                "spoken_form": "fullscreen switch",
                "alternate_sopken_forms": []
              },
              "key(ctrl-e ctrl-w)": {
                "spoken_form": "wrap switch",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-t)\ninsert(text or \"\")": {
                "spoken_form": "file hunt [<user.text>]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-n)": {
                "spoken_form": "file create",
                "alternate_sopken_forms": []
              },
              "key(ctrl-[ s f2)": {
                "spoken_form": "file rename",
                "alternate_sopken_forms": []
              },
              "key(ctrl-[ s)": {
                "spoken_form": "file reveal",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-space)": {
                "spoken_form": "hint show",
                "alternate_sopken_forms": []
              },
              "key(f12)": {
                "spoken_form": "go implementation",
                "alternate_sopken_forms": []
              },
              "key(alt-f12)": {
                "spoken_form": "definition peek",
                "alternate_sopken_forms": []
              },
              "key(shift-f12)": {
                "spoken_form": "go usage",
                "alternate_sopken_forms": []
              },
              "key(ctrl-k ctrl-d)": {
                "spoken_form": "format that",
                "alternate_sopken_forms": []
              },
              "key(ctrl-k ctrl-f)": {
                "spoken_form": "format selection",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-g)": {
                "spoken_form": "imports fix",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-e)": {
                "spoken_form": "refactor field",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-i)": {
                "spoken_form": "refactor interface",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-m)": {
                "spoken_form": "refactor method",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-o)": {
                "spoken_form": "refactor reorder parameters",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-v)": {
                "spoken_form": "refactor remove parameters",
                "alternate_sopken_forms": []
              },
              "key(ctrl-r ctrl-r)": {
                "spoken_form": "refactor that",
                "alternate_sopken_forms": []
              },
              "key(ctrl-f12)": {
                "spoken_form": "(go declaration | follow)",
                "alternate_sopken_forms": []
              },
              "key(ctrl--)": {
                "spoken_form": "go back",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift--)": {
                "spoken_form": "go forward",
                "alternate_sopken_forms": []
              },
              "key(ctrl-1 ctrl-r)\nsleep(100ms)\ninsert(text or \"\")": {
                "spoken_form": "go recent [<user.text>]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-1 ctrl-t)\nsleep(100ms)\ninsert(text or \"\")": {
                "spoken_form": "go type [<user.text>]",
                "alternate_sopken_forms": []
              },
              "key(alt-\\)\nsleep(100ms)\ninsert(text or \"\")": {
                "spoken_form": "go member [<user.text>]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-k ctrl-k)": {
                "spoken_form": "toggle mark",
                "alternate_sopken_forms": []
              },
              "key(ctrl-k ctrl-n)": {
                "spoken_form": "go next mark",
                "alternate_sopken_forms": []
              },
              "key(ctrl-k ctrl-p)": {
                "spoken_form": "go last mark",
                "alternate_sopken_forms": []
              },
              "key(ctrl-m ctrl-m)": {
                "spoken_form": "fold toggle",
                "alternate_sopken_forms": []
              },
              "key(ctrl-m ctrl-l)": {
                "spoken_form": "fold toggle all",
                "alternate_sopken_forms": []
              },
              "key(ctrl-m ctrl-o)": {
                "spoken_form": "fold definitions",
                "alternate_sopken_forms": []
              },
              "key(f9)": {
                "spoken_form": "break point",
                "alternate_sopken_forms": []
              },
              "key(f10)": {
                "spoken_form": "debug step out [of]",
                "alternate_sopken_forms": []
              },
              "key(f11)": {
                "spoken_form": "debug step into",
                "alternate_sopken_forms": []
              },
              "key(f5)": {
                "spoken_form": "debug continue",
                "alternate_sopken_forms": []
              },
              "key(shift-f5)": {
                "spoken_form": "debug stopper",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/windows_terminal/windows_terminal.talon": {
        "context": {
          "windows terminal": {
            "action": {
              "key(ctrl-,)": {
                "spoken_form": "settings open",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-shift-left)": {
                "spoken_form": "focus left",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-shift-right)": {
                "spoken_form": "focus right",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-shift-up)": {
                "spoken_form": "focus up",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-shift-down)": {
                "spoken_form": "focus down",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-f1)": {
                "spoken_form": "term menu",
                "alternate_sopken_forms": []
              },
              "edit.find()": {
                "spoken_form": "find it",
                "alternate_sopken_forms": []
              },
              "key(escape)\nedit.find(\"{phrase}\\n\")": {
                "spoken_form": "find it <phrase>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/i3wm/i3wm.talon": {
        "context": {
          "i3wm": {
            "action": {
              "user.system_command(\"i3-msg workspace number {number_small}\")": {
                "spoken_form": "port <number_small>",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg workspace back_and_forth\")": {
                "spoken_form": "(port flip | flipper)",
                "alternate_sopken_forms": ["(portal flip|flipper)"]
              },
              "user.system_command(\"i3-msg workspace next\")": {
                "spoken_form": "port right",
                "alternate_sopken_forms": ["portal right"]
              },
              "user.system_command(\"i3-msg workspace prev\")": {
                "spoken_form": "port left",
                "alternate_sopken_forms": ["portal left"]
              },
              "user.system_command(\"i3-msg focus left\")": {
                "spoken_form": "(win | window) left",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg focus right\")": {
                "spoken_form": "(win | window) right",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg focus up\")": {
                "spoken_form": "(win | window) up",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg focus down\")": {
                "spoken_form": "(win | window) down",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg kill\")": {
                "spoken_form": "(win | window) kill",
                "alternate_sopken_forms": ["(win|window) kill"]
              },
              "user.system_command(\"i3-msg layout stacking\")": {
                "spoken_form": "(win | window) stacking",
                "alternate_sopken_forms": ["(win|window) stack"]
              },
              "user.system_command(\"i3-msg layout toggle split\")": {
                "spoken_form": "(win | window) default",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg layout tabbed\")": {
                "spoken_form": "(win | window) tabbed",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg reload\")": {
                "spoken_form": "reload i three config",
                "alternate_sopken_forms": ["i three reload"]
              },
              "user.system_command(\"i3-msg restart\")": {
                "spoken_form": "restart i three",
                "alternate_sopken_forms": ["i three restart"]
              },
              "user.system_command(\"i3-msg fullscreen\")": {
                "spoken_form": "(full screen | scuba)",
                "alternate_sopken_forms": ["[window] full screen"]
              },
              "user.system_command(\"i3-msg floating toggle\")": {
                "spoken_form": "toggle floating",
                "alternate_sopken_forms": ["[window] floating toggle"]
              },
              "user.system_command(\"i3-msg focus mode_toggle\")": {
                "spoken_form": "focus floating",
                "alternate_sopken_forms": ["[window] floating focus"]
              },
              "user.system_command(\"i3-msg move position center\")": {
                "spoken_form": "center window",
                "alternate_sopken_forms": ["window center"]
              },
              "user.system_command('i3-msg mode \"resize\"')": {
                "spoken_form": "resize mode",
                "alternate_sopken_forms": ["window resize"]
              },
              "user.system_command(\"i3-msg focus parent\")": {
                "spoken_form": "focus parent",
                "alternate_sopken_forms": ["window focus parent"]
              },
              "user.system_command(\"i3-msg focus child\")": {
                "spoken_form": "focus child",
                "alternate_sopken_forms": ["window focus child"]
              },
              "user.system_command('i3-msg mode \"resize\"')\nkey(right:10)\nkey(down:10)\nkey(escape)\nsleep(200ms)\nuser.system_command(\"i3-msg move position center\")": {
                "spoken_form": "grow window",
                "alternate_sopken_forms": []
              },
              "user.system_command('i3-msg mode \"resize\"')\nkey(left:10)\nkey(up:10)\nkey(escape)\nsleep(200ms)\nuser.system_command(\"i3-msg move position center\")": {
                "spoken_form": "shrink window",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg split h\")\nuser.i3wm_shell()": {
                "spoken_form": "horizontal (shell | terminal)",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg split v\")\nuser.i3wm_shell()": {
                "spoken_form": "vertical (shell | terminal)",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg move container to workspace number {number_small}\")": {
                "spoken_form": "(shuffle | move (win | window) [to] port) <number_small>",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg move container to workspace back_and_forth\")": {
                "spoken_form": "(shuffle | move) flipper",
                "alternate_sopken_forms": ["shuffle flip"]
              },
              "user.system_command(\"i3-msg move left\")": {
                "spoken_form": "(shuffle | move (win | window) left)",
                "alternate_sopken_forms": ["window move left", "shuffle left"]
              },
              "user.system_command(\"i3-msg move right\")": {
                "spoken_form": "(shuffle | move (win | window) right)",
                "alternate_sopken_forms": ["window move right", "shuffle right"]
              },
              "user.system_command(\"i3-msg move up\")": {
                "spoken_form": "(shuffle | move (win | window) up)",
                "alternate_sopken_forms": ["window move up", "shuffle up"]
              },
              "user.system_command(\"i3-msg move down\")": {
                "spoken_form": "(shuffle | move (win | window) down)",
                "alternate_sopken_forms": ["window move down", "shuffle down"]
              },
              "user.system_command(\"i3-msg split h\")": {
                "spoken_form": "(win | window) horizontal",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg split v\")": {
                "spoken_form": "(win | window) vertical",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg move scratchpad\")": {
                "spoken_form": "make scratch",
                "alternate_sopken_forms": ["[window] make scratch"]
              },
              "user.system_command(\"i3-msg scratchpad show\")": {
                "spoken_form": "[(show | hide)] scratch",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"i3-msg scratchpad show\")\nuser.system_command(\"i3-msg scratchpad show\")": {
                "spoken_form": "next scratch",
                "alternate_sopken_forms": []
              },
              "user.i3wm_launch()": {
                "spoken_form": "launch",
                "alternate_sopken_forms": ["screen lock"]
              },
              "user.i3wm_launch()\nsleep(100ms)\ninsert(\"{text}\")": {
                "spoken_form": "launch <user.text>",
                "alternate_sopken_forms": []
              },
              "user.i3wm_lock()": {
                "spoken_form": "lock screen",
                "alternate_sopken_forms": []
              },
              "user.i3wm_shell()": {
                "spoken_form": "(launch shell | koopa)",
                "alternate_sopken_forms": ["term me"]
              },
              "user.i3wm_shell()\nsleep(200ms)\nuser.system_command(\"i3-msg move scratchpad\")\nuser.system_command(\"i3-msg scratchpad show\")": {
                "spoken_form": "new scratch (shell | window)",
                "alternate_sopken_forms": []
              },
              "user.deprecate_command(\"2023-02-04\", \"murder\", \"win kill\")\nuser.system_command(\"i3-msg kill\")": {
                "spoken_form": "murder",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/windows_explorer/windows_explorer.talon": {
        "context": {
          "windows explorer": {
            "action": {
              "user.file_manager_open_volume(\"{letter}:\")": {
                "spoken_form": "go <user.letter>",
                "alternate_sopken_forms": []
              },
              "user.file_manager_open_directory(\"%AppData%\")": {
                "spoken_form": "go app data",
                "alternate_sopken_forms": []
              },
              "user.file_manager_open_directory(\"%programfiles%\")": {
                "spoken_form": "go program files",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/windbg/windbg.talon": {
        "context": {
          "windbg": {
            "action": {
              "key(@)\ninsert(\"{registers}\")": {
                "spoken_form": "register <user.registers>",
                "alternate_sopken_forms": []
              },
              "insert(\".hh\\n\")": {
                "spoken_form": "open help",
                "alternate_sopken_forms": []
              },
              "insert(\"srv*C:\\\\symbols*http://msdl.microsoft.com/download/symbols;\\n\")": {
                "spoken_form": "add microsoft symbols",
                "alternate_sopken_forms": []
              },
              "insert(\".reload /f\\n\")": {
                "spoken_form": "force reload symbols",
                "alternate_sopken_forms": []
              },
              "insert(\".reload\\n\")": {
                "spoken_form": "reload symbols",
                "alternate_sopken_forms": []
              },
              "insert(\"lm l\\n\")": {
                "spoken_form": "loaded modules",
                "alternate_sopken_forms": []
              },
              "insert(\"dps \")": {
                "spoken_form": "display pointers",
                "alternate_sopken_forms": []
              },
              "user.insert_between(\"poi(\", \")\")": {
                "spoken_form": "dereference pointer",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-w)": {
                "spoken_form": "show version",
                "alternate_sopken_forms": []
              },
              "key(alt-1)": {
                "spoken_form": "view command",
                "alternate_sopken_forms": []
              },
              "key(alt-2)": {
                "spoken_form": "view watch",
                "alternate_sopken_forms": []
              },
              "key(alt-3)": {
                "spoken_form": "view locals",
                "alternate_sopken_forms": []
              },
              "key(alt-4)": {
                "spoken_form": "view registers",
                "alternate_sopken_forms": []
              },
              "key(alt-5)": {
                "spoken_form": "view memory",
                "alternate_sopken_forms": []
              },
              "key(alt-6)": {
                "spoken_form": "view call stack",
                "alternate_sopken_forms": []
              },
              "key(alt-7)": {
                "spoken_form": "view disassembly",
                "alternate_sopken_forms": []
              },
              "key(alt-8)": {
                "spoken_form": "view scratch pad",
                "alternate_sopken_forms": []
              },
              "key(alt-9)": {
                "spoken_form": "view (processes | threads)",
                "alternate_sopken_forms": []
              },
              "\"r @rcx,@rdx,@r8,@r9\\n\"": {
                "spoken_form": "dump function params",
                "alternate_sopken_forms": []
              },
              "\"{windows_dlls}\"": {
                "spoken_form": "(lib | library) <user.windows_dlls>",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/amethyst/amethyst.talon": {
        "context": {
          "amethyst": {
            "action": {
              "key(\"alt-shift-j\")": {
                "spoken_form": "window next",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-k\")": {
                "spoken_form": "window previous",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-d\")": {
                "spoken_form": "window full",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-a\")": {
                "spoken_form": "window tall",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-`\")": {
                "spoken_form": "window middle",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-enter\")": {
                "spoken_form": "window move main",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-l\")": {
                "spoken_form": "window grow",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-h\")": {
                "spoken_form": "window shrink",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-z\")": {
                "spoken_form": "window reevaluate",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/rstudio/rstudio_mac.talon": {
        "context": {
          "rstudio mac": {
            "action": {
              "key(\"cmd-enter\")": {
                "spoken_form": "run that",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-r\")": {
                "spoken_form": "run document",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-b\")": {
                "spoken_form": "run from top",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-e\")": {
                "spoken_form": "run to end",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-f\")": {
                "spoken_form": "run (function | funk)",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-t\")": {
                "spoken_form": "run section",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-p\")": {
                "spoken_form": "run previous chunks",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-c\")": {
                "spoken_form": "run chunk",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-n\")": {
                "spoken_form": "run next chunk",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-s\")": {
                "spoken_form": "run all",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-k\")": {
                "spoken_form": "run knitter",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-alt-p\")": {
                "spoken_form": "run profiler",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-f9\")": {
                "spoken_form": "jump back",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-f10\")": {
                "spoken_form": "jump forward",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-w\")": {
                "spoken_form": "close all tabs",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-i\")": {
                "spoken_form": "indent lines",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-c\")": {
                "spoken_form": "toggle comment",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-/\")": {
                "spoken_form": "reformat comment",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-a\")": {
                "spoken_form": "reformat R code",
                "alternate_sopken_forms": []
              },
              "key(\"alt-up\")": {
                "spoken_form": "line up",
                "alternate_sopken_forms": []
              },
              "key(\"alt-down\")": {
                "spoken_form": "line down",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-up\")": {
                "spoken_form": "duplicate line up",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-down\")": {
                "spoken_form": "duplicate line [down]",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-e\")": {
                "spoken_form": "select to paren",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-alt-e\")": {
                "spoken_form": "select to matching paren",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-p\")": {
                "spoken_form": "jump to matching",
                "alternate_sopken_forms": []
              },
              "key(\"shift-alt-cmd-up\")": {
                "spoken_form": "expand selection",
                "alternate_sopken_forms": []
              },
              "key(\"shift-alt-cmd-down\")": {
                "spoken_form": "reduce selection",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-alt-up\")": {
                "spoken_form": "add cursor up",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-alt-down\")": {
                "spoken_form": "add cursor down",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-alt-shift-up\")": {
                "spoken_form": "move active cursor up",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-alt-shift-down\")": {
                "spoken_form": "move active cursor down",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-d\")": {
                "spoken_form": "delete line",
                "alternate_sopken_forms": []
              },
              "key(\"alt-backspace\")": {
                "spoken_form": "delete word left",
                "alternate_sopken_forms": []
              },
              "key(\"alt-delete\")": {
                "spoken_form": "delete word right",
                "alternate_sopken_forms": []
              },
              "key(\"alt--\")": {
                "spoken_form": "assign that",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-m\")": {
                "spoken_form": "pipe that",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-i\")": {
                "spoken_form": "insert knitter chunk",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-l\")": {
                "spoken_form": "fold that",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-alt-l\")": {
                "spoken_form": "unfold that",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-o\")": {
                "spoken_form": "fold all",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-alt-o\")": {
                "spoken_form": "unfold all",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-f\")": {
                "spoken_form": "find and replace",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-g\")": {
                "spoken_form": "find next",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-g\")": {
                "spoken_form": "find previous",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-e\")": {
                "spoken_form": "find with selection",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-f\")": {
                "spoken_form": "find in files",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-j\")": {
                "spoken_form": "run replace",
                "alternate_sopken_forms": []
              },
              "key(\"f7\")": {
                "spoken_form": "run spell check",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-1\")": {
                "spoken_form": "go to source",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-2\")": {
                "spoken_form": "go to console",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-3\")": {
                "spoken_form": "go to help",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-4\")": {
                "spoken_form": "go to history",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-5\")": {
                "spoken_form": "go to files",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-6\")": {
                "spoken_form": "go to (plots | plot)",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-7\")": {
                "spoken_form": "go to packages",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-8\")": {
                "spoken_form": "go to environment",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-9\")": {
                "spoken_form": "go to git",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-0\")": {
                "spoken_form": "go to build",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-t\")": {
                "spoken_form": "go to terminal",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-.\")": {
                "spoken_form": "go to omni",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-alt-g\")": {
                "spoken_form": "go to line",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-alt-j\")": {
                "spoken_form": "go to section",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-.\")": {
                "spoken_form": "go to tab",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-f11\")": {
                "spoken_form": "go to previous tab",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-f12\")": {
                "spoken_form": "go to next tab",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-f11\")": {
                "spoken_form": "go to first tab",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-f12\")": {
                "spoken_form": "go to last tab",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-1\")": {
                "spoken_form": "zoom source",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-0\")": {
                "spoken_form": "(zoom | show) all",
                "alternate_sopken_forms": []
              },
              "key(\"f1\")": {
                "spoken_form": "help that",
                "alternate_sopken_forms": []
              },
              "key(\"f2\")": {
                "spoken_form": "define that",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-f11\")": {
                "spoken_form": "previous plot",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-alt-f12\")": {
                "spoken_form": "next plot",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-f10\")": {
                "spoken_form": "restart R session",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-b\")": {
                "spoken_form": "dev tools build",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-l\")": {
                "spoken_form": "dev tools load all",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-t\")": {
                "spoken_form": "dev tools test",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-e\")": {
                "spoken_form": "dev tools check",
                "alternate_sopken_forms": []
              },
              "key(\"cmd-shift-d\")": {
                "spoken_form": "dev tools document",
                "alternate_sopken_forms": []
              },
              "key(\"shift-f9\")": {
                "spoken_form": "toggle breakpoint",
                "alternate_sopken_forms": []
              },
              "key(\"f10\")": {
                "spoken_form": "debug next",
                "alternate_sopken_forms": []
              },
              "key(\"shift-f4\")": {
                "spoken_form": "debug step into (function | funk)",
                "alternate_sopken_forms": []
              },
              "key(\"shift-f6\")": {
                "spoken_form": "debug finish (function | funk)",
                "alternate_sopken_forms": []
              },
              "key(\"shift-f5\")": {
                "spoken_form": "debug continue",
                "alternate_sopken_forms": []
              },
              "key(\"shift-f8\")": {
                "spoken_form": "debug stop",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-alt-d\")": {
                "spoken_form": "run git diff",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-alt-m\")": {
                "spoken_form": "run git commit",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/dunst/dunst.talon": {
        "context": {
          "dunst": {
            "action": {
              "key(ctrl-`)": {
                "spoken_form": "show notifications",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"dunstctl close\")": {
                "spoken_form": "dismiss [notifications]",
                "alternate_sopken_forms": []
              },
              "user.system_command(\"dunstctl close-all\")": {
                "spoken_form": "dismiss all [notifications]",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/jetbrains/jetbrains.talon": {
        "context": {
          "jetbrains": {
            "action": {
              "user.idea(\"action CodeCompletion\")": {
                "spoken_form": "complete",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CodeCompletion,action CodeCompletion\")": {
                "spoken_form": "perfect",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action SmartTypeCompletion\")": {
                "spoken_form": "smart",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorCompleteStatement\")": {
                "spoken_form": "(done | finish)",
                "alternate_sopken_forms": ["finish"]
              },
              "user.idea_grab(number)": {
                "spoken_form": "grab <number>",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoAction\")": {
                "spoken_form": "(action | please)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoAction\")\ninsert(text)": {
                "spoken_form": "(action | please) <user.text>",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Refactorings.QuickListPopupAction\")": {
                "spoken_form": "refactor",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Refactorings.QuickListPopupAction\")\ninsert(text)": {
                "spoken_form": "refactor <user.text>",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action IntroduceVariable\")": {
                "spoken_form": "extract variable",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action IntroduceField\")": {
                "spoken_form": "extract field",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action IntroduceConstant\")": {
                "spoken_form": "extract constant",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action IntroduceParameter\")": {
                "spoken_form": "extract parameter",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ExtractInterface\")": {
                "spoken_form": "extract interface",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ExtractMethod\")": {
                "spoken_form": "extract method",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Inline\")": {
                "spoken_form": "refactor in line",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Move\")": {
                "spoken_form": "refactor move",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action RenameElement\")": {
                "spoken_form": "refactor rename",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action RenameFile\")": {
                "spoken_form": "rename file",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ReformatCode\")": {
                "spoken_form": "fix (format | formatting)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action OptimizeImports\")": {
                "spoken_form": "fix imports",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoDeclaration\")": {
                "spoken_form": "(go declaration | follow)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoImplementation\")": {
                "spoken_form": "go implementation",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action FindUsages\")": {
                "spoken_form": "go usage",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoTypeDeclaration\")": {
                "spoken_form": "go type",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoTest\")": {
                "spoken_form": "go test",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Back\")": {
                "spoken_form": "go back",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Forward\")": {
                "spoken_form": "go forward",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action SearchEverywhere\")": {
                "spoken_form": "find (everywhere | all)",
                "alternate_sopken_forms": ["(find | marco) (everywhere | all)"]
              },
              "user.idea(\"action SearchEverywhere\")\nsleep(500ms)\ninsert(text)": {
                "spoken_form": "find (everywhere | all) <user.text> [over]",
                "alternate_sopken_forms": [
                  "(find | marco) (everywhere | all) <user.text> [over]"
                ]
              },
              "user.idea(\"action GotoClass\")": {
                "spoken_form": "(search | find) class",
                "alternate_sopken_forms": ["(search | find | marco) class"]
              },
              "user.idea(\"action GotoFile\")": {
                "spoken_form": "(search | find) file",
                "alternate_sopken_forms": [
                  "(search | find | marco) file",
                  "peach"
                ]
              },
              "user.idea(\"action FindInPath\")": {
                "spoken_form": "(search | find) path",
                "alternate_sopken_forms": ["marco project"]
              },
              "user.idea(\"action GotoSymbol\")": {
                "spoken_form": "(search | find) symbol",
                "alternate_sopken_forms": ["(search | find | marco) symbol"]
              },
              "user.idea(\"action GotoSymbol\")\ninsert(text)\nkey(\"enter\")": {
                "spoken_form": "(search | find) symbol <user.text>",
                "alternate_sopken_forms": [
                  "(search | find | marco) symbol <user.text>"
                ]
              },
              "user.idea(\"action RecentFiles\")": {
                "spoken_form": "recent",
                "alternate_sopken_forms": []
              },
              "idea(\"action SurroundWith\")\nsleep(500ms)\ninsert(text)": {
                "spoken_form": "surround [this] with <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Generate\")\nsleep(500ms)\ninsert(text)": {
                "spoken_form": "insert generated <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "idea(\"action InsertLiveTemplate\")\nsleep(500ms)\ninsert(text)": {
                "spoken_form": "insert template <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action SaveAsTemplate\")": {
                "spoken_form": "create (template | snippet)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action StartStopMacroRecording\")": {
                "spoken_form": "toggle recording",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditMacros\")": {
                "spoken_form": "change (recording | recordings)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action PlaybackLastMacro\")": {
                "spoken_form": "play recording",
                "alternate_sopken_forms": []
              },
              "idea(\"action PlaySavedMacrosAction\")\ninsert(text)\nsleep(500ms)\nKey(\"enter\")": {
                "spoken_form": "play recording <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ShowBookmarks\")": {
                "spoken_form": "go mark",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleBookmark\")": {
                "spoken_form": "toggle mark",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoNextBookmark\")": {
                "spoken_form": "go next mark",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoPreviousBookmark\")": {
                "spoken_form": "go last mark",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleBookmark{number}\")": {
                "spoken_form": "toggle mark <number>",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoBookmark{number}\")": {
                "spoken_form": "go mark <number>",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ExpandRegionRecursively\")": {
                "spoken_form": "expand deep",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ExpandAllRegions\")": {
                "spoken_form": "expand all",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CollapseRegionRecursively\")": {
                "spoken_form": "collapse deep",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CollapseAllRegions\")": {
                "spoken_form": "collapse all",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action MethodDown\")": {
                "spoken_form": "go next (method | function)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action MethodUp\")": {
                "spoken_form": "go last (method | function)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action PasteMultiple\")": {
                "spoken_form": "clippings",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CopyPaths\")": {
                "spoken_form": "copy path",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CopyReference\")": {
                "spoken_form": "copy reference",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CopyAsRichText\")": {
                "spoken_form": "copy pretty",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action NewElementSamePlace\")": {
                "spoken_form": "create sibling",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action NewElementSamePlace\")\nsleep(500ms)\ninsert(text)": {
                "spoken_form": "create sibling <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action NewElement\")": {
                "spoken_form": "create file",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action NewElement\")\nsleep(500ms)\ninsert(text)": {
                "spoken_form": "create file <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action tasks.goto\")": {
                "spoken_form": "go task",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action tasks.open.in.browser\")": {
                "spoken_form": "go browser task",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action tasks.switch\")": {
                "spoken_form": "switch task",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action tasks.close\")": {
                "spoken_form": "clear task",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action tasks.configure.servers\")": {
                "spoken_form": "configure servers",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Vcs.UpdateProject\")": {
                "spoken_form": "git pull",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action CheckinProject\")": {
                "spoken_form": "git push",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Vcs.ShowTabbedFileHistory\")": {
                "spoken_form": "git log",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Github.Open.In.Browser\")": {
                "spoken_form": "git browse",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Github.Create.Gist\")": {
                "spoken_form": "git (gets | gist)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Github.Create.Pull.Request\")": {
                "spoken_form": "git (pull request | request)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Github.View.Pull.Request\")": {
                "spoken_form": "git (view | show | list) (requests | request)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Annotate\")": {
                "spoken_form": "git (annotate | blame)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Vcs.QuickListPopupAction\")": {
                "spoken_form": "git menu",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateProjectToolWindow\")": {
                "spoken_form": "toggle project",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateFindToolWindow\")": {
                "spoken_form": "toggle find",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateRunToolWindow\")": {
                "spoken_form": "toggle run",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateDebugToolWindow\")": {
                "spoken_form": "toggle debug",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateEventLogToolWindow\")": {
                "spoken_form": "toggle events",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateTerminalToolWindow\")": {
                "spoken_form": "toggle terminal",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateVersionControlToolWindow\")": {
                "spoken_form": "toggle git",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateStructureToolWindow\")": {
                "spoken_form": "toggle structure",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateDatabaseToolWindow\")": {
                "spoken_form": "toggle database",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateDatabaseChangesToolWindow\")": {
                "spoken_form": "toggle database changes",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivatemakeToolWindow\")": {
                "spoken_form": "toggle make",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateTODOToolWindow\")": {
                "spoken_form": "toggle to do",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateDockerToolWindow\")": {
                "spoken_form": "toggle docker",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ActivateFavoritesToolWindow\")": {
                "spoken_form": "toggle favorites",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action JumpToLastWindow\")": {
                "spoken_form": "toggle last",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action TogglePinnedMode\")": {
                "spoken_form": "toggle pinned",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleDockMode\")": {
                "spoken_form": "toggle docked",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleFloatingMode\")": {
                "spoken_form": "toggle floating",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleWindowedMode\")": {
                "spoken_form": "toggle windowed",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleSideMode\")": {
                "spoken_form": "toggle split",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ViewToolButtons\")": {
                "spoken_form": "toggle tool buttons",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ViewToolBar\")": {
                "spoken_form": "toggle toolbar",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ViewStatusBar\")": {
                "spoken_form": "toggle status [bar]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ViewNavigationBar\")": {
                "spoken_form": "toggle navigation [bar]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action TogglePowerSave\")": {
                "spoken_form": "toggle power save",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorToggleShowWhitespaces\")": {
                "spoken_form": "toggle whitespace",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorToggleShowIndentLines\")": {
                "spoken_form": "toggle indents",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorToggleShowLineNumbers\")": {
                "spoken_form": "toggle line numbers",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorToggleShowBreadcrumbs\")": {
                "spoken_form": "toggle (bread crumbs | breadcrumbs)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorToggleShowGutterIcons\")": {
                "spoken_form": "toggle gutter icons",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorToggleUseSoftWraps\")": {
                "spoken_form": "toggle wrap",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleInlineHintsAction\")": {
                "spoken_form": "toggle parameters",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleFullScreen\")": {
                "spoken_form": "toggle fullscreen",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleDistractionFreeMode\")": {
                "spoken_form": "toggle distraction [free mode]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action TogglePresentationMode\")": {
                "spoken_form": "toggle presentation [mode]",
                "alternate_sopken_forms": []
              },
              "code.toggle_comment()": {
                "spoken_form": "toggle comment",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action QuickChangeScheme\")": {
                "spoken_form": "change scheme",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action QuickJavaDoc\")": {
                "spoken_form": "(toggle | pop) (doc | documentation)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action QuickImplementations\")": {
                "spoken_form": "(pop deaf | toggle definition)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ExpressionTypeInfo\")": {
                "spoken_form": "pop type",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ParameterInfo\")": {
                "spoken_form": "pop parameters",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ViewBreakpoints\")": {
                "spoken_form": "go breakpoints",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleLineBreakpoint\")": {
                "spoken_form": "toggle [line] breakpoint",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ToggleMethodBreakpoint\")": {
                "spoken_form": "toggle method breakpoint",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ChooseRunConfiguration\")": {
                "spoken_form": "run menu",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action RunClass\")": {
                "spoken_form": "run test",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Rerun\")": {
                "spoken_form": "run test again",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action DebugClass\")": {
                "spoken_form": "debug test",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action StepOver\")": {
                "spoken_form": "step over",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action StepInto\")": {
                "spoken_form": "step into",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action SmartStepInto\")": {
                "spoken_form": "step smart",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action RunToCursor\")": {
                "spoken_form": "step to line",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action Resume\")": {
                "spoken_form": "continue",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ResizeToolWindowRight\")": {
                "spoken_form": "(grow | shrink) window right",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ResizeToolWindowLeft\")": {
                "spoken_form": "(grow | shrink) window left",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ResizeToolWindowUp\")": {
                "spoken_form": "(grow | shrink) window up",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action ResizeToolWindowDown\")": {
                "spoken_form": "(grow | shrink) window down",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoNextError\")": {
                "spoken_form": "go next (error | air)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoPreviousError\")": {
                "spoken_form": "go last (error | air)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoNextError\")\nuser.idea(\"action ShowIntentionActions\")": {
                "spoken_form": "fix next (error | air)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action GotoPreviousError\")\nuser.idea(\"action ShowIntentionActions\")": {
                "spoken_form": "fix last (error | air)",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorUnSelectWord\")": {
                "spoken_form": "select less",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action EditorSelectWord\")": {
                "spoken_form": "select (more | this)",
                "alternate_sopken_forms": ["cell expand"]
              },
              "user.select_range(number_1, number_2)\nuser.idea(\"action ExpandRegion\")": {
                "spoken_form": "expand <number> until <number>",
                "alternate_sopken_forms": []
              },
              "user.select_range(number_1, number_2)\nuser.idea(\"action CollapseRegion\")": {
                "spoken_form": "collapse <number> until <number>",
                "alternate_sopken_forms": []
              },
              "user.select_range(number_1, number_2)\nuser.idea(\"action EditorPaste\")": {
                "spoken_form": "paste <number> until <number>",
                "alternate_sopken_forms": []
              },
              "user.select_range(number_1, number_2)\nuser.idea(\"action Refactorings.QuickListPopupAction\")": {
                "spoken_form": "refactor <number> until <number>",
                "alternate_sopken_forms": []
              },
              "user.line_clone(number)": {
                "spoken_form": "clone <number>",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}, action EditorBackSpace\")": {
                "spoken_form": "clear last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}, action EditorBackSpace\")": {
                "spoken_form": "clear next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}, action CommentByLineComment\")": {
                "spoken_form": "comment last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}, action CommentByLineComment\")": {
                "spoken_form": "comment next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}, action EditorRight\")": {
                "spoken_form": "go last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}, action EditorRight\")": {
                "spoken_form": "go next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}, action EditorRight, action EditorPaste\")": {
                "spoken_form": "paste last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}, action EditorRight, action EditorPaste\")": {
                "spoken_form": "paste next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}, action Refactorings.QuickListPopupAction\")": {
                "spoken_form": "refactor last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}, action Refactorings.QuickListPopupAction\")": {
                "spoken_form": "refactor next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}, action EditorPaste\")": {
                "spoken_form": "replace last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}, action EditorPaste\")": {
                "spoken_form": "replace next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find prev {text}\")": {
                "spoken_form": "select last <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.idea(\"find next {text}\")": {
                "spoken_form": "select next <user.text> [over]",
                "alternate_sopken_forms": []
              },
              "user.extend_camel_left()": {
                "spoken_form": "select camel left",
                "alternate_sopken_forms": []
              },
              "user.extend_camel_right()": {
                "spoken_form": "select camel right",
                "alternate_sopken_forms": []
              },
              "user.camel_left()": {
                "spoken_form": "go camel left",
                "alternate_sopken_forms": []
              },
              "user.camel_right()": {
                "spoken_form": "go camel right",
                "alternate_sopken_forms": []
              },
              "user.idea(\"action BLACKReformatCode\")": {
                "spoken_form": "blacken",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/apple_notes/apple_notes.talon": {
        "context": {
          "apple notes": {
            "action": {
              "key(cmd-n)": {
                "spoken_form": "new note",
                "alternate_sopken_forms": []
              },
              "key(cmd-d)": {
                "spoken_form": "duplicate note",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-n)": {
                "spoken_form": "new folder",
                "alternate_sopken_forms": []
              },
              "key(alt-cmd-s)": {
                "spoken_form": "toggle folders",
                "alternate_sopken_forms": []
              },
              "key(cmd-0)": {
                "spoken_form": "show main",
                "alternate_sopken_forms": []
              },
              "key(cmd-1)": {
                "spoken_form": "list view",
                "alternate_sopken_forms": []
              },
              "key(cmd-2)": {
                "spoken_form": "gallery view",
                "alternate_sopken_forms": []
              },
              "key(cmd-3)": {
                "spoken_form": "toggle attachments",
                "alternate_sopken_forms": []
              },
              "key(alt-cmd-f)": {
                "spoken_form": "find all",
                "alternate_sopken_forms": []
              },
              "key(cmd-p)": {
                "spoken_form": "print note",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-a)": {
                "spoken_form": "attach file",
                "alternate_sopken_forms": []
              },
              "key(cmd-k)": {
                "spoken_form": "create link",
                "alternate_sopken_forms": []
              },
              "key(alt-cmd-t)": {
                "spoken_form": "insert table",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-t)": {
                "spoken_form": "apply title",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-h)": {
                "spoken_form": "apply heading",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-j)": {
                "spoken_form": "apply subheading",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-b)": {
                "spoken_form": "apply body",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-m)": {
                "spoken_form": "apply mono",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-7)": {
                "spoken_form": "apply bullet",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-8)": {
                "spoken_form": "apply dash",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-9)": {
                "spoken_form": "apply number",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-l)": {
                "spoken_form": "apply checklist",
                "alternate_sopken_forms": []
              },
              "key(cmd-+)": {
                "spoken_form": "increase font",
                "alternate_sopken_forms": []
              },
              "key(cmd--)": {
                "spoken_form": "decrease font",
                "alternate_sopken_forms": []
              },
              "key(ctrl-enter)": {
                "spoken_form": "line break",
                "alternate_sopken_forms": []
              },
              "key(shift-cmd-u)": {
                "spoken_form": "mark",
                "alternate_sopken_forms": []
              },
              "key('ctrl-cmd-down')": {
                "spoken_form": "drag [line] down",
                "alternate_sopken_forms": []
              },
              "key('ctrl-cmd-up')": {
                "spoken_form": "drag [line] up",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/protonmail/protonmail.talon": {
        "context": {
          "protonmail": {
            "action": {
              "key(?)": {
                "spoken_form": "open help",
                "alternate_sopken_forms": []
              },
              "key(/)": {
                "spoken_form": "[focus] search",
                "alternate_sopken_forms": []
              },
              "key(enter)": {
                "spoken_form": "open message",
                "alternate_sopken_forms": []
              },
              "key(escape)": {
                "spoken_form": "go back",
                "alternate_sopken_forms": []
              },
              "key(shift-space)": {
                "spoken_form": "open command [palette]",
                "alternate_sopken_forms": []
              },
              "key(c)": {
                "spoken_form": "new message",
                "alternate_sopken_forms": []
              },
              "key(ctrl-enter)": {
                "spoken_form": "send message",
                "alternate_sopken_forms": []
              },
              "key(ctrl-s)": {
                "spoken_form": "save contact",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(i)": {
                "spoken_form": "(go | jump) [to] inbox",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(d)": {
                "spoken_form": "(go | jump) [to] draft",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(s)": {
                "spoken_form": "(go | jump) [to] sent",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(.)": {
                "spoken_form": "(go | jump) [to] starred",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(a)": {
                "spoken_form": "(go | jump) [to] archive",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(x)": {
                "spoken_form": "(go | jump) [to] spam",
                "alternate_sopken_forms": []
              },
              "key(g)\nkey(t)": {
                "spoken_form": "(go | jump) [to] trash",
                "alternate_sopken_forms": []
              },
              "key(up)": {
                "spoken_form": "(prev | previous) contact",
                "alternate_sopken_forms": []
              },
              "key(down)": {
                "spoken_form": "next contact",
                "alternate_sopken_forms": []
              },
              "key(left)": {
                "spoken_form": "exit contact",
                "alternate_sopken_forms": []
              },
              "key(right)": {
                "spoken_form": "enter contact",
                "alternate_sopken_forms": []
              },
              "key(k)": {
                "spoken_form": "(show | display) newer [message]",
                "alternate_sopken_forms": []
              },
              "key(j)": {
                "spoken_form": "(show | display) older [message]",
                "alternate_sopken_forms": []
              },
              "key(*)\nkey(a)": {
                "spoken_form": "select all",
                "alternate_sopken_forms": []
              },
              "key(*)\nkey(n)": {
                "spoken_form": "(deselect | unselect) all",
                "alternate_sopken_forms": []
              },
              "key(x)": {
                "spoken_form": "select [the] (message | conversation)",
                "alternate_sopken_forms": []
              },
              "key(r)": {
                "spoken_form": "mark [as] read",
                "alternate_sopken_forms": []
              },
              "key(u)": {
                "spoken_form": "mark [as] unread",
                "alternate_sopken_forms": []
              },
              "key(.)": {
                "spoken_form": "star (message | conversation)",
                "alternate_sopken_forms": []
              },
              "key(i)": {
                "spoken_form": "move to inbox",
                "alternate_sopken_forms": []
              },
              "key(t)": {
                "spoken_form": "delete contact",
                "alternate_sopken_forms": []
              },
              "key(a)": {
                "spoken_form": "move to archive",
                "alternate_sopken_forms": []
              },
              "key(s)": {
                "spoken_form": "move to spam",
                "alternate_sopken_forms": []
              },
              "key(shift-r)": {
                "spoken_form": "reply to (message | conversation)",
                "alternate_sopken_forms": []
              },
              "key(shift-a)": {
                "spoken_form": "reply all [to] (message | conversation)",
                "alternate_sopken_forms": []
              },
              "key(shift-f)": {
                "spoken_form": "forward (message | conversation)",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/github/github_web.talon": {
        "context": {
          "github web": {
            "action": {
              "key(s)": {
                "spoken_form": "focus search",
                "alternate_sopken_forms": []
              },
              "insert(\"gn\")": {
                "spoken_form": "go to notifications",
                "alternate_sopken_forms": []
              },
              "insert(\"gd\")": {
                "spoken_form": "go to dashboard",
                "alternate_sopken_forms": []
              },
              "key(?)": {
                "spoken_form": "(keyboard shortcuts show | show keyboard shortcuts)",
                "alternate_sopken_forms": []
              },
              "key(j)": {
                "spoken_form": "(selection move down | move selection down)",
                "alternate_sopken_forms": []
              },
              "key(k)": {
                "spoken_form": "(selection move up | move selection up)",
                "alternate_sopken_forms": []
              },
              "key(x)": {
                "spoken_form": "(selection toggle | toggle selection)",
                "alternate_sopken_forms": []
              },
              "key(o)": {
                "spoken_form": "(issue open | open issue)",
                "alternate_sopken_forms": []
              },
              "insert(\"gc\")": {
                "spoken_form": "go to code",
                "alternate_sopken_forms": []
              },
              "insert(\"gi\")": {
                "spoken_form": "go to issues",
                "alternate_sopken_forms": []
              },
              "insert(\"gp\")": {
                "spoken_form": "go to pull requests",
                "alternate_sopken_forms": []
              },
              "insert(\"gw\")": {
                "spoken_form": "go to wiki",
                "alternate_sopken_forms": []
              },
              "insert(\"ga\")": {
                "spoken_form": "go to actions",
                "alternate_sopken_forms": []
              },
              "insert(\"gb\")": {
                "spoken_form": "go to projects",
                "alternate_sopken_forms": []
              },
              "insert(\"gg\")": {
                "spoken_form": "go to discussions",
                "alternate_sopken_forms": []
              },
              "key(.)": {
                "spoken_form": "[web] editor open",
                "alternate_sopken_forms": []
              },
              "key(t)": {
                "spoken_form": "(file find | find file)",
                "alternate_sopken_forms": []
              },
              "key(l)": {
                "spoken_form": "label set",
                "alternate_sopken_forms": []
              },
              "key(w)": {
                "spoken_form": "((branch | tag) switch | switch (branch | tag))",
                "alternate_sopken_forms": []
              },
              "key(y)": {
                "spoken_form": "mark as read",
                "alternate_sopken_forms": []
              },
              "key(i)": {
                "spoken_form": "(show | hide) comments",
                "alternate_sopken_forms": []
              },
              "key(b)": {
                "spoken_form": "blame view open",
                "alternate_sopken_forms": []
              },
              "key(a)": {
                "spoken_form": "assignee set",
                "alternate_sopken_forms": []
              },
              "key(c)": {
                "spoken_form": "(issue create | create issue)",
                "alternate_sopken_forms": []
              },
              "key(/)": {
                "spoken_form": "search (issues | [pull] requests)",
                "alternate_sopken_forms": []
              },
              "key(m)": {
                "spoken_form": "milestone set",
                "alternate_sopken_forms": []
              },
              "key(r)": {
                "spoken_form": "reply",
                "alternate_sopken_forms": []
              },
              "key(ctrl-enter)": {
                "spoken_form": "(comment submit | submit comment)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-p)": {
                "spoken_form": "(comment preview | preview comment)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-l)": {
                "spoken_form": "git hub full screen",
                "alternate_sopken_forms": []
              },
              "key(escape)": {
                "spoken_form": "(form close | close form)",
                "alternate_sopken_forms": []
              },
              "key(p)": {
                "spoken_form": "parent commit",
                "alternate_sopken_forms": []
              },
              "key(shift-m)": {
                "spoken_form": "(thread mute | mute thread)",
                "alternate_sopken_forms": []
              },
              "key(q)": {
                "spoken_form": "reviewer request",
                "alternate_sopken_forms": []
              },
              "insert(\"gf\")": {
                "spoken_form": "go to workflow",
                "alternate_sopken_forms": []
              },
              "key(shift-t)": {
                "spoken_form": "timestamps toggle",
                "alternate_sopken_forms": []
              },
              "key(shift-f)": {
                "spoken_form": "fullscreen toggle",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/finder/finder.talon": {
        "context": {
          "finder": {
            "action": {
              "key(cmd-,)": {
                "spoken_form": "preferences",
                "alternate_sopken_forms": []
              },
              "key(cmd-j)": {
                "spoken_form": "options",
                "alternate_sopken_forms": []
              },
              "key(cmd-alt-f)": {
                "spoken_form": "search",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-0)": {
                "spoken_form": "sort by none",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-1)": {
                "spoken_form": "sort by name",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-2)": {
                "spoken_form": "sort by kind",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-3)": {
                "spoken_form": "sort by date opened",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-4)": {
                "spoken_form": "sort by date added",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-5)": {
                "spoken_form": "sort by date modified",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-cmd-6)": {
                "spoken_form": "sort by size",
                "alternate_sopken_forms": []
              },
              "key(cmd-1)": {
                "spoken_form": "icon view",
                "alternate_sopken_forms": []
              },
              "key(cmd-3)": {
                "spoken_form": "column view",
                "alternate_sopken_forms": []
              },
              "key(cmd-2)": {
                "spoken_form": "list view",
                "alternate_sopken_forms": []
              },
              "key(cmd-4)": {
                "spoken_form": "gallery view",
                "alternate_sopken_forms": []
              },
              "key(alt-cmd-c)": {
                "spoken_form": "copy path",
                "alternate_sopken_forms": []
              },
              "key(cmd-backspace)": {
                "spoken_form": "trash it",
                "alternate_sopken_forms": []
              },
              "key(cmd-h)": {
                "spoken_form": "hide [finder]",
                "alternate_sopken_forms": []
              },
              "app.window_hide_others()": {
                "spoken_form": "hide others",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/chrome/chrome.talon": {
        "context": {
          "chrome": {
            "action": {
              "user.chrome_mod(\"shift-m\")": {
                "spoken_form": "profile switch",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/teams/teams_mac.talon": {
        "context": {
          "teams mac": {
            "action": {
              "key(super-shift-h)": {
                "spoken_form": "leave team meeting",
                "alternate_sopken_forms": []
              },
              "key(super-.)": {
                "spoken_form": "show shortcuts",
                "alternate_sopken_forms": []
              },
              "key(super-e)": {
                "spoken_form": "[go] [to] search",
                "alternate_sopken_forms": []
              },
              "key(super-/)": {
                "spoken_form": "show commands",
                "alternate_sopken_forms": []
              },
              "key(super-shift-f)": {
                "spoken_form": "open filter",
                "alternate_sopken_forms": []
              },
              "key(super-g)": {
                "spoken_form": "go to",
                "alternate_sopken_forms": []
              },
              "key(ctrl-`)": {
                "spoken_form": "open (apps | applications)",
                "alternate_sopken_forms": []
              },
              "key(super-n)": {
                "spoken_form": "[start] new chat",
                "alternate_sopken_forms": []
              },
              "key(super-,)": {
                "spoken_form": "open settings",
                "alternate_sopken_forms": []
              },
              "key(f1)": {
                "spoken_form": "open help",
                "alternate_sopken_forms": []
              },
              "key(escape)": {
                "spoken_form": "close",
                "alternate_sopken_forms": []
              },
              "key(escape)\nkey(escape)\nkey(escape)\nkey(escape)": {
                "spoken_form": "reset",
                "alternate_sopken_forms": []
              },
              "key(super-0)": {
                "spoken_form": "zoom reset",
                "alternate_sopken_forms": []
              },
              "key(super-1)": {
                "spoken_form": "open (act | activity)",
                "alternate_sopken_forms": []
              },
              "key(super-2)": {
                "spoken_form": "open chat",
                "alternate_sopken_forms": []
              },
              "key(super-3)": {
                "spoken_form": "open teams",
                "alternate_sopken_forms": []
              },
              "key(super-4)": {
                "spoken_form": "open calendar",
                "alternate_sopken_forms": []
              },
              "key(super-5)": {
                "spoken_form": "open calls",
                "alternate_sopken_forms": []
              },
              "key(super-6)": {
                "spoken_form": "open files",
                "alternate_sopken_forms": []
              },
              "key(alt-up)": {
                "spoken_form": "[go] [to] (prev | previous) [list] item",
                "alternate_sopken_forms": []
              },
              "key(alt-down)": {
                "spoken_form": "[go] [to] next [list] item",
                "alternate_sopken_forms": []
              },
              "key(super-shift-up)": {
                "spoken_form": "move [selected] team up",
                "alternate_sopken_forms": []
              },
              "key(super-shift-down)": {
                "spoken_form": "move [selected] team down",
                "alternate_sopken_forms": []
              },
              "key(super-shift-f6)": {
                "spoken_form": "[go] [to] (prev | previous) section",
                "alternate_sopken_forms": []
              },
              "key(super-f6)": {
                "spoken_form": "[go] [to] next section",
                "alternate_sopken_forms": []
              },
              "key(shift-alt-c)": {
                "spoken_form": "[go] [to] compose [box]",
                "alternate_sopken_forms": []
              },
              "key(super-shift-x)": {
                "spoken_form": "[expand] compose [box]",
                "alternate_sopken_forms": []
              },
              "key(super-enter)": {
                "spoken_form": "send message",
                "alternate_sopken_forms": []
              },
              "key(shift-alt-o)": {
                "spoken_form": "attach file",
                "alternate_sopken_forms": []
              },
              "key(shift-alt-o)\nsleep(100ms)\nkey(down)\nkey(space)": {
                "spoken_form": "attach local file",
                "alternate_sopken_forms": []
              },
              "key(shift-enter)": {
                "spoken_form": "[start] new line",
                "alternate_sopken_forms": []
              },
              "key(shift-alt-r)": {
                "spoken_form": "reply [to] [thread]",
                "alternate_sopken_forms": []
              },
              "key(super-shift-a)": {
                "spoken_form": "accept screen share",
                "alternate_sopken_forms": []
              },
              "key(super-shift-s)": {
                "spoken_form": "accept audio call",
                "alternate_sopken_forms": []
              },
              "key(super-shift-d)": {
                "spoken_form": "decline screen share",
                "alternate_sopken_forms": []
              },
              "key(super-shift-c)": {
                "spoken_form": "start audio call",
                "alternate_sopken_forms": []
              },
              "key(super-shift-u)": {
                "spoken_form": "start video call",
                "alternate_sopken_forms": []
              },
              "key(super-shift-m)": {
                "spoken_form": "toggle mute",
                "alternate_sopken_forms": []
              },
              "key(super-shift-e)": {
                "spoken_form": "starch screen share session",
                "alternate_sopken_forms": []
              },
              "key(super-shift-o)": {
                "spoken_form": "toggle video",
                "alternate_sopken_forms": []
              },
              "key(super-shift-space)": {
                "spoken_form": "[go] [to] sharing toolbar",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-n)": {
                "spoken_form": "schedule [a] meeting",
                "alternate_sopken_forms": []
              },
              "key(alt-.)": {
                "spoken_form": "go to current time",
                "alternate_sopken_forms": []
              },
              "key(super-alt-left)": {
                "spoken_form": "go to (prev | previous) (day | week)",
                "alternate_sopken_forms": []
              },
              "key(super-alt-right)": {
                "spoken_form": "go to next (day | week)",
                "alternate_sopken_forms": []
              },
              "key(super-alt-1)": {
                "spoken_form": "view day",
                "alternate_sopken_forms": []
              },
              "key(super-alt-2)": {
                "spoken_form": "view work week",
                "alternate_sopken_forms": []
              },
              "key(super-alt-3)": {
                "spoken_form": "view week",
                "alternate_sopken_forms": []
              },
              "key(super-s)": {
                "spoken_form": "(save | send) meeting request",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-j)": {
                "spoken_form": "join [from] meeting [details]",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-s)": {
                "spoken_form": "go to suggested time",
                "alternate_sopken_forms": []
              },
              "key(super-shift-k)": {
                "spoken_form": "(raise | lower) hand",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/teams/teams.talon": {
        "context": {
          "teams": {
            "action": {
              "key(ctrl-.)": {
                "spoken_form": "show shortcuts",
                "alternate_sopken_forms": []
              },
              "key(ctrl-e)": {
                "spoken_form": "[go] [to] search",
                "alternate_sopken_forms": []
              },
              "key(ctrl-/)": {
                "spoken_form": "show commands",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-f)": {
                "spoken_form": "open filter",
                "alternate_sopken_forms": []
              },
              "key(ctrl-g)": {
                "spoken_form": "go to",
                "alternate_sopken_forms": []
              },
              "key(ctrl-`)": {
                "spoken_form": "open (apps | applications)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-n)": {
                "spoken_form": "[start] new chat",
                "alternate_sopken_forms": []
              },
              "key(ctrl-,)": {
                "spoken_form": "open settings",
                "alternate_sopken_forms": []
              },
              "key(f1)": {
                "spoken_form": "open help",
                "alternate_sopken_forms": []
              },
              "key(escape)": {
                "spoken_form": "close",
                "alternate_sopken_forms": []
              },
              "key(ctrl-1)": {
                "spoken_form": "open activity",
                "alternate_sopken_forms": []
              },
              "key(ctrl-2)": {
                "spoken_form": "open chat",
                "alternate_sopken_forms": []
              },
              "key(ctrl-3)": {
                "spoken_form": "open teams",
                "alternate_sopken_forms": []
              },
              "key(ctrl-4)": {
                "spoken_form": "open calendar",
                "alternate_sopken_forms": []
              },
              "key(ctrl-5)": {
                "spoken_form": "open planner",
                "alternate_sopken_forms": []
              },
              "key(ctrl-6)": {
                "spoken_form": "open calls",
                "alternate_sopken_forms": []
              },
              "key(ctrl-7)": {
                "spoken_form": "open files",
                "alternate_sopken_forms": []
              },
              "key(alt-up)": {
                "spoken_form": "[go] [to] (prev | previous) [list] item",
                "alternate_sopken_forms": []
              },
              "key(alt-down)": {
                "spoken_form": "[go] [to] next [list] item",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-up)": {
                "spoken_form": "move [selected] team up",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-down)": {
                "spoken_form": "move [selected] team down",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-f6)": {
                "spoken_form": "[go] [to] (prev | previous) section",
                "alternate_sopken_forms": []
              },
              "key(ctrl-f6)": {
                "spoken_form": "[go] [to] next section",
                "alternate_sopken_forms": []
              },
              "key(c)": {
                "spoken_form": "[go] [to] compose [box]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-x)": {
                "spoken_form": "[expand] compose [box]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-enter)": {
                "spoken_form": "send",
                "alternate_sopken_forms": []
              },
              "key(ctrl-o)": {
                "spoken_form": "attach file",
                "alternate_sopken_forms": []
              },
              "key(shift-enter)": {
                "spoken_form": "[start] new line",
                "alternate_sopken_forms": []
              },
              "key(r)": {
                "spoken_form": "reply [to] [thread]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-a)": {
                "spoken_form": "accept screen share",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-s)": {
                "spoken_form": "accept audio call",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-d)": {
                "spoken_form": "decline screen share",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-c)": {
                "spoken_form": "start audio call",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-u)": {
                "spoken_form": "start video call",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-m)": {
                "spoken_form": "toggle mute",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-e)": {
                "spoken_form": "starch screen share session",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-o)": {
                "spoken_form": "toggle video",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-space)": {
                "spoken_form": "[go] [to] sharing toolbar",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-n)": {
                "spoken_form": "schedule [a] meeting",
                "alternate_sopken_forms": []
              },
              "key(alt-.)": {
                "spoken_form": "go to current time",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-left)": {
                "spoken_form": "go to (prev | previous) (day | week)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-right)": {
                "spoken_form": "go to next (day | week)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-1)": {
                "spoken_form": "view day",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-2)": {
                "spoken_form": "view work week",
                "alternate_sopken_forms": []
              },
              "key(ctrl-alt-3)": {
                "spoken_form": "view week",
                "alternate_sopken_forms": []
              },
              "key(ctrl-s)": {
                "spoken_form": "(safe | send) meeting request",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-j)": {
                "spoken_form": "join [from] meeting [details]",
                "alternate_sopken_forms": []
              },
              "key(alt-shift-s)": {
                "spoken_form": "go to suggested time",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/tmux/tmux.talon": {
        "context": {
          "tmux": {
            "action": {
              "user.tmux_keybind(arrow_key)": {
                "spoken_form": "go split <user.arrow_key>",
                "alternate_sopken_forms": []
              },
              "user.tmux_execute_command(\"display-panes -d 0\")": {
                "spoken_form": "go split",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/tmux/tmux_linux.talon": {
        "context": {
          "tmux linux": {
            "action": {
              "\"tmux \"": {
                "spoken_form": "mux",
                "alternate_sopken_forms": []
              },
              "insert(\"tmux new \")": {
                "spoken_form": "mux new session",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(s)": {
                "spoken_form": "mux sessions",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey($)": {
                "spoken_form": "mux name session",
                "alternate_sopken_forms": []
              },
              "insert(\"tmux kill-session -t \")": {
                "spoken_form": "mux kill session",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(c)": {
                "spoken_form": "mux new window",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey('{number}')": {
                "spoken_form": "mux window <number>",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(p)": {
                "spoken_form": "mux previous window",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(n)": {
                "spoken_form": "mux next window",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(,)": {
                "spoken_form": "mux rename window",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(&)": {
                "spoken_form": "mux close window",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(%)": {
                "spoken_form": "mux split horizontal",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(\")": {
                "spoken_form": "mux split vertical",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(o)": {
                "spoken_form": "mux next pane",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(arrow_key)": {
                "spoken_form": "mux move <user.arrow_key>",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(x)": {
                "spoken_form": "mux close pane",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)\nkey(q)": {
                "spoken_form": "mux pane numbers",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/slack/slack_win.talon": {
        "context": {
          "slack win": {
            "action": {
              "key(\"ctrl-{number}\")": {
                "spoken_form": "workspace <number>",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-i)": {
                "spoken_form": "(slack | lack) [channel] info",
                "alternate_sopken_forms": []
              },
              "key(ctrl-`)": {
                "spoken_form": "focus (move | next)",
                "alternate_sopken_forms": []
              },
              "key(f6)": {
                "spoken_form": "(section | zone) [next]",
                "alternate_sopken_forms": []
              },
              "key(shift-f6)": {
                "spoken_form": "(section | zone) (previous | last)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-k)": {
                "spoken_form": "(slack | lack) [direct] messages",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-t)": {
                "spoken_form": "(slack | lack) threads",
                "alternate_sopken_forms": []
              },
              "key(alt-left)": {
                "spoken_form": "(slack | lack) (history [next] | back | backward)",
                "alternate_sopken_forms": []
              },
              "key(alt-right)": {
                "spoken_form": "(slack | lack) forward",
                "alternate_sopken_forms": []
              },
              "key(tab)": {
                "spoken_form": "(element | bit) [next]",
                "alternate_sopken_forms": []
              },
              "key(shift-tab)": {
                "spoken_form": "(element | bit) (previous | last)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-m)": {
                "spoken_form": "(slack | lack) (my stuff | activity)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-e)": {
                "spoken_form": "(slack | lack) directory",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-s)": {
                "spoken_form": "(slack | lack) (starred [items] | stars)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-a)": {
                "spoken_form": "(slack | lack) unread [messages]",
                "alternate_sopken_forms": []
              },
              "key(shift-up)": {
                "spoken_form": "grab left",
                "alternate_sopken_forms": []
              },
              "key(shift-down)": {
                "spoken_form": "grab right",
                "alternate_sopken_forms": []
              },
              "key(shift-enter)": {
                "spoken_form": "add line",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-\\)": {
                "spoken_form": "(slack | lack) (react | reaction)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-c)": {
                "spoken_form": "(insert command | commandify)",
                "alternate_sopken_forms": []
              },
              "insert(\"```\")": {
                "spoken_form": "insert code",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-8)": {
                "spoken_form": "(slack | lack) (bull | bullet | bulleted) [list]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-7)": {
                "spoken_form": "(slack | lack) (number | numbered) [list]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-9)": {
                "spoken_form": "(slack | lack) (quotes | quotation)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-b)": {
                "spoken_form": "bold",
                "alternate_sopken_forms": []
              },
              "key(ctrl-i)": {
                "spoken_form": "(italic | italicize)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-x)": {
                "spoken_form": "(strike | strikethrough)",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-enter)": {
                "spoken_form": "(slack | lack) snippet",
                "alternate_sopken_forms": []
              },
              "key(m)": {
                "spoken_form": "([toggle] mute | unmute)",
                "alternate_sopken_forms": []
              },
              "key(v)": {
                "spoken_form": "(slack | lack) ([toggle] video)",
                "alternate_sopken_forms": []
              },
              "key(a)": {
                "spoken_form": "(slack | lack) invite",
                "alternate_sopken_forms": []
              },
              "key(ctrl-/)": {
                "spoken_form": "(slack | lack) shortcuts",
                "alternate_sopken_forms": []
              },
              "\"{text}\"": {
                "spoken_form": "emote <user.text>",
                "alternate_sopken_forms": []
              },
              "key(ctrl-shift-d)": {
                "spoken_form": "toggle left sidebar",
                "alternate_sopken_forms": []
              },
              "key(ctrl-.)": {
                "spoken_form": "toggle right sidebar",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'focus next' instead of 'next focus'\")\nkey(ctrl-`)": {
                "spoken_form": "(move | next) focus",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'section next' instead of 'next section'\")\nkey(f6)": {
                "spoken_form": "[next] (section | zone)",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'section last' instead of 'last section'\")\nkey(shift-f6)": {
                "spoken_form": "(previous | last) (section | zone)",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'element next' instead of 'next element'\")\nkey(tab)": {
                "spoken_form": "[next] (element | bit)",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'element last' instead of 'last element'\")\nkey(shift-tab)": {
                "spoken_form": "(previous | last) (element | bit)",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/slack/slack_mac.talon": {
        "context": {
          "slack mac": {
            "action": {
              "key(\"cmd-{number}\")": {
                "spoken_form": "workspace <number>",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-i)": {
                "spoken_form": "(slack | lack) [channel] info",
                "alternate_sopken_forms": []
              },
              "key(ctrl-`)": {
                "spoken_form": "focus (move | next)",
                "alternate_sopken_forms": []
              },
              "key(f6)": {
                "spoken_form": "(section | zone) [next]",
                "alternate_sopken_forms": ["(section | zone) next"]
              },
              "key(shift-f6)": {
                "spoken_form": "(section | zone) (previous | last)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-k)": {
                "spoken_form": "(slack | lack) [direct] messages",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-t)": {
                "spoken_form": "(slack | lack) threads",
                "alternate_sopken_forms": ["(unread | end red | one red) trap"]
              },
              "key(cmd-[)": {
                "spoken_form": "(slack | lack) (history [next] | back | backward)",
                "alternate_sopken_forms": ["go back"]
              },
              "key(cmd-])": {
                "spoken_form": "(slack | lack) forward",
                "alternate_sopken_forms": ["go forward"]
              },
              "key(tab)": {
                "spoken_form": "(element | bit) [next]",
                "alternate_sopken_forms": ["(element | bit) next"]
              },
              "key(shift-tab)": {
                "spoken_form": "(element | bit) (previous | last)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-m)": {
                "spoken_form": "(slack | lack) (my stuff | activity)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-e)": {
                "spoken_form": "(slack | lack) directory",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-s)": {
                "spoken_form": "(slack | lack) (starred [items] | stars)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-a)": {
                "spoken_form": "(slack | lack) unread [messages]",
                "alternate_sopken_forms": []
              },
              "key(ctrl-cmd-f)": {
                "spoken_form": "(go | undo | toggle) full",
                "alternate_sopken_forms": []
              },
              "key(shift-up)": {
                "spoken_form": "grab left",
                "alternate_sopken_forms": []
              },
              "key(shift-down)": {
                "spoken_form": "grab right",
                "alternate_sopken_forms": []
              },
              "key(shift-enter)": {
                "spoken_form": "add line",
                "alternate_sopken_forms": []
              },
              "key(cmd-right shift-enter)": {
                "spoken_form": "(slack | lack) (slap | slaw | slapper)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-\\)": {
                "spoken_form": "(slack | lack) (react | reaction)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-c)": {
                "spoken_form": "(insert command | commandify)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-u)": {
                "spoken_form": "insert link",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-alt-c)": {
                "spoken_form": "insert code",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-8)": {
                "spoken_form": "(slack | lack) (bull | bullet | bulleted) [list]",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-7)": {
                "spoken_form": "(slack | lack) (number | numbered) [list]",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift->)": {
                "spoken_form": "(slack | lack) (quotes | quotation)",
                "alternate_sopken_forms": []
              },
              "key(cmd-b)": {
                "spoken_form": "bold",
                "alternate_sopken_forms": []
              },
              "key(cmd-i)": {
                "spoken_form": "(italic | italicize)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-x)": {
                "spoken_form": "(strike | strikethrough)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-enter)": {
                "spoken_form": "(slack | lack) snippet",
                "alternate_sopken_forms": []
              },
              "key(m)": {
                "spoken_form": "([toggle] mute | unmute)",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-h)": {
                "spoken_form": "(slack | lack) huddle",
                "alternate_sopken_forms": []
              },
              "key(v)": {
                "spoken_form": "(slack | lack) ([toggle] video)",
                "alternate_sopken_forms": []
              },
              "key(a)": {
                "spoken_form": "(slack | lack) invite",
                "alternate_sopken_forms": []
              },
              "key(cmd-/)": {
                "spoken_form": "(slack | lack) shortcuts",
                "alternate_sopken_forms": []
              },
              "\"{text}\"": {
                "spoken_form": "emote <user.text>",
                "alternate_sopken_forms": []
              },
              "key(cmd-shift-d)": {
                "spoken_form": "toggle left sidebar",
                "alternate_sopken_forms": []
              },
              "key(cmd-.)": {
                "spoken_form": "toggle right sidebar",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'focus next' instead of 'next focus'\")\nkey(ctrl-`)": {
                "spoken_form": "(move | next) focus",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'section next' instead of 'next section'\")\nkey(f6)": {
                "spoken_form": "[next] (section | zone)",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'section last' instead of 'last section'\")\nkey(shift-f6)": {
                "spoken_form": "(previous | last) (section | zone)",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'element next' instead of 'next element'\")\nkey(tab)": {
                "spoken_form": "[next] (element | bit)",
                "alternate_sopken_forms": []
              },
              "app.notify(\"please use the voice command 'element last' instead of 'last element'\")\nkey(shift-tab)": {
                "spoken_form": "(previous | last) (element | bit)",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/apple_terminal/apple_terminal.talon": {
        "context": {
          "apple terminal": {
            "action": {
              "key(ctrl-z)": {
                "spoken_form": "suspend",
                "alternate_sopken_forms": []
              },
              "insert(\"fg\")\nkey(enter)": {
                "spoken_form": "resume",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/kubectl/kubectl.talon": {
        "context": {
          "kubectl": {
            "action": {
              "\"kubectl \"": {
                "spoken_form": "cube [control]",
                "alternate_sopken_forms": []
              },
              "\"kubectl create \"": {
                "spoken_form": "cube create",
                "alternate_sopken_forms": []
              },
              "\"kubectl expose \"": {
                "spoken_form": "cube expose",
                "alternate_sopken_forms": []
              },
              "\"kubectl run \"": {
                "spoken_form": "cube run",
                "alternate_sopken_forms": []
              },
              "\"kubectl set \"": {
                "spoken_form": "cube set",
                "alternate_sopken_forms": []
              },
              "\"kubectl run-container \"": {
                "spoken_form": "cube run container",
                "alternate_sopken_forms": []
              },
              "\"kubectl explain \"": {
                "spoken_form": "cube explain",
                "alternate_sopken_forms": []
              },
              "\"kubectl get \"": {
                "spoken_form": "cube get",
                "alternate_sopken_forms": []
              },
              "\"kubectl edit \"": {
                "spoken_form": "cube edit",
                "alternate_sopken_forms": []
              },
              "\"kubectl delete \"": {
                "spoken_form": "cube delete",
                "alternate_sopken_forms": []
              },
              "\"kubectl rollout \"": {
                "spoken_form": "cube rollout",
                "alternate_sopken_forms": []
              },
              "\"kubectl rolling-update \"": {
                "spoken_form": "cube rolling update",
                "alternate_sopken_forms": ["cube rolling-update"]
              },
              "\"kubectl scale \"": {
                "spoken_form": "cube scale",
                "alternate_sopken_forms": []
              },
              "\"kubectl autoscale \"": {
                "spoken_form": "cube auto scale",
                "alternate_sopken_forms": []
              },
              "\"kubectl certificate \"": {
                "spoken_form": "cube certificate",
                "alternate_sopken_forms": []
              },
              "\"kubectl top \"": {
                "spoken_form": "cube top",
                "alternate_sopken_forms": []
              },
              "\"kubectl drain \"": {
                "spoken_form": "cube drain",
                "alternate_sopken_forms": []
              },
              "\"kubectl taint \"": {
                "spoken_form": "cube taint",
                "alternate_sopken_forms": []
              },
              "\"kubectl cordon \"": {
                "spoken_form": "cube (cord | cordon)",
                "alternate_sopken_forms": []
              },
              "\"kubectl uncordon \"": {
                "spoken_form": "cube (uncord | uncordon)",
                "alternate_sopken_forms": []
              },
              "\"kubectl cluster-info \"": {
                "spoken_form": "cube cluster (info | information)",
                "alternate_sopken_forms": []
              },
              "\"kubectl describe \"": {
                "spoken_form": "cube describe",
                "alternate_sopken_forms": []
              },
              "\"kubectl logs \"": {
                "spoken_form": "cube logs",
                "alternate_sopken_forms": []
              },
              "\"kubectl attach \"": {
                "spoken_form": "cube attach",
                "alternate_sopken_forms": []
              },
              "\"kubectl exec \"": {
                "spoken_form": "cube exec",
                "alternate_sopken_forms": []
              },
              "\"kubectl port-forward \"": {
                "spoken_form": "cube port forward",
                "alternate_sopken_forms": []
              },
              "\"kubectl proxy \"": {
                "spoken_form": "cube proxy",
                "alternate_sopken_forms": []
              },
              "\"kubectl cp \"": {
                "spoken_form": "cube copy",
                "alternate_sopken_forms": []
              },
              "\"kubectl auth \"": {
                "spoken_form": "cube auth",
                "alternate_sopken_forms": []
              },
              "\"kubectl diff \"": {
                "spoken_form": "cube diff",
                "alternate_sopken_forms": []
              },
              "\"kubectl apply \"": {
                "spoken_form": "cube apply",
                "alternate_sopken_forms": []
              },
              "\"kubectl patch \"": {
                "spoken_form": "cube patch",
                "alternate_sopken_forms": []
              },
              "\"kubectl replace \"": {
                "spoken_form": "cube replace",
                "alternate_sopken_forms": []
              },
              "\"kubectl wait \"": {
                "spoken_form": "cube wait",
                "alternate_sopken_forms": []
              },
              "\"kubectl convert \"": {
                "spoken_form": "cube convert",
                "alternate_sopken_forms": []
              },
              "\"kubectl kustomize \"": {
                "spoken_form": "cube customize",
                "alternate_sopken_forms": []
              },
              "\"kubectl label \"": {
                "spoken_form": "cube label",
                "alternate_sopken_forms": []
              },
              "\"kubectl annotate \"": {
                "spoken_form": "cube annotate",
                "alternate_sopken_forms": []
              },
              "\"kubectl completion \"": {
                "spoken_form": "cube completion",
                "alternate_sopken_forms": []
              },
              "\"kubectl api \"": {
                "spoken_form": "cube (interface | API)",
                "alternate_sopken_forms": []
              },
              "\"kubectl api-resources \"": {
                "spoken_form": "cube interface resources",
                "alternate_sopken_forms": []
              },
              "\"kubectl api-versions \"": {
                "spoken_form": "cube interface versions",
                "alternate_sopken_forms": []
              },
              "\"kubectl config \"": {
                "spoken_form": "cube config",
                "alternate_sopken_forms": []
              },
              "\"kubectl help \"": {
                "spoken_form": "cube help",
                "alternate_sopken_forms": []
              },
              "\"kubectl plugin \"": {
                "spoken_form": "cube plugin",
                "alternate_sopken_forms": []
              },
              "\"kubectl version \"": {
                "spoken_form": "cube version",
                "alternate_sopken_forms": []
              },
              "insert(\"kubectl {kubectl_action} \")\ninsert(kubectl_object or \"\")": {
                "spoken_form": "cube {user.kubectl_action} [{user.kubectl_object}]",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-p\")\nkey(\"ctrl-q\")": {
                "spoken_form": "cube detach",
                "alternate_sopken_forms": []
              },
              "user.insert_between(\"kubectl exec -it \", \" -- /bin/bash\")": {
                "spoken_form": "cube shell",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/vscode/vscode.talon": {
        "context": {
          "vscode": {
            "action": {
              "user.vscode(\"workbench.action.reloadWindow\")": {
                "spoken_form": "window reload",
                "alternate_sopken_forms": ["reload window"]
              },
              "user.vscode(\"workbench.action.closeWindow\")": {
                "spoken_form": "window close",
                "alternate_sopken_forms": ["close window"]
              },
              "user.vscode(\"workbench.action.showCommands\")\ninsert(user.text or \"\")": {
                "spoken_form": "please [<user.text>]",
                "alternate_sopken_forms": ["comm pal [<user.text>]"]
              },
              "user.vscode(\"workbench.view.explorer\")": {
                "spoken_form": "bar explore",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.view.extensions\")": {
                "spoken_form": "bar extensions",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"outline.focus\")": {
                "spoken_form": "bar outline",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.view.debug\")": {
                "spoken_form": "bar run",
                "alternate_sopken_forms": ["bar (debug|run)"]
              },
              "user.vscode(\"workbench.view.search\")": {
                "spoken_form": "bar search",
                "alternate_sopken_forms": ["( bar search | search tab)"]
              },
              "user.vscode(\"workbench.view.scm\")": {
                "spoken_form": "bar source",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.view.testing.focus\")": {
                "spoken_form": "bar test",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.toggleSidebarVisibility\")": {
                "spoken_form": "bar switch",
                "alternate_sopken_forms": ["side dog"]
              },
              "user.vscode(\"workbench.action.gotoSymbol\")\nsleep(50ms)\ninsert(text or \"\")": {
                "spoken_form": "symbol hunt [<user.text>]",
                "alternate_sopken_forms": [
                  "<user.show_list> symbol [<user.text>] [halt]"
                ]
              },
              "user.vscode(\"workbench.action.showAllSymbols\")\nsleep(50ms)\ninsert(text or \"\")": {
                "spoken_form": "symbol hunt all [<user.text>]",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.panel.repl.view.focus\")": {
                "spoken_form": "panel control",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.panel.output.focus\")": {
                "spoken_form": "panel output",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.panel.markers.view.focus\")": {
                "spoken_form": "panel problems",
                "alternate_sopken_forms": ["problem show"]
              },
              "user.vscode(\"workbench.action.togglePanel\")": {
                "spoken_form": "panel switch",
                "alternate_sopken_forms": ["low dog"]
              },
              "user.vscode(\"workbench.action.terminal.focus\")": {
                "spoken_form": "panel terminal",
                "alternate_sopken_forms": ["terminal focus"]
              },
              "user.vscode(\"workbench.action.focusActiveEditorGroup\")": {
                "spoken_form": "focus editor",
                "alternate_sopken_forms": ["pan edit"]
              },
              "user.vscode(\"workbench.action.openGlobalSettings\")": {
                "spoken_form": "show settings",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openSettingsJson\")": {
                "spoken_form": "show settings json",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openFolderSettings\")": {
                "spoken_form": "show settings folder",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openFolderSettingsFile\")": {
                "spoken_form": "show settings folder json",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openWorkspaceSettings\")": {
                "spoken_form": "show settings workspace",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openWorkspaceSettingsFile\")": {
                "spoken_form": "show settings workspace json",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openGlobalKeybindings\")": {
                "spoken_form": "show shortcuts",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openGlobalKeybindingsFile\")": {
                "spoken_form": "show shortcuts json",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.openSnippets\")": {
                "spoken_form": "show snippets",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.toggleCenteredLayout\")": {
                "spoken_form": "centered switch",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.toggleFullScreen\")": {
                "spoken_form": "full screen",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.selectTheme\")": {
                "spoken_form": "theme switch",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.toggleWordWrap\")": {
                "spoken_form": "wrap switch",
                "alternate_sopken_forms": ["wrap dog"]
              },
              "user.vscode(\"workbench.action.toggleZenMode\")": {
                "spoken_form": "zen switch",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.quickOpen\")\nsleep(50ms)\ninsert(text or \"\")": {
                "spoken_form": "file hunt [<user.text>]",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.quickOpen\")\nsleep(50ms)\nedit.paste()": {
                "spoken_form": "file hunt (pace | paste)",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.copyFileName\")": {
                "spoken_form": "file copy name",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"copyFilePath\")": {
                "spoken_form": "file copy path",
                "alternate_sopken_forms": ["file absolute path"]
              },
              "user.vscode(\"copyRelativeFilePath\")": {
                "spoken_form": "file copy local [path]",
                "alternate_sopken_forms": []
              },
              "user.vscode_and_wait(\"explorer.newFile\")": {
                "spoken_form": "file create sibling",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.files.newUntitledFile\")": {
                "spoken_form": "file create",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.newFile\")": {
                "spoken_form": "file create relative",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.newFileAtRoot\")": {
                "spoken_form": "file create root",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.renameFile\")\nsleep(150ms)": {
                "spoken_form": "file rename",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.moveFile\")\nsleep(150ms)": {
                "spoken_form": "file move",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.duplicateFile\")\nsleep(150ms)": {
                "spoken_form": "file clone",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"fileutils.removeFile\")\nsleep(150ms)": {
                "spoken_form": "file delete",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"revealFileInOS\")": {
                "spoken_form": "file open folder",
                "alternate_sopken_forms": ["show in finder"]
              },
              "user.vscode(\"workbench.files.action.showActiveFileInExplorer\")": {
                "spoken_form": "file reveal",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.files.saveWithoutFormatting\")": {
                "spoken_form": "save ugly",
                "alternate_sopken_forms": ["disk ugly"]
              },
              "user.vscode(\"editor.action.triggerSuggest\")": {
                "spoken_form": "suggest show",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.triggerParameterHints\")": {
                "spoken_form": "hint show",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.revealDefinition\")": {
                "spoken_form": "(go declaration | follow)",
                "alternate_sopken_forms": [
                  "def show",
                  "(<user.teleport> declaration | follow)"
                ]
              },
              "user.vscode(\"editor.action.peekDefinition\")": {
                "spoken_form": "definition peek",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.revealDefinitionAside\")": {
                "spoken_form": "definition side",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.goToReferences\")": {
                "spoken_form": "references show",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.showCallHierarchy\")": {
                "spoken_form": "hierarchy peek",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"references-view.find\")": {
                "spoken_form": "go usage",
                "alternate_sopken_forms": ["ref show", "<user.teleport> usage"]
              },
              "user.vscode(\"editor.action.formatDocument\")": {
                "spoken_form": "format that",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.formatSelection\")": {
                "spoken_form": "format selection",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.organizeImports\")": {
                "spoken_form": "imports fix",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.marker.nextInFiles\")": {
                "spoken_form": "problem next",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.marker.prevInFiles\")": {
                "spoken_form": "problem last",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"problems.action.showQuickFixes\")": {
                "spoken_form": "problem fix",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.rename\")": {
                "spoken_form": "refactor rename",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.refactor\")": {
                "spoken_form": "refactor this",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.trimTrailingWhitespace\")": {
                "spoken_form": "whitespace trim",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.editor.changeLanguageMode\")": {
                "spoken_form": "language switch",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.navigateBack\")": {
                "spoken_form": "go back",
                "alternate_sopken_forms": ["spring back"]
              },
              "user.vscode(\"workbench.action.navigateForward\")": {
                "spoken_form": "go forward",
                "alternate_sopken_forms": ["spring forward"]
              },
              "user.vscode(\"editor.action.goToImplementation\")": {
                "spoken_form": "go implementation",
                "alternate_sopken_forms": ["<user.teleport> implementation"]
              },
              "user.vscode(\"editor.action.goToTypeDefinition\")": {
                "spoken_form": "go type",
                "alternate_sopken_forms": ["<user.teleport> type"]
              },
              "user.vscode(\"workbench.action.openRecent\")\nsleep(50ms)\ninsert(text or \"\")\nsleep(250ms)": {
                "spoken_form": "go recent [<user.text>]",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.navigateToLastEditLocation\")": {
                "spoken_form": "go edit",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.view.extension.bookmarks\")": {
                "spoken_form": "go marks",
                "alternate_sopken_forms": ["<user.teleport> marks"]
              },
              "user.vscode(\"bookmarks.toggle\")": {
                "spoken_form": "toggle mark",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"bookmarks.jumpToNext\")": {
                "spoken_form": "go next mark",
                "alternate_sopken_forms": ["<user.teleport> next mark"]
              },
              "user.vscode(\"bookmarks.jumpToPrevious\")": {
                "spoken_form": "go last mark",
                "alternate_sopken_forms": ["<user.teleport> last mark"]
              },
              "user.vscode(\"workbench.action.closeOtherEditors\")": {
                "spoken_form": "close other tabs",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.closeAllEditors\")": {
                "spoken_form": "close all tabs",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.closeEditorsToTheRight\")": {
                "spoken_form": "close tabs way right",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.closeEditorsToTheLeft\")": {
                "spoken_form": "close tabs way left",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.fold\")": {
                "spoken_form": "fold that",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.unfold\")": {
                "spoken_form": "unfold that",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldAllMarkerRegions\")": {
                "spoken_form": "fold those",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.unfoldRecursively\")": {
                "spoken_form": "unfold those",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldAll\")": {
                "spoken_form": "fold all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.unfoldAll\")": {
                "spoken_form": "unfold all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldAllBlockComments\")": {
                "spoken_form": "fold comments",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel1\")": {
                "spoken_form": "fold one",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel2\")": {
                "spoken_form": "fold two",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel3\")": {
                "spoken_form": "fold three",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel4\")": {
                "spoken_form": "fold four",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel5\")": {
                "spoken_form": "fold five",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel6\")": {
                "spoken_form": "fold six",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.foldLevel7\")": {
                "spoken_form": "fold seven",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.branchFrom\")": {
                "spoken_form": "git branch",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.branch\")": {
                "spoken_form": "git branch this",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.checkout\")\nsleep(50ms)\ninsert(text or \"\")": {
                "spoken_form": "git checkout [<user.text>]",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.commitStaged\")\nsleep(100ms)\nuser.insert_formatted(text or \"\", \"CAPITALIZE_FIRST_WORD\")": {
                "spoken_form": "git commit [<user.text>]",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.undoCommit\")": {
                "spoken_form": "git commit undo",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.commitStagedAmend\")": {
                "spoken_form": "git commit amend",
                "alternate_sopken_forms": ["git commit ammend"]
              },
              "user.vscode(\"git.openChange\")": {
                "spoken_form": "git diff",
                "alternate_sopken_forms": ["git diff | diff open"]
              },
              "user.vscode(\"git.fetch\")": {
                "spoken_form": "git fetch",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.fetchAll\")": {
                "spoken_form": "git fetch all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.ignore\")": {
                "spoken_form": "git ignore",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.merge\")": {
                "spoken_form": "git merge",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.showOutput\")": {
                "spoken_form": "git output",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.pullRebase\")": {
                "spoken_form": "git pull",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.push\")": {
                "spoken_form": "git push",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.pushForce\")": {
                "spoken_form": "git push focus",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.rebaseAbort\")": {
                "spoken_form": "git rebase abort",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.revealInExplorer\")": {
                "spoken_form": "git reveal",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.revertChange\")": {
                "spoken_form": "git revert",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.stash\")": {
                "spoken_form": "git stash",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.stashPop\")": {
                "spoken_form": "git stash pop",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.scm.focus\")": {
                "spoken_form": "git status",
                "alternate_sopken_forms": ["bar source control"]
              },
              "user.vscode(\"git.stage\")": {
                "spoken_form": "git stage",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.stageAll\")": {
                "spoken_form": "git stage all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.sync\")": {
                "spoken_form": "git sync",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.unstage\")": {
                "spoken_form": "git unstage",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"git.unstageAll\")": {
                "spoken_form": "git unstage all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"pr.create\")": {
                "spoken_form": "pull request",
                "alternate_sopken_forms": ["1pull request"]
              },
              "key(alt-f5)": {
                "spoken_form": "change next",
                "alternate_sopken_forms": []
              },
              "key(shift-alt-f5)": {
                "spoken_form": "change last",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.runAtCursor\")": {
                "spoken_form": "test run",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.runCurrentFile\")": {
                "spoken_form": "test run file",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.runAll\")": {
                "spoken_form": "test run all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.reRunFailTests\")": {
                "spoken_form": "test run failed",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.reRunLastRun\")": {
                "spoken_form": "test run last",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.debugAtCursor\")": {
                "spoken_form": "test debug",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.debugCurrentFile\")": {
                "spoken_form": "test debug file",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.debugAll\")": {
                "spoken_form": "test debug all",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.debugFailTests\")": {
                "spoken_form": "test debug failed",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.debugLastRun\")": {
                "spoken_form": "test debug last",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"testing.cancelRun\")": {
                "spoken_form": "test cancel",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.debug.action.toggleBreakpoint\")": {
                "spoken_form": "break point",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.stepOver\")": {
                "spoken_form": "step over",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.stepInto\")": {
                "spoken_form": "debug step into",
                "alternate_sopken_forms": ["step into"]
              },
              "user.vscode(\"workbench.action.debug.stepOut\")": {
                "spoken_form": "debug step out [of]",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.start\")": {
                "spoken_form": "debug start",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.pause\")": {
                "spoken_form": "debug pause",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.stop\")": {
                "spoken_form": "debug stopper",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.continue\")": {
                "spoken_form": "debug continue",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.debug.restart\")": {
                "spoken_form": "debug restart",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.debug.action.toggleRepl\")": {
                "spoken_form": "debug console",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.debug.panel.action.clearReplAction\")": {
                "spoken_form": "debug clean",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.terminal.openNativeConsole\")": {
                "spoken_form": "terminal external",
                "alternate_sopken_forms": ["term external"]
              },
              "user.vscode(\"workbench.action.terminal.new\")": {
                "spoken_form": "terminal new",
                "alternate_sopken_forms": ["term new"]
              },
              "user.vscode(\"workbench.action.terminal.focusNext\")": {
                "spoken_form": "terminal next",
                "alternate_sopken_forms": ["term next"]
              },
              "user.vscode(\"workbench.action.terminal.focusPrevious\")": {
                "spoken_form": "terminal last",
                "alternate_sopken_forms": ["term last"]
              },
              "user.vscode(\"workbench.action.terminal.split\")": {
                "spoken_form": "terminal split",
                "alternate_sopken_forms": ["term split"]
              },
              "user.vscode(\"workbench.action.toggleMaximizedPanel\")": {
                "spoken_form": "terminal zoom",
                "alternate_sopken_forms": ["term zoom"]
              },
              "user.vscode(\"workbench.action.terminal.kill\")": {
                "spoken_form": "terminal trash",
                "alternate_sopken_forms": ["term trash"]
              },
              "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")": {
                "spoken_form": "terminal toggle",
                "alternate_sopken_forms": ["term dog"]
              },
              "user.vscode(\"workbench.action.terminal.scrollUp\")": {
                "spoken_form": "terminal scroll up",
                "alternate_sopken_forms": ["term scroll up"]
              },
              "user.vscode(\"workbench.action.terminal.scrollDown\")": {
                "spoken_form": "terminal scroll down",
                "alternate_sopken_forms": ["term scroll down"]
              },
              "user.vscode_terminal(number_small)": {
                "spoken_form": "terminal <number_small>",
                "alternate_sopken_forms": ["term <number_small>"]
              },
              "user.vscode(\"editor.action.copyLinesDownAction\")": {
                "spoken_form": "copy line down",
                "alternate_sopken_forms": ["copy [line] down"]
              },
              "user.vscode(\"editor.action.copyLinesUpAction\")": {
                "spoken_form": "copy line up",
                "alternate_sopken_forms": ["copy [line] up"]
              },
              "user.vscode(\"editor.action.smartSelect.shrink\")": {
                "spoken_form": "select less",
                "alternate_sopken_forms": [
                  "<user.select> less",
                  "(select | grab) less",
                  "take less"
                ]
              },
              "user.vscode(\"editor.action.smartSelect.expand\")": {
                "spoken_form": "select (more | this)",
                "alternate_sopken_forms": [
                  "<user.select> (more|this)",
                  "(select | grab) that",
                  "take (more|this)"
                ]
              },
              "user.vscode(\"editor.action.toggleMinimap\")": {
                "spoken_form": "minimap",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.minimizeOtherEditors\")": {
                "spoken_form": "maximize",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.action.evenEditorWidths\")": {
                "spoken_form": "restore",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"breadcrumbs.focusAndSelect\")": {
                "spoken_form": "select breadcrumb",
                "alternate_sopken_forms": []
              },
              "user.replace(\"\")\nkey(cmd-alt-l)": {
                "spoken_form": "replace here",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.showHover\")": {
                "spoken_form": "hover show",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.joinLines\")": {
                "spoken_form": "join lines",
                "alternate_sopken_forms": ["line join"]
              },
              "user.vscode(\"cursorUndo\")": {
                "spoken_form": "curse undo",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"editor.action.addSelectionToNextFindMatch\")": {
                "spoken_form": "select word",
                "alternate_sopken_forms": ["take word"]
              },
              "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")": {
                "spoken_form": "skip word",
                "alternate_sopken_forms": ["breed skip"]
              },
              "user.vscode(\"notebook.focusNextEditor\")": {
                "spoken_form": "cell next",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"notebook.focusPreviousEditor\")": {
                "spoken_form": "cell last",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"notebook.cell.executeCellsAbove\")": {
                "spoken_form": "cell run above",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"notebook.cell.execute\")": {
                "spoken_form": "cell run",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"workbench.extensions.action.installVSIX\")": {
                "spoken_form": "install local",
                "alternate_sopken_forms": []
              },
              "user.vscode(\"markdown.showPreview\")": {
                "spoken_form": "preview markdown",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/signal/signal_linux.talon": {
        "context": {
          "signal linux": {
            "action": {
              "key(\"ctrl-/\")": {
                "spoken_form": "show shortcuts",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-t\")": {
                "spoken_form": "(next | nav | navigate) [by] (sec | section)",
                "alternate_sopken_forms": []
              },
              "key(\"alt-down\")": {
                "spoken_form": "(prev | previous) (chat | conversation)",
                "alternate_sopken_forms": []
              },
              "key(\"alt-up\")": {
                "spoken_form": "next (chat | conversation)",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-down\")": {
                "spoken_form": "(prev | previous) unread",
                "alternate_sopken_forms": []
              },
              "key(\"alt-shift-up\")": {
                "spoken_form": "next unread",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-,\")": {
                "spoken_form": "[open] (pref | preferences)",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-l\")": {
                "spoken_form": "open conversation menu",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-f\")": {
                "spoken_form": "search",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-f\")": {
                "spoken_form": "search chat",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-t\")": {
                "spoken_form": "focus (chat | composer)",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-m\")": {
                "spoken_form": "open media",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-j\")": {
                "spoken_form": "open emoji",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-s\")": {
                "spoken_form": "open sticker",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-v\")": {
                "spoken_form": "record [voice] message",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-a\")": {
                "spoken_form": "archive chat",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-u\")": {
                "spoken_form": "unarchive chat",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-up\")": {
                "spoken_form": "(first | top) message",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-down\")": {
                "spoken_form": "(last | bottom) message",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-c\")": {
                "spoken_form": "close chat",
                "alternate_sopken_forms": []
              },
              "key(\"enter\")": {
                "spoken_form": "send it",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-d\")": {
                "spoken_form": "message details",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-r\")": {
                "spoken_form": "reply [message]",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-e\")": {
                "spoken_form": "react [message]",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-s\")": {
                "spoken_form": "save attachment",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-d\")": {
                "spoken_form": "delete [message]",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-enter\")": {
                "spoken_form": "send message",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-x\")": {
                "spoken_form": "expand chat",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-u\")": {
                "spoken_form": "attach [file]",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-p\")": {
                "spoken_form": "remove [link] preview",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-p\")": {
                "spoken_form": "remove [link] attachment",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/termite/termite.talon": {
        "context": {
          "termite": {
            "action": {
              "key(\"y\")": {
                "spoken_form": "shell yank",
                "alternate_sopken_forms": []
              },
              "key(\"ctrl-shift-space\")": {
                "spoken_form": "shell select",
                "alternate_sopken_forms": []
              },
              "key(\"escape\")": {
                "spoken_form": "shell insert",
                "alternate_sopken_forms": []
              },
              "key(\"v\")": {
                "spoken_form": "visual line",
                "alternate_sopken_forms": []
              },
              "key(\"V\")": {
                "spoken_form": "visual line mode",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/git/git_add_patch.talon": {
        "context": {
          "git add patch": {
            "action": {
              "key(y)\nkey(enter)": {
                "spoken_form": "yank",
                "alternate_sopken_forms": []
              },
              "key(n)\nkey(enter)": {
                "spoken_form": "near",
                "alternate_sopken_forms": []
              },
              "key(q)\nkey(enter)": {
                "spoken_form": "quench",
                "alternate_sopken_forms": []
              },
              "key(d)\nkey(enter)": {
                "spoken_form": "drum",
                "alternate_sopken_forms": []
              },
              "key(a)\nkey(enter)": {
                "spoken_form": "air",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/git/git.talon": {
        "context": {
          "git": {
            "action": {
              "args = git_arguments or \"\"\n\"git {git_command}{args} \"": {
                "spoken_form": "git {user.git_command} [<user.git_arguments>]",
                "alternate_sopken_forms": []
              },
              "args = git_arguments or \"\"\nmessage = prose or \"\"\nuser.insert_between(\"git commit{args} --message '{message}\", \"'\")": {
                "spoken_form": "git commit [<user.git_arguments>] message [<user.prose>]",
                "alternate_sopken_forms": []
              },
              "args = git_arguments or \"\"\nmessage = prose or \"\"\nuser.insert_between(\"git stash push{args} --message '{message}\", \"'\")": {
                "spoken_form": "git stash [push] [<user.git_arguments>] message [<user.prose>]",
                "alternate_sopken_forms": []
              },
              "\"git status\\n\"": {
                "spoken_form": "git status",
                "alternate_sopken_forms": []
              },
              "\"git add --patch\\n\"": {
                "spoken_form": "git add patch",
                "alternate_sopken_forms": []
              },
              "\"git show HEAD\\n\"": {
                "spoken_form": "git show head",
                "alternate_sopken_forms": []
              },
              "\"git diff\\n\"": {
                "spoken_form": "git diff",
                "alternate_sopken_forms": []
              },
              "\"git diff --cached\\n\"": {
                "spoken_form": "git diff (cached | cashed)",
                "alternate_sopken_forms": []
              },
              "insert(\"git clone \")\nedit.paste()\nkey(enter)": {
                "spoken_form": "git clone clipboard",
                "alternate_sopken_forms": []
              },
              "edit.copy()\ninsert(\"git diff \")\nedit.paste()\nkey(enter)": {
                "spoken_form": "git diff highlighted",
                "alternate_sopken_forms": []
              },
              "insert(\"git diff \")\nedit.paste()\nkey(enter)": {
                "spoken_form": "git diff clipboard",
                "alternate_sopken_forms": []
              },
              "edit.copy()\ninsert(\"git add \")\nedit.paste()\nkey(enter)": {
                "spoken_form": "git add highlighted",
                "alternate_sopken_forms": []
              },
              "insert(\"git add \")\nedit.paste()\nkey(enter)": {
                "spoken_form": "git add clipboard",
                "alternate_sopken_forms": []
              },
              "edit.copy()\ninsert(\"git add \")\nedit.paste()\ninsert(\"\\ngit commit\\n\")": {
                "spoken_form": "git commit highlighted",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/thunderbird/thunderbird.talon": {
        "context": {
          "thunderbird": {
            "action": {
              "user.tab_jump(1)": {
                "spoken_form": "go (mails | messages | inbox)",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"shift-c\")": {
                "spoken_form": "go (calendar | lightning)",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"shift-d\")": {
                "spoken_form": "go tasks",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"shift-b\")": {
                "spoken_form": "(open address [book] | address book | open contacts)",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"shift-i\")": {
                "spoken_form": "dev tools",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/thunderbird/thunderbird_inbox.talon": {
        "context": {
          "thunderbird inbox": {
            "action": {
              "key(enter)": {
                "spoken_form": "(mail | message) open",
                "alternate_sopken_forms": []
              },
              "key(b)": {
                "spoken_form": "(mail | message) (up | last)",
                "alternate_sopken_forms": []
              },
              "key(f)": {
                "spoken_form": "(mail | message) (down | next)",
                "alternate_sopken_forms": []
              },
              "key(p)": {
                "spoken_form": "unread [mail | message] (up | last)",
                "alternate_sopken_forms": []
              },
              "key(n)": {
                "spoken_form": "unread [mail | message] (down | next)",
                "alternate_sopken_forms": []
              },
              "key(alt-home)": {
                "spoken_form": "go home",
                "alternate_sopken_forms": []
              },
              "key(f8)": {
                "spoken_form": "toggle (mail | message) [pane]",
                "alternate_sopken_forms": []
              },
              "key(s)": {
                "spoken_form": "(mail | message) (favorite | unfavorite)",
                "alternate_sopken_forms": []
              },
              "key(m)": {
                "spoken_form": "(mail | message) (read | unread)",
                "alternate_sopken_forms": []
              },
              "key(w)": {
                "spoken_form": "(mail | message) (watch | unwatch)",
                "alternate_sopken_forms": []
              },
              "key(k)": {
                "spoken_form": "(mail | message) (ignore | unignore)",
                "alternate_sopken_forms": []
              },
              "key(c)": {
                "spoken_form": "(mail | message) suspend",
                "alternate_sopken_forms": []
              },
              "key(j)": {
                "spoken_form": "(mail | message) spam",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"n\")": {
                "spoken_form": "(mail | message) new",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"e\")": {
                "spoken_form": "(mail | message) edit",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"r\")": {
                "spoken_form": "(mail | message) reply sender",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"shift-r\")": {
                "spoken_form": "(mail | message) reply all",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"shift-l\")": {
                "spoken_form": "(mail | message) reply list",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"l\")": {
                "spoken_form": "(mail | message) forward",
                "alternate_sopken_forms": []
              },
              "key(delete)": {
                "spoken_form": "(mail | message) delete",
                "alternate_sopken_forms": []
              },
              "key(a)": {
                "spoken_form": "(mail | message) archive",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"s\")": {
                "spoken_form": "(mail | message) save",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"p\")": {
                "spoken_form": "(mail | message) print",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/thunderbird/thunderbird_contacts.talon": {
        "context": {
          "thunderbird contacts": {
            "action": {
              "user.thunderbird_mod(\"n\")": {
                "spoken_form": "contact new",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"i\")": {
                "spoken_form": "contact edit",
                "alternate_sopken_forms": []
              },
              "key(delete)": {
                "spoken_form": "contact delete",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"p\")": {
                "spoken_form": "contact print",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"m\")": {
                "spoken_form": "contact message",
                "alternate_sopken_forms": []
              },
              "key(up)": {
                "spoken_form": "contact up",
                "alternate_sopken_forms": []
              },
              "key(down)": {
                "spoken_form": "contact down",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      },
      "apps/thunderbird/thunderbird_tasks.talon": {
        "context": {
          "thunderbird tasks": {
            "action": {
              "user.thunderbird_mod(\"i\")": {
                "spoken_form": "event new",
                "alternate_sopken_forms": []
              },
              "user.thunderbird_mod(\"d\")": {
                "spoken_form": "task new",
                "alternate_sopken_forms": []
              },
              "key(delete)": {
                "spoken_form": "(task | event) delete",
                "alternate_sopken_forms": []
              },
              "key(f11)": {
                "spoken_form": "toggle today",
                "alternate_sopken_forms": []
              }
            }
          }
        }
      }
    }
  }
}

[
    {
        "repo_id": 477959371,
        "user_id": 30133577,
        "timestamp": "2022-04-05T17:12:37.663039",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "kill": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "semi": ";"
                }
            }
        ]
    },
    {
        "repo_id": 477884937,
        "user_id": 27601096,
        "timestamp": "2022-04-05T17:13:09.644444",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477389446,
        "user_id": 102916005,
        "timestamp": "2022-04-05T17:13:41.503828",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477174740,
        "user_id": 42753901,
        "timestamp": "2022-04-05T17:14:13.334520",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 477019158,
        "user_id": 9081484,
        "timestamp": "2022-04-05T17:14:45.365932",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 476841958,
        "user_id": 12724445,
        "timestamp": "2022-04-05T17:15:17.139004",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 474990819,
        "user_id": 12444206,
        "timestamp": "2022-04-05T17:15:48.974172",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 474940647,
        "user_id": 22856173,
        "timestamp": "2022-04-05T17:16:22.092486",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 474546646,
        "user_id": 1550505,
        "timestamp": "2022-04-05T17:16:54.067809",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 474388910,
        "user_id": 45516337,
        "timestamp": "2022-04-05T17:17:25.937542",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 472432551,
        "user_id": 5840057,
        "timestamp": "2022-04-05T17:17:57.878198",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 472104221,
        "user_id": 2882631,
        "timestamp": "2022-04-05T17:18:29.721790",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 471889008,
        "user_id": 31149794,
        "timestamp": "2022-04-05T17:19:01.680362",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 471520796,
        "user_id": 15989073,
        "timestamp": "2022-04-05T17:19:33.696214",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 471178304,
        "user_id": 5151593,
        "timestamp": "2022-04-05T17:20:05.588133",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 470362537,
        "user_id": 12524534,
        "timestamp": "2022-04-05T17:20:37.396277",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 468980764,
        "user_id": 91553746,
        "timestamp": "2022-04-05T17:21:09.315220",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 467356180,
        "user_id": 298026,
        "timestamp": "2022-04-05T17:21:41.271661",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466954393,
        "user_id": 11667004,
        "timestamp": "2022-04-05T17:22:13.111872",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466295739,
        "user_id": 25558903,
        "timestamp": "2022-04-05T17:22:44.973939",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466283180,
        "user_id": 78682,
        "timestamp": "2022-04-05T17:23:16.767192",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 466200467,
        "user_id": 8952123,
        "timestamp": "2022-04-05T17:23:48.298995",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 465328479,
        "user_id": 5657510,
        "timestamp": "2022-04-05T17:24:20.139506",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 464712307,
        "user_id": 14843677,
        "timestamp": "2022-04-05T17:24:52.069376",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 464229346,
        "user_id": 100534119,
        "timestamp": "2022-04-05T17:25:24.034292",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 464070135,
        "user_id": 24357577,
        "timestamp": "2022-04-05T17:25:55.887216",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 463540524,
        "user_id": 195468,
        "timestamp": "2022-04-05T17:26:27.857644",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 462815102,
        "user_id": 4099370,
        "timestamp": "2022-04-05T17:26:59.685056",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 461892074,
        "user_id": 3690443,
        "timestamp": "2022-04-05T17:27:31.599875",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 460682561,
        "user_id": 1181721,
        "timestamp": "2022-04-05T17:28:03.326862",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 460052479,
        "user_id": 20117014,
        "timestamp": "2022-04-05T17:28:35.058023",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 459360446,
        "user_id": 36056663,
        "timestamp": "2022-04-05T17:29:06.609211",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 458903871,
        "user_id": 24389100,
        "timestamp": "2022-04-05T17:29:38.230812",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 458152184,
        "user_id": 1429641,
        "timestamp": "2022-04-05T17:30:09.784418",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 457589121,
        "user_id": 1400380,
        "timestamp": "2022-04-05T17:30:41.501806",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ink": "i",
                    "jane": "j",
                    "kick": "k",
                    "ox": "o"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "page up": "edit.page_up()",
                    "page down": "edit.page_down()"
                }
            }
        ]
    },
    {
        "repo_id": 457542669,
        "user_id": 49439044,
        "timestamp": "2022-04-05T17:31:13.214977",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clap": "enter",
                    "drill": "delete",
                    "chuck": "backspace",
                    "junk": "backspace",
                    "scratch": "backspace",
                    "scrape": "escape",
                    "void": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "1pull request": "user.vscode(\"pr.create\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "talon sleep all [<phrase>]": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "drowse [<phrase>]": "speech.disable()"
                }
            }
        ]
    },
    {
        "repo_id": 457521235,
        "user_id": 243140,
        "timestamp": "2022-04-05T17:31:44.839976",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 457010828,
        "user_id": 98036866,
        "timestamp": "2022-04-05T17:32:16.433944",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 456707613,
        "user_id": 28880958,
        "timestamp": "2022-04-05T17:32:48.055499",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(bracket | left bracket)": "\"{\""
                }
            }
        ]
    },
    {
        "repo_id": 456258798,
        "user_id": 17749921,
        "timestamp": "2022-04-05T17:33:19.642798",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 456027437,
        "user_id": 6052475,
        "timestamp": "2022-04-05T17:33:51.252376",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "close square": "]",
                    "close paren": ")",
                    "close brace": "}",
                    "close angle": ">"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(refresh | reload) [it]": "browser.reload()",
                    "(refresh | reload) [it] hard": "browser.reload_hard()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy [that]": "edit.copy()",
                    "cut [that]": "edit.cut()",
                    "undo [that]": "edit.undo()",
                    "redo [that]": "edit.redo()",
                    "junk": "key(backspace)",
                    "padding": "insert(\"  \")\nkey(left)"
                }
            },
            {
                "file": "misc/cancel.talon",
                "context": "cancel",
                "commands": {
                    "(ignore | actually | maybe | anyways | okay) [<phrase>]": "app.notify(\"Command ignored\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | previous | left)": "app.tab_previous()",
                    "tab (next | right)": "app.tab_next()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "(talon sleep | hey (guys | eric | rich)) [<phrase>]": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(downscore | underscore | sub)": "\"_\""
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "(indent [more] | shove)": "edit.indent_more()",
                    "(indent less | out dent | tug)": "edit.indent_less()",
                    "(clear right | del)": "key(delete)"
                }
            }
        ]
    },
    {
        "repo_id": 455381897,
        "user_id": 3068446,
        "timestamp": "2022-04-05T17:34:22.810995",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 455250600,
        "user_id": 98972908,
        "timestamp": "2022-04-05T17:34:54.382911",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454814239,
        "user_id": 93682204,
        "timestamp": "2022-04-05T17:35:25.972248",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454385959,
        "user_id": 17555463,
        "timestamp": "2022-04-05T17:35:57.557218",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454326092,
        "user_id": 16470874,
        "timestamp": "2022-04-05T17:36:29.128850",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 454188859,
        "user_id": 7919039,
        "timestamp": "2022-04-05T17:37:06.715745",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 453692329,
        "user_id": 14280211,
        "timestamp": "2022-04-05T17:37:38.349281",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 453656894,
        "user_id": 11901400,
        "timestamp": "2022-04-05T17:38:10.083042",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 453215774,
        "user_id": 1472923,
        "timestamp": "2022-04-05T17:38:41.616248",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 452884028,
        "user_id": 93023868,
        "timestamp": "2022-04-05T17:39:18.979371",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 452483437,
        "user_id": 92004154,
        "timestamp": "2022-04-05T17:39:50.941180",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 452463744,
        "user_id": 94268524,
        "timestamp": "2022-04-05T17:40:22.492838",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(undo that|and do that)": "edit.undo()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(wheel|we'll) stop": "user.mouse_scroll_stop()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 451726600,
        "user_id": 42344656,
        "timestamp": "2022-04-05T17:40:54.127346",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 451317793,
        "user_id": 36604577,
        "timestamp": "2022-04-05T17:41:25.664140",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 450907189,
        "user_id": 12602371,
        "timestamp": "2022-04-05T17:41:57.360128",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 450253352,
        "user_id": 24943868,
        "timestamp": "2022-04-05T17:42:29.007996",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 450180737,
        "user_id": 1293125,
        "timestamp": "2022-04-05T17:43:01.143747",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 449806698,
        "user_id": 1839981,
        "timestamp": "2022-04-05T17:43:32.730187",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448991976,
        "user_id": 10353928,
        "timestamp": "2022-04-05T17:44:04.337208",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448852582,
        "user_id": 15121366,
        "timestamp": "2022-04-05T17:44:35.886896",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448667797,
        "user_id": 4704069,
        "timestamp": "2022-04-05T17:45:07.378402",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 448469426,
        "user_id": 2145008,
        "timestamp": "2022-04-05T17:45:39.026839",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 447450940,
        "user_id": 82670783,
        "timestamp": "2022-04-05T17:46:10.559061",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 446945956,
        "user_id": 35548127,
        "timestamp": "2022-04-05T17:46:42.219077",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 446581588,
        "user_id": 20517406,
        "timestamp": "2022-04-05T17:47:14.051515",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 446067710,
        "user_id": 163128,
        "timestamp": "2022-04-05T17:47:45.711154",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 445939534,
        "user_id": 3219419,
        "timestamp": "2022-04-05T17:48:17.243584",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 445816388,
        "user_id": 63201480,
        "timestamp": "2022-04-05T17:48:48.809745",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 445691841,
        "user_id": 12655228,
        "timestamp": "2022-04-05T17:49:20.400460",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 444564467,
        "user_id": 53412558,
        "timestamp": "2022-04-05T17:49:52.074548",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 443978995,
        "user_id": 21286812,
        "timestamp": "2022-04-05T17:50:23.742544",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 443889257,
        "user_id": 18250094,
        "timestamp": "2022-04-05T17:50:55.334140",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "weapon": "w"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "taste": "cmd"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "chuck": "backspace",
                    "void": "space",
                    "clap": "enter",
                    "drill": "delete",
                    "scrape": "escape"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "single": "'",
                    "lack": "[",
                    "rack": "]",
                    "stroke": "/",
                    "backstroke": "\\",
                    "score": "_",
                    "lace": "(",
                    "race": ")",
                    "ace": "}",
                    "double": "\"",
                    "drip": ",",
                    "semi": ";",
                    "v dot": ":"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "semi": ";",
                    "v dot": ":"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "radio silence [<phrase>]": "speech.disable()",
                    "green light": "speech.enable()"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "spam": "\", \""
                }
            }
        ]
    },
    {
        "repo_id": 443450461,
        "user_id": 95110067,
        "timestamp": "2022-04-05T17:51:26.856995",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 443171806,
        "user_id": 5711101,
        "timestamp": "2022-04-05T17:51:58.568419",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 442458309,
        "user_id": 25511262,
        "timestamp": "2022-04-05T17:52:30.106926",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 441919485,
        "user_id": 7907782,
        "timestamp": "2022-04-05T17:53:01.745552",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 441762817,
        "user_id": 26435834,
        "timestamp": "2022-04-05T17:53:33.390448",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 441560011,
        "user_id": 15986712,
        "timestamp": "2022-04-05T17:54:04.952335",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 441556743,
        "user_id": 4312305,
        "timestamp": "2022-04-05T17:54:36.534601",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 440296382,
        "user_id": 15270272,
        "timestamp": "2022-04-05T17:55:08.058011",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 440053279,
        "user_id": 74739,
        "timestamp": "2022-04-05T17:55:39.609155",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 437084814,
        "user_id": 60481661,
        "timestamp": "2022-04-05T17:56:11.152675",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 437048021,
        "user_id": 38531814,
        "timestamp": "2022-04-05T17:56:42.714805",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 436546230,
        "user_id": 17482349,
        "timestamp": "2022-04-05T17:57:14.285690",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 436089181,
        "user_id": 1801875,
        "timestamp": "2022-04-05T17:57:45.968493",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 435856117,
        "user_id": 6841417,
        "timestamp": "2022-04-05T17:58:17.788536",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 434275425,
        "user_id": 830218,
        "timestamp": "2022-04-05T17:58:49.441786",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 433969454,
        "user_id": 2236620,
        "timestamp": "2022-04-05T17:59:20.970826",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 433510707,
        "user_id": 36557576,
        "timestamp": "2022-04-05T17:59:52.450262",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 432989937,
        "user_id": 22130400,
        "timestamp": "2022-04-05T18:00:24.051495",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 432174381,
        "user_id": 60743906,
        "timestamp": "2022-04-05T18:00:55.629432",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 431996009,
        "user_id": 13921790,
        "timestamp": "2022-04-05T18:01:27.251783",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 430919486,
        "user_id": 12286472,
        "timestamp": "2022-04-05T18:01:58.914449",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 430783951,
        "user_id": 1587084,
        "timestamp": "2022-04-05T18:02:30.402522",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 430310913,
        "user_id": 12608159,
        "timestamp": "2022-04-05T18:03:02.029244",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 429972176,
        "user_id": 3287378,
        "timestamp": "2022-04-05T18:03:33.520763",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 429930875,
        "user_id": 848589,
        "timestamp": "2022-04-05T18:04:05.183818",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 429486665,
        "user_id": 1620051,
        "timestamp": "2022-04-05T18:04:37.032364",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 428364442,
        "user_id": 726818,
        "timestamp": "2022-04-05T18:05:08.866971",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 427462611,
        "user_id": 765873,
        "timestamp": "2022-04-05T18:05:40.505411",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 426988120,
        "user_id": 45826559,
        "timestamp": "2022-04-05T18:06:12.047191",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 425874932,
        "user_id": 32393906,
        "timestamp": "2022-04-05T18:06:43.541425",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 425184629,
        "user_id": 3219671,
        "timestamp": "2022-04-05T18:07:15.169516",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 424266409,
        "user_id": 216216,
        "timestamp": "2022-04-05T18:07:46.752119",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422905258,
        "user_id": 41682903,
        "timestamp": "2022-04-05T18:08:18.255949",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422785308,
        "user_id": 4354311,
        "timestamp": "2022-04-05T18:08:49.816816",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422617945,
        "user_id": 5358449,
        "timestamp": "2022-04-05T18:09:21.335133",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 422560443,
        "user_id": 6410431,
        "timestamp": "2022-04-05T18:09:52.908143",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 420491244,
        "user_id": 23173985,
        "timestamp": "2022-04-05T18:10:24.528893",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl",
                    "sky": "shift"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "scratch": "backspace",
                    "kill": "delete",
                    "ta": "space",
                    "cape": "escape"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "score": "_"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "cop": "edit.copy()",
                    "cut it": "edit.cut()",
                    "paish": "edit.paste()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/operators_lambda.talon",
                "context": "operators lambda",
                "commands": {
                    "lambda": "user.code_operator_lambda()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "lang/javascript/javascript.talon",
                "context": "javascript",
                "commands": {
                    "spread": "\"...\"",
                    "sure is": "\" === \"",
                    "sure isn't": "\" !== \"",
                    "async": "\"async \"",
                    "await": "\"await \"",
                    "const": "\"const \"",
                    "export": "\"export \"",
                    "let": "\"let \"",
                    "var": "\"var \""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(triple grave | triple back tick)": "insert(\"```\")"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "kill [line] <number>": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "kill <number> until <number>": "user.select_range(number_1, number_2)\nedit.delete()",
                    "cop [line] <number>": "user.select_range(number, number)\nedit.copy()",
                    "cop <number> until <number>": "user.select_range(number_1, number_2)\nedit.copy()",
                    "(paish | replace) <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "(grab | cell | sell) [line] <number>": "user.select_range(number, number)",
                    "(grab | cell | sell) <number> until <number>": "user.select_range(number_1, number_2)"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "lep": "edit.left()",
                    "rock": "edit.right()",
                    "hub": "edit.up()",
                    "dune": "edit.down()",
                    "lep way": "edit.line_start()\nedit.line_start()",
                    "rock way": "edit.line_end()",
                    "dune way": "edit.file_end()",
                    "hub way": "edit.file_start()",
                    "grab line": "edit.select_line()",
                    "grab all": "edit.select_all()",
                    "grab lep": "edit.extend_left()",
                    "grab rock": "edit.extend_right()",
                    "grab hub": "edit.extend_line_up()",
                    "grab dune": "edit.extend_line_down()",
                    "grab word": "edit.select_word()",
                    "grab lep word": "edit.extend_word_left()",
                    "grab rock word": "edit.extend_word_right()",
                    "grab lep way": "edit.extend_line_start()",
                    "grab rock way": "edit.extend_line_end()",
                    "grab hub way": "edit.extend_file_start()",
                    "grab dune way": "edit.extend_file_end()",
                    "kill line": "edit.delete_line()",
                    "kill up": "edit.extend_line_up()\nedit.delete()",
                    "kill down": "edit.extend_line_down()\nedit.delete()",
                    "scratch word": "edit.delete_word()",
                    "kill word": "edit.extend_word_right()\nedit.delete()",
                    "scratch way": "edit.extend_line_start()\nedit.delete()",
                    "kill way": "edit.extend_line_end()\nedit.delete()",
                    "kill up way": "edit.extend_file_start()\nedit.delete()",
                    "kill down way": "edit.extend_file_end()\nedit.delete()",
                    "kill all": "edit.select_all()\nedit.delete()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 420281023,
        "user_id": 717852,
        "timestamp": "2022-04-05T18:10:56.219026",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 419531730,
        "user_id": 71795669,
        "timestamp": "2022-04-05T18:11:27.851124",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 417851538,
        "user_id": 28291528,
        "timestamp": "2022-04-05T18:11:59.416428",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 416893916,
        "user_id": 12233471,
        "timestamp": "2022-04-05T18:12:31.219041",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 414386266,
        "user_id": 55820966,
        "timestamp": "2022-04-05T18:13:02.676254",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 414108639,
        "user_id": 63059805,
        "timestamp": "2022-04-05T18:13:34.535326",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 413320713,
        "user_id": 5217684,
        "timestamp": "2022-04-05T18:14:06.096067",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 412890404,
        "user_id": 29584603,
        "timestamp": "2022-04-05T18:14:37.721034",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 412103160,
        "user_id": 91682292,
        "timestamp": "2022-04-05T18:15:09.194379",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 411736468,
        "user_id": 289079,
        "timestamp": "2022-04-05T18:15:40.658320",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 410770630,
        "user_id": 88945074,
        "timestamp": "2022-04-05T18:16:12.128048",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 410395641,
        "user_id": 21588,
        "timestamp": "2022-04-05T18:16:44.215725",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 407933295,
        "user_id": 52972088,
        "timestamp": "2022-04-05T18:17:15.843946",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "stack": ":",
                    "rare": "]",
                    "race": "}",
                    "doubt": "\""
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "drowse [<phrase>]": "speech.disable()",
                    "sunshine": "speech.enable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(rbrack | are bracket | right bracket | racket)": "\"}\""
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 407236199,
        "user_id": 84646533,
        "timestamp": "2022-04-05T18:17:47.963872",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 406344318,
        "user_id": 56249075,
        "timestamp": "2022-04-05T18:18:19.450679",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 406294417,
        "user_id": 8206630,
        "timestamp": "2022-04-05T18:18:50.962772",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 405180930,
        "user_id": 192751,
        "timestamp": "2022-04-05T18:19:22.516314",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 404442342,
        "user_id": 1432129,
        "timestamp": "2022-04-05T18:19:54.714655",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 403757096,
        "user_id": 51184,
        "timestamp": "2022-04-05T18:20:26.362893",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 403741487,
        "user_id": 38996442,
        "timestamp": "2022-04-05T18:20:57.959717",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 403112768,
        "user_id": 1163925,
        "timestamp": "2022-04-05T18:21:29.557644",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 402391927,
        "user_id": 128854,
        "timestamp": "2022-04-05T18:22:01.115000",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 401897761,
        "user_id": 9433472,
        "timestamp": "2022-04-05T18:22:34.473055",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 401847267,
        "user_id": 17151865,
        "timestamp": "2022-04-05T18:23:23.579321",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "alfa": "a",
                    "delta": "d",
                    "echo": "e",
                    "golf": "g",
                    "hotel": "h",
                    "kilo": "k",
                    "lima": "l",
                    "mike": "m",
                    "papa": "p",
                    "quebec": "q",
                    "whiskey": "w",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 401590650,
        "user_id": 1522310,
        "timestamp": "2022-04-05T18:23:56.964615",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "apple": "a",
                    "back": "b",
                    "change": "c",
                    "ear": "e",
                    "inside": "i",
                    "next": "n",
                    "over": "o",
                    "queen": "q",
                    "search": "s",
                    "victor": "v",
                    "word": "w",
                    "easy": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt",
                    "sky": "shift",
                    "fender": "ctrl",
                    "gibson": "cmd"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "single quote": "'"
                }
            },
            {
                "file": "misc/messaging.talon",
                "context": "messaging",
                "commands": {
                    "([channel] unread [last | up] | gopreev)": "user.messaging_unread_previous()",
                    "([channel] unread [next | down] | goneck)": "user.messaging_unread_next()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(touch | [left] click)": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "(midclick | center)": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> (touch | [left] click)": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/slack/slack_mac.talon",
                "context": "slack mac",
                "commands": {
                    "(unread | end red | one red) trap": "key(cmd-shift-t)"
                }
            },
            {
                "file": "apps/generic_terminal/generic_terminal.talon",
                "context": "generic terminal",
                "commands": {
                    "see dee [<user.text>]": "user.terminal_change_directory(text or \"\")",
                    "see dee root": "user.terminal_change_directory_root()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "single quote inside": "insert(\"''\")\nkey(left)",
                    "([double] quote | string) inside": "insert('\"\"')\nkey(left)",
                    "brace inside": "insert(\"{}\")\nkey(left)",
                    "square inside": "insert(\"[]\")\nkey(left)",
                    "paren inside": "insert(\"()\")\nkey(left)",
                    "percent inside": "insert(\"%%\")\nkey(left)",
                    "back tick inside": "insert(\"``\")\nkey(left)",
                    "single quote that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "([double] quote | string) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "square that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "paren that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "back tick that": "text = edit.selected_text()\nuser.paste('`{text}`')"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "(go word left | bounce)": "edit.word_left()",
                    "(go word right | leap)": "edit.word_right()",
                    "go (line start | head)": "edit.line_start()",
                    "go (line end | tail)": "edit.line_end()",
                    "select (word left | bounce)": "edit.extend_word_left()",
                    "select (word right | leap)": "edit.extend_word_right()",
                    "select (way left | head)": "edit.extend_line_start()",
                    "select (way right | tail)": "edit.extend_line_end()",
                    "(clear left | wipe)": "key(backspace)",
                    "(clear right | whack)": "key(delete)",
                    "(clear word left | scratch)": "edit.extend_word_left()\nedit.delete()",
                    "(clear word right | swallow)": "edit.extend_word_right()\nedit.delete()",
                    "clear (way left | head)": "edit.extend_line_start()\nedit.delete()",
                    "clear (way right | tail)": "edit.extend_line_end()\nedit.delete()",
                    "copy (word left | bounce)": "edit.extend_word_left()\nedit.copy()",
                    "copy (word right | leap)": "edit.extend_word_right()\nedit.copy()",
                    "cut (word left | bounce)": "edit.extend_word_left()\nedit.cut()",
                    "cut (word right | leap)": "edit.extend_word_right()\nedit.cut()"
                }
            },
            {
                "file": "mouse_grid/mouse_grid_open.talon",
                "context": "mouse grid open",
                "commands": {
                    "grid (off | close)": "user.grid_close()",
                    "grid [go] back": "user.grid_go_back()"
                }
            }
        ]
    },
    {
        "repo_id": 401471705,
        "user_id": 138279,
        "timestamp": "2022-04-05T18:24:28.507163",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "(word|way) <user.word>": "user.insert_formatted(user.word, \"NOOP\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 401085077,
        "user_id": 20683271,
        "timestamp": "2022-04-05T18:25:00.191566",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 398661149,
        "user_id": 46428485,
        "timestamp": "2022-04-05T18:25:31.976808",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 397448120,
        "user_id": 43415278,
        "timestamp": "2022-04-05T18:26:03.503987",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 396540453,
        "user_id": 13631007,
        "timestamp": "2022-04-05T18:26:35.574405",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 395633945,
        "user_id": 10852023,
        "timestamp": "2022-04-05T18:27:06.963462",
        "branch": "master",
        "command_groups": [
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 395343151,
        "user_id": 3109283,
        "timestamp": "2022-04-05T18:27:38.467933",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 393783000,
        "user_id": 4572377,
        "timestamp": "2022-04-05T18:28:09.893660",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 393204210,
        "user_id": 39004650,
        "timestamp": "2022-04-05T18:28:42.396740",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 392454405,
        "user_id": 22085373,
        "timestamp": "2022-04-05T18:29:13.914841",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 392153553,
        "user_id": 905280,
        "timestamp": "2022-04-05T18:29:45.368028",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 391319376,
        "user_id": 51181822,
        "timestamp": "2022-04-05T18:30:16.766371",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 391174212,
        "user_id": 7913776,
        "timestamp": "2022-04-05T18:30:55.805289",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 391098151,
        "user_id": 56436734,
        "timestamp": "2022-04-05T18:31:27.375420",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 390706318,
        "user_id": 75254598,
        "timestamp": "2022-04-05T18:31:58.787931",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 389290964,
        "user_id": 82244060,
        "timestamp": "2022-04-05T18:32:31.358937",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 389064353,
        "user_id": 1420169,
        "timestamp": "2022-04-05T18:33:02.768749",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 388827141,
        "user_id": 793774,
        "timestamp": "2022-04-05T18:33:44.557246",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 387545516,
        "user_id": 63086420,
        "timestamp": "2022-04-05T18:34:20.170237",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "faint": "f",
                    "ivy": "i"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace",
                    "push": "end",
                    "pull": "home",
                    "spunk": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "are paren": ")",
                    "lack": "{",
                    "rack": "}",
                    "da boat": "\"",
                    "semi": ";"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "lack": "\"{\"",
                    "rack": "\"}\"",
                    "solo arrow": "\"->\""
                }
            }
        ]
    },
    {
        "repo_id": 386706548,
        "user_id": 13141110,
        "timestamp": "2022-04-05T18:34:51.887905",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 386678509,
        "user_id": 220967,
        "timestamp": "2022-04-05T18:35:23.897866",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385933502,
        "user_id": 19817302,
        "timestamp": "2022-04-05T18:35:55.794230",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385851610,
        "user_id": 583851,
        "timestamp": "2022-04-05T18:36:27.337193",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385110154,
        "user_id": 225847,
        "timestamp": "2022-04-05T18:36:58.831649",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 385067243,
        "user_id": 15631555,
        "timestamp": "2022-04-05T18:37:30.270948",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 384928910,
        "user_id": 5533167,
        "timestamp": "2022-04-05T18:38:01.639056",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 384549508,
        "user_id": 2035323,
        "timestamp": "2022-04-05T18:38:33.115291",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 384154127,
        "user_id": 376105,
        "timestamp": "2022-04-05T18:39:04.634400",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 382437159,
        "user_id": 76692911,
        "timestamp": "2022-04-05T18:39:36.078756",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 382378868,
        "user_id": 770269,
        "timestamp": "2022-04-05T18:40:07.638810",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 382032821,
        "user_id": 85769,
        "timestamp": "2022-04-05T18:40:39.087426",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 381154547,
        "user_id": 17451821,
        "timestamp": "2022-04-05T18:41:10.516518",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 380682923,
        "user_id": 3511326,
        "timestamp": "2022-04-05T18:41:43.199949",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 378086563,
        "user_id": 10260883,
        "timestamp": "2022-04-05T18:42:14.582312",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 377972846,
        "user_id": 1231294,
        "timestamp": "2022-04-05T18:42:46.383473",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 375912462,
        "user_id": 24251362,
        "timestamp": "2022-04-05T18:43:18.042492",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "beat": "b",
                    "delta": "d",
                    "oscar": "o",
                    "quebec": "q"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "backspace": "backspace",
                    "head": "home",
                    "tail": "end",
                    "tabber": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "bracket": "{",
                    "left bracket": "{",
                    "R bracket": "}",
                    "right bracket": "}"
                }
            },
            {
                "file": "apps/web/github/github.talon",
                "context": "github",
                "commands": {
                    "show notifications": "insert(\"gn\")",
                    "show dashboard": "insert(\"gd\")",
                    "show code": "insert(\"gc\")",
                    "show issues": "insert(\"gi\")",
                    "show pull requests": "insert(\"gp\")",
                    "show wiki": "insert(\"gw\")",
                    "show actions": "insert(\"ga\")",
                    "show projects": "insert(\"gb\")",
                    "show discussions": "insert(\"gg\")",
                    "show workflow": "insert(\"gf\")"
                }
            },
            {
                "file": "apps/web/gitlab.talon",
                "context": "gitlab",
                "commands": {
                    "show projects [page]": "key(shift-p)",
                    "show groups [page]": "key(shift-g)",
                    "show activity [page]": "key(shift-a)",
                    "show milestones [page]": "key(shift-l)",
                    "show snippets [page]": "key(shift-s)",
                    "show issues [page]": "key(shift-i)",
                    "show merge requests [page]": "key(shift-m)",
                    "show to do [list] [page]": "key(shift-t)",
                    "show project home [page]": "insert(\"gp\")",
                    "show project activity [feed]": "insert(\"gv\")",
                    "show project releases [list]": "insert(\"gr\")",
                    "show project files [list]": "insert(\"gf\")",
                    "show project file search [page]": "key(t)",
                    "show project (commit|commits) [list]": "insert(\"gc\")",
                    "show (repository|repo) graph [page]": "insert(\"gn\")",
                    "show (repository|repo) charts": "insert(\"gd\")",
                    "show project issues [list]": "insert(\"gi\")",
                    "show new issues [list]": "insert(\"i\")",
                    "show project issues boards [list]": "insert(\"gb\")",
                    "show project merge requests [list]": "insert(\"gm\")",
                    "show jobs [list]": "insert(\"gj\")",
                    "show project metrics": "insert(\"gl\")",
                    "show project environments": "insert(\"ge\")",
                    "show project cubes": "insert(\"gk\")",
                    "show project snippets [list]": "insert(\"gs\")",
                    "show project wiki": "insert(\"gw\")"
                }
            },
            {
                "file": "apps/jetbrains/jetbrains.talon",
                "context": "jetbrains",
                "commands": {
                    "finish": "user.idea(\"action EditorCompleteStatement\")"
                }
            },
            {
                "file": "apps/slack/slack_mac.talon",
                "context": "slack mac",
                "commands": {
                    "(section | zone) next": "key(f6)",
                    "(element | bit) next": "key(tab)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "padding": "insert(\"  \")\nkey(left)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "[media] play (previous | last)": "key(prev)"
                }
            },
            {
                "file": "misc/extensions.talon",
                "context": "extensions",
                "commands": {
                    "dot {user.file_extension}": "\"{file_extension}\""
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "triple (grave | back tick)": "insert(\"```\")",
                    "comma and": "\", \"",
                    "inside parens": "insert(\"()\")\nkey(left)"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "num <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 375783747,
        "user_id": 414788,
        "timestamp": "2022-04-05T18:43:49.681447",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "coma": ","
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "coma": ","
                }
            },
            {
                "file": "apps/web/github/github.talon",
                "context": "github",
                "commands": {
                    "show notifications": "insert(\"gn\")",
                    "show dashboard": "insert(\"gd\")",
                    "show code": "insert(\"gc\")",
                    "show issues": "insert(\"gi\")",
                    "show pull requests": "insert(\"gp\")",
                    "show wiki": "insert(\"gw\")",
                    "show actions": "insert(\"ga\")",
                    "show projects": "insert(\"gb\")",
                    "show discussions": "insert(\"gg\")",
                    "show workflow": "insert(\"gf\")"
                }
            },
            {
                "file": "apps/web/gitlab.talon",
                "context": "gitlab",
                "commands": {
                    "show projects [page]": "key(shift-p)",
                    "show groups [page]": "key(shift-g)",
                    "show activity [page]": "key(shift-a)",
                    "show milestones [page]": "key(shift-l)",
                    "show snippets [page]": "key(shift-s)",
                    "show issues [page]": "key(shift-i)",
                    "show merge requests [page]": "key(shift-m)",
                    "show to do [list] [page]": "key(shift-t)",
                    "show project home [page]": "insert(\"gp\")",
                    "show project activity [feed]": "insert(\"gv\")",
                    "show project releases [list]": "insert(\"gr\")",
                    "show project files [list]": "insert(\"gf\")",
                    "show project file search [page]": "key(t)",
                    "show project (commit|commits) [list]": "insert(\"gc\")",
                    "show (repository|repo) graph [page]": "insert(\"gn\")",
                    "show (repository|repo) charts": "insert(\"gd\")",
                    "show project issues [list]": "insert(\"gi\")",
                    "show new issues [list]": "insert(\"i\")",
                    "show project issues boards [list]": "insert(\"gb\")",
                    "show project merge requests [list]": "insert(\"gm\")",
                    "show jobs [list]": "insert(\"gj\")",
                    "show project metrics": "insert(\"gl\")",
                    "show project environments": "insert(\"ge\")",
                    "show project cubes": "insert(\"gk\")",
                    "show project snippets [list]": "insert(\"gs\")",
                    "show project wiki": "insert(\"gw\")"
                }
            },
            {
                "file": "apps/jetbrains/jetbrains.talon",
                "context": "jetbrains",
                "commands": {
                    "finish": "user.idea(\"action EditorCompleteStatement\")"
                }
            },
            {
                "file": "apps/slack/slack_mac.talon",
                "context": "slack mac",
                "commands": {
                    "(section | zone) next": "key(f6)",
                    "(element | bit) next": "key(tab)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "junk": "key(backspace)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "(window next|gibby)": "app.window_next()",
                    "(window last|shibby)": "app.window_previous()"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(downscore | underscore | crunder)": "\"_\"",
                    "(comma and | spamma | swipe)": "\", \""
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "go left|crimp": "edit.left()",
                    "go right|chris": "edit.right()",
                    "go up|jeep": "edit.up()",
                    "go down|doom": "edit.down()",
                    "go line start|lecksy": "edit.line_start()",
                    "go line end|ricky": "edit.line_end()"
                }
            }
        ]
    },
    {
        "repo_id": 375363540,
        "user_id": 14166902,
        "timestamp": "2022-04-05T18:44:21.208608",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "bar": "b",
                    "ice": "i",
                    "mad": "m"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "go to sleep": "speech.disable()",
                    "wake up": "speech.enable()"
                }
            }
        ]
    },
    {
        "repo_id": 374854063,
        "user_id": 31605846,
        "timestamp": "2022-04-05T18:44:52.741549",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 374017931,
        "user_id": 221511,
        "timestamp": "2022-04-05T18:45:24.204507",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 373945483,
        "user_id": 24682704,
        "timestamp": "2022-04-05T18:45:55.985906",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 373513920,
        "user_id": 3151827,
        "timestamp": "2022-04-05T18:46:27.371546",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 373079326,
        "user_id": 14088282,
        "timestamp": "2022-04-05T18:46:58.787506",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 372312569,
        "user_id": 9077250,
        "timestamp": "2022-04-05T18:47:30.351972",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "browser (refresh | reload)": "browser.reload()",
                    "browser (refresh | reload) hard": "browser.reload_hard()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that | scratch that | clear that | wipe that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/datetimeinsert.talon",
                "context": "datetimeinsert",
                "commands": {
                    "date": "insert(user.time_format(\"%Y-%m-%d\"))",
                    "date UTC": "insert(user.time_format_utc(\"%Y-%m-%d\"))",
                    "timestamp": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S\"))",
                    "timestamp high resolution": "insert(user.time_format(\"%Y-%m-%d %H:%M:%S.%f\"))",
                    "timestamp UTC": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S\"))",
                    "timestamp UTC high resolution": "insert(user.time_format_utc(\"%Y-%m-%d %H:%M:%S.%f\"))"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "undo that": "user.clear_last_phrase()",
                    "undo selection": "edit.delete()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "go to sleep": "speech.disable()",
                    "tell sleep": "speech.disable()",
                    "talon sleep": "speech.disable()",
                    "wake up": "speech.enable()",
                    "tell wake": "speech.enable()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(parens | paren | args) that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "select line start": "edit.extend_line_start()",
                    "select line end": "edit.extend_line_end()",
                    "select top": "edit.extend_file_start()",
                    "select bottom": "edit.extend_file_end()",
                    "(wipe | delete) line": "edit.delete_line()",
                    "(wipe | delete) left": "key(backspace)",
                    "(wipe | delete) right": "key(delete)",
                    "(wipe | delete) up": "edit.extend_line_up()\nedit.delete()",
                    "(wipe | delete) down": "edit.extend_line_down()\nedit.delete()",
                    "(wipe | delete) word": "edit.delete_word()",
                    "(wipe | delete) word left": "edit.extend_word_left()\nedit.delete()",
                    "(wipe | delete) word right": "edit.extend_word_right()\nedit.delete()",
                    "(wipe | delete) line start": "edit.extend_line_start()\nedit.delete()",
                    "(wipe | delete) line end": "edit.extend_line_end()\nedit.delete()",
                    "(wipe | delete) top": "edit.extend_file_start()\nedit.delete()",
                    "(wipe | delete) bottom": "edit.extend_file_end()\nedit.delete()",
                    "(wipe | delete) all": "edit.select_all()\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 372307617,
        "user_id": 10604952,
        "timestamp": "2022-04-05T18:48:02.995933",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 372223016,
        "user_id": 4321827,
        "timestamp": "2022-04-05T18:48:34.503374",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 371139530,
        "user_id": 54390138,
        "timestamp": "2022-04-05T18:49:05.982386",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 371138019,
        "user_id": 14080134,
        "timestamp": "2022-04-05T18:49:38.466121",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 370349195,
        "user_id": 6242530,
        "timestamp": "2022-04-05T18:50:10.230317",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 370171319,
        "user_id": 15764229,
        "timestamp": "2022-04-05T18:50:41.612020",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 369587001,
        "user_id": 12073282,
        "timestamp": "2022-04-05T18:51:13.013711",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 366768107,
        "user_id": 727316,
        "timestamp": "2022-04-05T18:51:44.426081",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 365022071,
        "user_id": 57390056,
        "timestamp": "2022-04-05T18:52:16.789769",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "zulu": "z"
                }
            }
        ]
    },
    {
        "repo_id": 364685941,
        "user_id": 20028,
        "timestamp": "2022-04-05T18:52:48.218597",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 364626829,
        "user_id": 3256759,
        "timestamp": "2022-04-05T18:53:19.598119",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "hat": "h",
                    "eek": "i",
                    "jam": "j",
                    "man": "m",
                    "well": "w"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 363648910,
        "user_id": 69818598,
        "timestamp": "2022-04-05T18:53:50.890314",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 362912901,
        "user_id": 1590447,
        "timestamp": "2022-04-05T18:54:22.346776",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 362210081,
        "user_id": 7584665,
        "timestamp": "2022-04-05T18:54:53.974262",
        "branch": "main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "wet": "w"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "terminal focus": "user.vscode(\"workbench.action.terminal.focus\")"
                }
            }
        ]
    },
    {
        "repo_id": 360954098,
        "user_id": 57394581,
        "timestamp": "2022-04-05T18:55:25.714839",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "wet": "w"
                }
            }
        ]
    },
    {
        "repo_id": 360842356,
        "user_id": 21974901,
        "timestamp": "2022-04-05T18:56:12.911454",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arm": "a",
                    "spit": "i",
                    "orc": "o",
                    "pill": "p",
                    "sing": "s"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "soup": "super",
                    "cone": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "backspace": "backspace",
                    "home key": "home",
                    "end key": "end",
                    "jump": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "pie quote": "'",
                    "rare": "]",
                    "backer": "\\",
                    "underscore": "_",
                    "bear": "(",
                    "apple": ")",
                    "nose": "}",
                    "more than": ">"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "f one": "f1",
                    "f two": "f2",
                    "f three": "f3",
                    "f four": "f4",
                    "f five": "f5",
                    "f six": "f6",
                    "f seven": "f7",
                    "f eight": "f8",
                    "f nine": "f9",
                    "f ten": "f10",
                    "f eleven": "f11",
                    "f twelve": "f12"
                }
            }
        ]
    },
    {
        "repo_id": 360119531,
        "user_id": 3371840,
        "timestamp": "2022-04-05T18:56:46.224066",
        "branch": "master",
        "command_groups": [
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            }
        ]
    },
    {
        "repo_id": 359588017,
        "user_id": 13191586,
        "timestamp": "2022-04-05T18:57:17.392482",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 359443211,
        "user_id": 17959719,
        "timestamp": "2022-04-05T18:57:48.675436",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 358793474,
        "user_id": 17622855,
        "timestamp": "2022-04-05T18:58:20.649099",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 357513522,
        "user_id": 25530469,
        "timestamp": "2022-04-05T18:58:52.027716",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 357372146,
        "user_id": 229924,
        "timestamp": "2022-04-05T18:59:23.287336",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 357041957,
        "user_id": 35416770,
        "timestamp": "2022-04-05T18:59:54.643908",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 356743718,
        "user_id": 9221501,
        "timestamp": "2022-04-05T19:00:25.964894",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 356633847,
        "user_id": 812847,
        "timestamp": "2022-04-05T19:00:57.310524",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 355551983,
        "user_id": 1383198,
        "timestamp": "2022-04-05T19:01:28.547286",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 355368945,
        "user_id": 68569318,
        "timestamp": "2022-04-05T19:01:59.864759",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 355000747,
        "user_id": 25496850,
        "timestamp": "2022-04-05T19:02:31.112796",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 354618162,
        "user_id": 536668,
        "timestamp": "2022-04-05T19:03:02.641750",
        "branch": "main",
        "command_groups": []
    },
    {
        "repo_id": 354369054,
        "user_id": 393608,
        "timestamp": "2022-04-05T19:03:34.352572",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 354326300,
        "user_id": 54818975,
        "timestamp": "2022-04-05T19:04:05.790485",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 354170041,
        "user_id": 10595845,
        "timestamp": "2022-04-05T19:04:37.164227",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 353746144,
        "user_id": 30735158,
        "timestamp": "2022-04-05T19:05:09.551219",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 353659759,
        "user_id": 22653028,
        "timestamp": "2022-04-05T19:05:41.187518",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 351824490,
        "user_id": 21959941,
        "timestamp": "2022-04-05T19:06:19.191951",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 350688578,
        "user_id": 4063086,
        "timestamp": "2022-04-05T19:06:50.602200",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 350470759,
        "user_id": 6205841,
        "timestamp": "2022-04-05T19:07:22.140174",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 350166824,
        "user_id": 193480,
        "timestamp": "2022-04-05T19:07:53.415512",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt",
                    "troll": "ctrl",
                    "superduper": "super"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "space it": "space",
                    "tabby": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "bracer": "{",
                    "careful": ",",
                    "the colon": ":",
                    "query": "?",
                    "goodness": "!"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "careful": ",",
                    "the colon": ":",
                    "query": "?",
                    "goodness": "!"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "padding": "insert(\"  \")\nkey(left)"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "phrase it <user.text>": "user.insert_formatted(text, \"NOOP\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(tripclick)": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(bracket | left bracket)": "\"{\"",
                    "(are bracket | right bracket)": "\"}\"",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 349466138,
        "user_id": 39571771,
        "timestamp": "2022-04-05T19:08:24.933859",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 349279325,
        "user_id": 23261427,
        "timestamp": "2022-04-05T19:08:56.267236",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 349113249,
        "user_id": 17651683,
        "timestamp": "2022-04-05T19:09:27.520983",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 348791512,
        "user_id": 19470970,
        "timestamp": "2022-04-05T19:09:58.765928",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 348747303,
        "user_id": 38437248,
        "timestamp": "2022-04-05T19:10:29.965367",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 348665193,
        "user_id": 29524288,
        "timestamp": "2022-04-05T19:11:02.965653",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 348395788,
        "user_id": 1656493,
        "timestamp": "2022-04-05T19:11:34.345797",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 347679345,
        "user_id": 1138625,
        "timestamp": "2022-04-05T19:12:05.639404",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 346491657,
        "user_id": 8116016,
        "timestamp": "2022-04-05T19:12:36.920106",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 345319211,
        "user_id": 16936908,
        "timestamp": "2022-04-05T19:13:08.170062",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 345186817,
        "user_id": 2436460,
        "timestamp": "2022-04-05T19:13:40.178376",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 344615212,
        "user_id": 15257711,
        "timestamp": "2022-04-05T19:14:11.452948",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 344305692,
        "user_id": 9664877,
        "timestamp": "2022-04-05T19:14:42.703815",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 344007171,
        "user_id": 36384768,
        "timestamp": "2022-04-05T19:15:14.014590",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 343957616,
        "user_id": 32660718,
        "timestamp": "2022-04-05T19:15:45.229171",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 342462230,
        "user_id": 8659099,
        "timestamp": "2022-04-05T19:16:16.701792",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 342293729,
        "user_id": 9314305,
        "timestamp": "2022-04-05T19:16:51.739626",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 342074745,
        "user_id": 74514113,
        "timestamp": "2022-04-05T19:17:22.973208",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 340793922,
        "user_id": 2476974,
        "timestamp": "2022-04-05T19:17:54.223438",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 340365042,
        "user_id": 69343575,
        "timestamp": "2022-04-05T19:18:25.465255",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 339033346,
        "user_id": 68754523,
        "timestamp": "2022-04-05T19:18:56.935866",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "curly": "{",
                    "left curly": "{",
                    "R curly": "}",
                    "right curly": "}"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "padding": "insert(\"  \")\nkey(left)"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside parens": "insert(\"()\")\nkey(left)",
                    "inside (bracket | braces | curly)": "insert(\"{}\")\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 337740683,
        "user_id": 67563877,
        "timestamp": "2022-04-05T19:19:28.192313",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 337588417,
        "user_id": 61197108,
        "timestamp": "2022-04-05T19:20:00.707508",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 336413925,
        "user_id": 15655308,
        "timestamp": "2022-04-05T19:20:32.267410",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 336399014,
        "user_id": 32513411,
        "timestamp": "2022-04-05T19:21:03.770113",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335841256,
        "user_id": 31530784,
        "timestamp": "2022-04-05T19:21:35.050093",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335691551,
        "user_id": 6345617,
        "timestamp": "2022-04-05T19:22:07.759666",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 335054560,
        "user_id": 7477,
        "timestamp": "2022-04-05T19:22:39.043926",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 334433926,
        "user_id": 145117,
        "timestamp": "2022-04-05T19:23:11.755172",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 333963706,
        "user_id": 18274535,
        "timestamp": "2022-04-05T19:23:44.098440",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 332936928,
        "user_id": 13384477,
        "timestamp": "2022-04-05T19:24:16.053100",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 332926200,
        "user_id": 2823112,
        "timestamp": "2022-04-05T19:24:47.852016",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 332877582,
        "user_id": 4495757,
        "timestamp": "2022-04-05T19:25:19.198127",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "bracket": "(",
                    "open bracket": "(",
                    "L bracket": "(",
                    "left bracket": "(",
                    "R bracket": ")",
                    "right bracket": ")",
                    "close bracket": ")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "backspace": "key(backspace)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(open brace | left brace)": "\"{\"",
                    "(close brace | right brace)": "\"}\"",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 332242417,
        "user_id": 52854254,
        "timestamp": "2022-04-05T19:25:51.423576",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 331793155,
        "user_id": 13315888,
        "timestamp": "2022-04-05T19:26:22.652698",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "house": "h",
                    "whip": "w"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "delete"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "click": "mouse_click(1)\nuser.grid_close()",
                    "<user.modifiers> click": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 331743022,
        "user_id": 70705663,
        "timestamp": "2022-04-05T19:26:53.893296",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 331083750,
        "user_id": 7062009,
        "timestamp": "2022-04-05T19:27:25.223989",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "dip": "d",
                    "mad": "m"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside bracket": "insert(\"{}\")\nkey(left)",
                    "inside (double|dub) quotes": "insert('\"\"')\nkey(left)",
                    "inside single quotes": "insert(\"''\")\nkey(left)",
                    "square that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "bracket that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(double) quote that": "text = edit.selected_text()\nuser.paste('\"{text}\"')",
                    "single quote that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 330268522,
        "user_id": 19848077,
        "timestamp": "2022-04-05T19:27:57.517054",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 330247476,
        "user_id": 109418,
        "timestamp": "2022-04-05T19:28:28.762011",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "back": "b",
                    "dip": "d",
                    "gone": "g",
                    "mad": "m",
                    "win": "w"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "ba": "backspace",
                    "scape": "escape",
                    "skip": "escape",
                    "sa": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "sing quote": "'",
                    "single quote": "'",
                    "close square": "]",
                    "close paren": ")",
                    "close brace": "}",
                    "quo": "\""
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "F key one": "f1",
                    "F key two": "f2",
                    "F key three": "f3",
                    "F key four": "f4",
                    "F key five": "f5",
                    "F key six": "f6",
                    "F key seven": "f7",
                    "F key eight": "f8",
                    "F key nine": "f9",
                    "F key ten": "f10",
                    "F key eleven": "f11",
                    "F key twelve": "f12"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "phase <user.text>": "user.insert_formatted(text, \"NOOP\")"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "git D": "\"git diff \"",
                    "git amend": "\"git commit --amend\\n\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab new": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()",
                    "tab open <number>": "user.tab_jump(number)",
                    "tab open last": "user.tab_final()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "<user.modifiers> kick": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "index": "insert(\"[]\")\nkey(left)",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "inside sing": "insert(\"''\")\nkey(left)",
                    "inside back": "insert(\"``\")\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 330139190,
        "user_id": 73491988,
        "timestamp": "2022-04-05T19:29:00.534815",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 330124626,
        "user_id": 931544,
        "timestamp": "2022-04-05T19:29:33.090488",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "rem": "backspace",
                    "junk": "delete",
                    "shock": "enter"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "funk one": "f1",
                    "funk two": "f2",
                    "funk three": "f3",
                    "funk four": "f4",
                    "funk five": "f5",
                    "funk six": "f6",
                    "funk seven": "f7",
                    "funk eight": "f8",
                    "funk nine": "f9",
                    "funk ten": "f10",
                    "funk eleven": "f11",
                    "funk twelve": "f12"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "stoosh": "edit.copy()",
                    "snatch": "edit.cut()",
                    "spark": "edit.paste()",
                    "ringle": "edit.undo()",
                    "dingle": "edit.redo()",
                    "yum save": "edit.save()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "yum open": "app.tab_open()",
                    "yum prev": "app.tab_previous()",
                    "yum next": "app.tab_next()",
                    "yum reopen": "app.tab_reopen()",
                    "yum jump <number>": "user.tab_jump(number)",
                    "yum jump last": "user.tab_final()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "fish": "edit.word_left()",
                    "fame": "edit.word_right()",
                    "left": "edit.left()",
                    "right": "edit.right()",
                    "dup": "edit.up()",
                    "down": "edit.down()",
                    "prome": "edit.line_start()",
                    "prend": "edit.line_end()",
                    "go way prome": "edit.line_start()\nedit.line_start()",
                    "go way prend": "edit.line_end()",
                    "wag": "edit.page_down()",
                    "crimp": "edit.page_up()",
                    "shift fish": "edit.extend_word_left()",
                    "shift fame": "edit.extend_word_right()",
                    "scratch": "edit.delete_word()",
                    "scratch left": "edit.extend_word_left()\nedit.delete()",
                    "kite right": "edit.extend_word_right()\nedit.delete()",
                    "snipple": "edit.extend_line_start()\nedit.delete()",
                    "snipper": "edit.extend_line_end()\nedit.delete()",
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 329687465,
        "user_id": 8341598,
        "timestamp": "2022-04-05T19:30:04.331097",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 329307061,
        "user_id": 2152027,
        "timestamp": "2022-04-05T19:30:35.570836",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 329047695,
        "user_id": 6142662,
        "timestamp": "2022-04-05T19:36:24.710694",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ice": "i"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 328776045,
        "user_id": 1030961,
        "timestamp": "2022-04-05T19:36:57.796959",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327846674,
        "user_id": 509141,
        "timestamp": "2022-04-05T19:37:29.264982",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327767812,
        "user_id": 1348763,
        "timestamp": "2022-04-05T19:38:00.522818",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327762479,
        "user_id": 117642,
        "timestamp": "2022-04-05T19:38:31.869426",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327473194,
        "user_id": 607281,
        "timestamp": "2022-04-05T19:39:03.053359",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 327406289,
        "user_id": 31413647,
        "timestamp": "2022-04-05T19:39:34.283116",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 326922917,
        "user_id": 407302,
        "timestamp": "2022-04-05T19:40:05.868990",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 326731774,
        "user_id": 4630670,
        "timestamp": "2022-04-05T19:40:37.096571",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 326476423,
        "user_id": 64963307,
        "timestamp": "2022-04-05T19:41:10.639895",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 326280784,
        "user_id": 17242147,
        "timestamp": "2022-04-05T19:41:41.932327",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 326179577,
        "user_id": 36928885,
        "timestamp": "2022-04-05T19:42:13.129447",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 325830117,
        "user_id": 25573864,
        "timestamp": "2022-04-05T19:42:50.391116",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "brav": "b",
                    "char": "c",
                    "delta": "d",
                    "echo": "e",
                    "foxy": "f",
                    "goof": "g",
                    "hotel": "h",
                    "india": "i",
                    "julia": "j",
                    "kilo": "k",
                    "lima": "l",
                    "mike": "m",
                    "nova": "n",
                    "oscar": "o",
                    "prime": "p",
                    "romeo": "r",
                    "sally": "s",
                    "tango": "t",
                    "uniform": "u",
                    "victor": "v",
                    "whisky": "w",
                    "yolo": "y",
                    "zulu": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "ace": "space",
                    "taby": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "dolly": "$",
                    "starling": "*",
                    "semper": ";",
                    "deckel": ":"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "semper": ";",
                    "deckel": ":"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 325631725,
        "user_id": 1474758,
        "timestamp": "2022-04-05T19:43:21.780702",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 325623187,
        "user_id": 1390086,
        "timestamp": "2022-04-05T19:43:53.315837",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325615708,
        "user_id": 9439781,
        "timestamp": "2022-04-05T19:44:24.564812",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 325434799,
        "user_id": 1622392,
        "timestamp": "2022-04-05T19:44:55.811996",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "fin": "f",
                    "jail": "j",
                    "peck": "p",
                    "yell": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "backspace": "backspace",
                    "junk": "backspace",
                    "nuke": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "slash": "/"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            }
        ]
    },
    {
        "repo_id": 325363921,
        "user_id": 755842,
        "timestamp": "2022-04-05T19:45:27.290302",
        "branch": "main",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ink": "i",
                    "jane": "j",
                    "kick": "k",
                    "oats": "o",
                    "risk": "r",
                    "spun": "s",
                    "york": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.number_key",
                "commands": {
                    "bubbles": "8"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "many": "cmd",
                    "troll": "ctrl",
                    "ship": "shift"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "clap": "enter",
                    "drill": "delete",
                    "chuck": "backspace",
                    "scratch": "backspace",
                    "scrape": "escape",
                    "void": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "brick": "`",
                    "stroke": "/",
                    "backstroke": "\\",
                    "equal": "=",
                    "score": "_",
                    "quest": "?",
                    "single": "'",
                    "double": "\"",
                    "leper": "(",
                    "repper": ")",
                    "lacker": "[",
                    "racker": "]",
                    "lacer": "{",
                    "racer": "}",
                    "langle": "<",
                    "wrangle": ">",
                    "snow": "*",
                    "percy": "%",
                    "tangle": "^",
                    "semi": ";",
                    "stack": ":",
                    "drip": ","
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "fun one": "f1",
                    "fun two": "f2",
                    "fun three": "f3",
                    "fun four": "f4",
                    "fun five": "f5",
                    "fun six": "f6",
                    "fun seven": "f7",
                    "fun eight": "f8",
                    "fun nine": "f9",
                    "fun ten": "f10",
                    "fun eleven": "f11",
                    "fun twelve": "f12"
                }
            },
            {
                "file": "lang/go.talon",
                "context": "go",
                "commands": {
                    "<user.operator> comment": "\"// \"",
                    "<user.operator> (funk | func | fun)": "\"func \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> break": "\"break\"",
                    "<user.operator> (chan | channel)": "\" chan \"",
                    "<user.operator> go": "\"go \"",
                    "<user.operator> if": "\"if \"",
                    "<user.operator> else if": "\" else if \"",
                    "<user.operator> else": "\" else \"",
                    "<user.operator> while": "\"while \"",
                    "<user.operator> for": "\"for \"",
                    "<user.operator> for range": "\"forr \"",
                    "<user.operator> format": "\"fmt\"",
                    "<user.operator> switch": "\"switch \"",
                    "<user.operator> select": "\"select \"",
                    "<user.operator> (const | constant)": "\" const \"",
                    "<user.operator> case": "\" case \"",
                    "<user.operator> default": "\" default:\"",
                    "<user.operator> type": "\" type \"",
                    "<user.operator> true": "\" true \"",
                    "<user.operator> false": "\" false \"",
                    "<user.operator> (start | struct | struck)": "insert(\" struct {\")\nkey(\"enter\")",
                    "<user.operator> interface": "insert(\" interface {\")\nkey(\"enter\")",
                    "<user.operator> string": "\" string \"",
                    "<user.operator> slice": "\" []\"",
                    "<user.operator> (int | integer | ant) 64": "\" int64 \"",
                    "<user.operator> return": "\" return \"",
                    "<user.operator> (air | err)": "\"err\""
                }
            },
            {
                "file": "lang/vimscript/vimscript.talon",
                "context": "vimscript",
                "commands": {
                    "<user.operator> command": "\"command! \"",
                    "<user.operator> end if": "\"endif\"",
                    "<user.operator> end for": "\"endfor\"",
                    "<user.operator> end while": "\"endwhile\"",
                    "<user.operator> end function": "\"endfunction\"",
                    "<user.operator> continue": "\"continue\""
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "<user.operator> (def | deaf | deft)": "\"def \"",
                    "<user.operator> try": "\"try:\\n\"",
                    "<user.operator> except": "\"except \"",
                    "<user.operator> raise": "\"raise \"",
                    "<user.operator> past": "\"pass\""
                }
            },
            {
                "file": "lang/r/r.talon",
                "context": "r",
                "commands": {
                    "<user.operator> na": "insert(\"NA\")"
                }
            },
            {
                "file": "lang/javascript/javascript.talon",
                "context": "javascript",
                "commands": {
                    "<user.operator> const": "\"const \"",
                    "<user.operator> let": "\"let \"",
                    "<user.operator> var": "\"var \"",
                    "<user.operator> async": "\"async \"",
                    "<user.operator> await": "\"await \"",
                    "<user.operator> spread": "\"...\""
                }
            },
            {
                "file": "lang/c/c.talon",
                "context": "c",
                "commands": {
                    "<user.operator> define": "\"#define \"",
                    "<user.operator> undefine": "\"#undef \"",
                    "<user.operator> if define": "\"#ifdef \"",
                    "<user.operator> pre if": "\"#if \"",
                    "<user.operator> error": "\"#error \"",
                    "<user.operator> pre else if": "\"#elif \"",
                    "<user.operator> pre end": "\"#endif \"",
                    "<user.operator> pragma": "\"#pragma \"",
                    "<user.operator> default": "\"default:\\nbreak;\""
                }
            },
            {
                "file": "lang/ruby/ruby.talon",
                "context": "ruby",
                "commands": {
                    "<user.operator> end": "\"end\"",
                    "<user.operator> begin": "\"begin\"",
                    "<user.operator> rescue": "\"rescue \"",
                    "<user.operator> module": "\"module \""
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "side dog": "user.vscode(\"workbench.action.toggleSidebarVisibility\")",
                    "<user.show_list> symbol [<user.text>] [halt]": "user.vscode(\"workbench.action.gotoSymbol\")\nsleep(50ms)\ninsert(text or \"\")",
                    "problem show": "user.vscode(\"workbench.panel.markers.view.focus\")",
                    "low dog": "user.vscode(\"workbench.action.togglePanel\")",
                    "pan edit": "user.vscode(\"workbench.action.focusActiveEditorGroup\")",
                    "wrap dog": "user.vscode(\"editor.action.toggleWordWrap\")",
                    "disk ugly": "user.vscode(\"workbench.action.files.saveWithoutFormatting\")",
                    "def show": "user.vscode(\"editor.action.revealDefinition\")",
                    "ref show": "user.vscode(\"references-view.find\")",
                    "(<user.teleport> declaration | follow)": "user.vscode(\"editor.action.revealDefinition\")",
                    "spring back": "user.vscode(\"workbench.action.navigateBack\")",
                    "spring forward": "user.vscode(\"workbench.action.navigateForward\")",
                    "<user.teleport> implementation": "user.vscode(\"editor.action.goToImplementation\")",
                    "<user.teleport> type": "user.vscode(\"editor.action.goToTypeDefinition\")",
                    "<user.teleport> usage": "user.vscode(\"references-view.find\")",
                    "<user.teleport> marks": "user.vscode(\"workbench.view.extension.bookmarks\")",
                    "<user.teleport> next mark": "user.vscode(\"bookmarks.jumpToNext\")",
                    "<user.teleport> last mark": "user.vscode(\"bookmarks.jumpToPrevious\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "step into": "user.vscode(\"workbench.action.debug.stepInto\")",
                    "term external": "user.vscode(\"workbench.action.terminal.openNativeConsole\")",
                    "term new": "user.vscode(\"workbench.action.terminal.new\")",
                    "term next": "user.vscode(\"workbench.action.terminal.focusNext\")",
                    "term last": "user.vscode(\"workbench.action.terminal.focusPrevious\")",
                    "term split": "user.vscode(\"workbench.action.terminal.split\")",
                    "term zoom": "user.vscode(\"workbench.action.toggleMaximizedPanel\")",
                    "term trash": "user.vscode(\"workbench.action.terminal.kill\")",
                    "term dog": "user.vscode_and_wait(\"workbench.action.terminal.toggleTerminal\")",
                    "term scroll up": "user.vscode(\"workbench.action.terminal.scrollUp\")",
                    "term scroll down": "user.vscode(\"workbench.action.terminal.scrollDown\")",
                    "term <number_small>": "user.vscode_terminal(number_small)",
                    "<user.select> less": "user.vscode(\"editor.action.smartSelect.shrink\")",
                    "<user.select> (more|this)": "user.vscode(\"editor.action.smartSelect.expand\")",
                    "reload window": "user.vscode(\"workbench.action.reloadWindow\")",
                    "close window": "user.vscode(\"workbench.action.closeWindow\")",
                    "breed skip": "user.vscode(\"editor.action.moveSelectionToNextFindMatch\")",
                    "run head notebook": "user.vscode(\"jupyter.runallcellsabove.palette\")",
                    "show in finder": "user.vscode(\"revealFileInOS\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "(pace | paste) that": "edit.paste()",
                    "(undo that | nope)": "edit.undo()",
                    "(redo that | yes indeed)": "edit.redo()",
                    "disk": "edit.save()",
                    "padding": "insert(\"  \")\nkey(left)",
                    "pour": "edit.line_insert_down()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "<user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "<user.format_text>": "user.insert_many(format_text_list)",
                    "<user.format_text> halt": "user.insert_many(format_text_list)",
                    "strict <user.format_text>": "user.insert_many(format_text_list)"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} scout <user.text>": "user.search_with_search_engine(search_engine, user.text)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "twice": "core.repeat_command(1)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "uppercase <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab make": "app.tab_open()",
                    "tab last": "app.tab_previous()",
                    "tab final": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "breed": "user.multi_cursor_select_more_occurrences()",
                    "breed all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "dubclick": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "(scroll | school) down": "user.mouse_scroll_down()",
                    "(scroll | school) down here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down()",
                    "(scroll | school) downer": "user.mouse_scroll_down_continuous()",
                    "(scroll | school) downer here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_down_continuous()",
                    "(scroll | school) up": "user.mouse_scroll_up()",
                    "(scroll | school) up here": "user.mouse_scroll_up()",
                    "(scroll | school) upper": "user.mouse_scroll_up_continuous()",
                    "(scroll | school) upper here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_up_continuous()",
                    "(scroll | school) gaze": "user.mouse_gaze_scroll()",
                    "(scroll | school) gaze here": "user.mouse_move_center_active_window()\nuser.mouse_gaze_scroll()",
                    "(scroll | school) stop": "user.mouse_scroll_stop()",
                    "(scroll | school) stop here": "user.mouse_move_center_active_window()\nuser.mouse_scroll_stop()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "pebbles": "\"...\"",
                    "spam": "\", \"",
                    "quad": "'\"\"'\nkey(left)",
                    "twin": "\"''\"\nkey(left)",
                    "escaped quad": "'\\\\\"\\\\\"'\nkey(left)\nkey(left)",
                    "escaped twin": "\"\\\\'\\\\'\"\nkey(left)\nkey(left)",
                    "round": "insert(\"()\")\nkey(left)",
                    "square": "insert(\"[]\")\nkey(left)",
                    "curly": "insert(\"{}\")\nkey(left)",
                    "(diamond | angle) that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(curly | lace) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(round | leper) that": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "(double | quad) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(single | twin) that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "<user.find> case": "user.find_toggle_match_by_case()",
                    "<user.find> word": "user.find_toggle_match_by_word()",
                    "<user.find> expression": "user.find_toggle_match_by_regex()",
                    "<user.find> next": "user.find_next()",
                    "<user.find> previous": "user.find_previous()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "dedent that": "edit.indent_less()",
                    "drag line down": "edit.line_swap_down()",
                    "drag line up": "edit.line_swap_up()",
                    "smear (line|that)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "tug": "edit.left()",
                    "drain": "edit.word_left()",
                    "push": "edit.right()",
                    "step": "edit.word_right()",
                    "head": "edit.line_start()",
                    "tail": "edit.line_end()",
                    "<user.select> lefter": "edit.extend_word_left()",
                    "<user.select> writer": "edit.extend_word_right()",
                    "take head": "edit.extend_line_start()",
                    "take tail": "edit.extend_line_end()",
                    "<user.delete> up": "edit.extend_line_up()\nedit.delete()",
                    "<user.delete> down": "edit.extend_line_down()\nedit.delete()",
                    "<user.delete> word": "edit.delete_word()",
                    "<user.delete> head": "edit.extend_line_start()\nedit.delete()",
                    "<user.delete> tail": "edit.extend_line_end()\nedit.delete()",
                    "<user.delete> way up": "edit.extend_file_start()\nedit.delete()",
                    "<user.delete> way down": "edit.extend_file_end()\nedit.delete()",
                    "<user.delete> all": "edit.select_all()\nedit.delete()",
                    "copy lefter": "edit.extend_word_left()\nedit.copy()",
                    "copy righter": "edit.extend_word_right()\nedit.copy()",
                    "cut lefter": "edit.extend_word_left()\nedit.cut()",
                    "cut righter": "edit.extend_word_right()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 324985035,
        "user_id": 18719098,
        "timestamp": "2022-04-05T19:45:58.628985",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 324636743,
        "user_id": 1121562,
        "timestamp": "2022-04-05T19:46:30.191820",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "arch": "a",
                    "brov": "b",
                    "chair": "c",
                    "dell": "d",
                    "etch": "e",
                    "fomp": "f",
                    "goof": "g",
                    "hark": "h",
                    "ice": "i",
                    "jinks": "j",
                    "koop": "k",
                    "lug": "l",
                    "mowsh": "m",
                    "nerb": "n",
                    "ork": "o",
                    "pooch": "p",
                    "quash": "q",
                    "rosh": "r",
                    "souk": "s",
                    "teek": "t",
                    "unks": "u",
                    "verge": "v",
                    "womp": "w",
                    "trex": "x",
                    "yang": "y",
                    "zooch": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "backspace": "backspace",
                    "delete key": "delete",
                    "spacebar": "space",
                    "tab key": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "single quote": "'",
                    "open bracket": "[",
                    "[": "[",
                    "lobe": "[",
                    "close bracket": "]",
                    "]": "]",
                    "robe": "]",
                    "leap": "(",
                    "reap": ")",
                    "open brace": "{",
                    "lake": "{",
                    "close brace": "}",
                    "rake": "}",
                    "L angle": "<",
                    "open angle": "<",
                    "luke": "<",
                    "close angle": ">",
                    "ruke": ">",
                    "semi": ";",
                    "?": "?",
                    "!": "!",
                    "#": "#",
                    "(": "(",
                    ")": ")",
                    "@": "@",
                    "coma": ",",
                    "come a": ",",
                    "buried": ".",
                    "corn": ":",
                    "open paren": "(",
                    "open brand": "(",
                    "close paren": ")",
                    "close brand": ")",
                    "hyphen": "-",
                    "high and": "-"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "?": "?",
                    "!": "!",
                    "#": "#",
                    "@": "@",
                    "coma": ",",
                    "come a": ",",
                    "buried": ".",
                    "corn": ":",
                    "slash": "/"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(go private | tab incognito)": "browser.open_private_window()",
                    "bookmark (it | save)": "browser.bookmark()",
                    "(refresh | reload) [it]": "browser.reload()",
                    "(refresh | reload) [it] hard": "browser.reload_hard()"
                }
            },
            {
                "file": "apps/generic_snippets/generic_snippets.talon",
                "context": "generic snippets",
                "commands": {
                    "(snip | plate) {user.snippets}": "user.snippet_insert(user.snippets)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git diff | diff open": "user.vscode(\"git.openChange\")"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split window | buff split": "user.split_window()",
                    "split clear all | buff focus": "user.split_clear_all()",
                    "split (last | preev)": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "screen up": "edit.page_up()",
                    "screen down": "edit.page_down()",
                    "undo [that]": "edit.undo()",
                    "redo [that]": "edit.redo()",
                    "paste (match | raw)": "edit.paste_match_style()",
                    "[file] save": "edit.save()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "(window | win) (new|open)": "app.window_open()",
                    "(window | win) next": "app.window_next()",
                    "(window | win) last": "app.window_previous()",
                    "(window | win) close": "app.window_close()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "(volume | media) (mute | unmute)": "key(mute)",
                    "[media] play next | track next": "key(next)",
                    "[media] play previous | track preev": "key(prev)",
                    "(media | track) (play | pause)": "user.play_pause()"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "{user.search_engine} hunt (that|this)": "text = edit.selected_text()\nuser.search_with_search_engine(search_engine, text)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "(ship | uppercase | upper) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | previous | left)": "app.tab_previous()",
                    "tab (next | right)": "app.tab_next()",
                    "go tab (final | last)": "user.tab_final()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "here [left] touch": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "here right touch": "mouse_click(1)\nuser.grid_close()",
                    "here middle touch": "mouse_click(2)\nuser.grid_close()",
                    "here <user.modifiers> touch": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "here <user.modifiers> right touch": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "here double touch": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "here triple touch": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()",
                    "here [left] drag": "user.mouse_drag(0)\nuser.grid_close()",
                    "here right drag": "user.mouse_drag(1)\nuser.grid_close()",
                    "end drag": "user.mouse_drag_end()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "(no-caps | no caps)": "user.dictation_format_no_cap()",
                    "(no-space | no space)": "user.dictation_format_no_space()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "dub arrow | fat arrow": "\"=>\"",
                    "(square | bracket) that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "brace that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "single quote that": "text = edit.selected_text()\nuser.paste(\"'{text}'\")",
                    "(quote | dubquote) that": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "(hunt | match) next": "user.find_next()",
                    "(hunt | match) (previous | preev | last)": "user.find_previous()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "go <number> | line <number> long": "edit.jump_line(number)",
                    "drag [line] down | (this | line) move down": "edit.line_swap_down()",
                    "drag [line] up | (this | line) move up": "edit.line_swap_up()",
                    "clone (line|that) | (this | line) copy down": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "find [it]": "edit.find()",
                    "go word left | before": "edit.word_left()",
                    "go word right | after": "edit.word_right()",
                    "left": "edit.left()",
                    "right": "edit.right()",
                    "up": "edit.up()",
                    "down": "edit.down()",
                    "[go line] start": "edit.line_start()",
                    "go way left | [go] west": "edit.line_start()\nedit.line_start()",
                    "go way right | [go] east": "edit.line_end()",
                    "go way down | [go] south": "edit.file_end()",
                    "go way up | [go] north": "edit.file_start()",
                    "select line | line select": "edit.select_line()",
                    "select all | all select": "edit.select_all()",
                    "select left | lefts": "edit.extend_left()",
                    "select right | rights": "edit.extend_right()",
                    "select word left | befores": "edit.extend_word_left()",
                    "select word right | afters": "edit.extend_word_right()",
                    "(indent less | out dent | dedent)": "edit.indent_less()",
                    "clear line | line clear": "edit.delete_line()",
                    "clear left | lefts delete": "key(backspace)",
                    "clear right | rights delete": "key(delete)",
                    "clear word left | befores delete": "edit.extend_word_left()\nedit.delete()",
                    "clear word right | afters delete": "edit.extend_word_right()\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 324501008,
        "user_id": 22695960,
        "timestamp": "2022-04-05T19:47:02.048971",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 323120515,
        "user_id": 6768125,
        "timestamp": "2022-04-05T19:47:33.414591",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 322675255,
        "user_id": 85699,
        "timestamp": "2022-04-05T19:48:04.631345",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 322622132,
        "user_id": 655662,
        "timestamp": "2022-04-05T19:48:35.820432",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 321896045,
        "user_id": 11382032,
        "timestamp": "2022-04-05T19:49:12.104426",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 321422815,
        "user_id": 1341513,
        "timestamp": "2022-04-05T19:49:43.589334",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 321420075,
        "user_id": 1522755,
        "timestamp": "2022-04-05T19:50:14.755701",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 321317204,
        "user_id": 26982377,
        "timestamp": "2022-04-05T19:50:47.971820",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "alpha": "a",
                    "delta": "d"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 320949729,
        "user_id": 75915115,
        "timestamp": "2022-04-05T19:51:19.316127",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 320418113,
        "user_id": 4473327,
        "timestamp": "2022-04-05T19:51:52.801666",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 319504484,
        "user_id": 6190142,
        "timestamp": "2022-04-05T19:52:24.000640",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 319409784,
        "user_id": 5891146,
        "timestamp": "2022-04-05T19:52:55.282358",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "splitter": "user.split_next()",
                    "splittle": "user.split_last()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "pre struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside backticks": "insert(\"``\")\nkey(left)",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside single quotes": "insert(\"''\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "bar source control": "user.vscode(\"workbench.scm.focus\")",
                    "terminal focus": "user.vscode(\"workbench.action.terminal.focus\")",
                    "file absolute path": "user.vscode(\"copyFilePath\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "line join": "user.vscode(\"editor.action.joinLines\")"
                }
            }
        ]
    },
    {
        "repo_id": 319306558,
        "user_id": 20419551,
        "timestamp": "2022-04-05T19:53:26.503742",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 318240280,
        "user_id": 1012322,
        "timestamp": "2022-04-05T19:53:57.755273",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 317919444,
        "user_id": 74801510,
        "timestamp": "2022-04-05T19:54:33.008214",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 317186209,
        "user_id": 48803018,
        "timestamp": "2022-04-05T19:55:04.468385",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 315437621,
        "user_id": 540820,
        "timestamp": "2022-04-05T19:55:35.803056",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 314792396,
        "user_id": 35661160,
        "timestamp": "2022-04-05T19:56:07.022154",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 314618668,
        "user_id": 1500330,
        "timestamp": "2022-04-05T19:56:38.336706",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 313348019,
        "user_id": 30940553,
        "timestamp": "2022-04-05T19:57:09.705218",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 313148859,
        "user_id": 13286932,
        "timestamp": "2022-04-05T19:57:44.956207",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 312427481,
        "user_id": 6810733,
        "timestamp": "2022-04-05T19:58:16.187743",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 312376602,
        "user_id": 68613162,
        "timestamp": "2022-04-05T19:58:49.381058",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 312078495,
        "user_id": 6209894,
        "timestamp": "2022-04-05T19:59:20.588740",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311843534,
        "user_id": 2889740,
        "timestamp": "2022-04-05T19:59:51.831762",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311713270,
        "user_id": 5415776,
        "timestamp": "2022-04-05T20:00:23.086380",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311626284,
        "user_id": 17849478,
        "timestamp": "2022-04-05T20:00:54.555163",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 311509912,
        "user_id": 34281919,
        "timestamp": "2022-04-05T20:01:25.759610",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 310973410,
        "user_id": 9855832,
        "timestamp": "2022-04-05T20:01:57.177605",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "go for[ward]": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "comm pal [<user.text>]": "user.vscode(\"workbench.action.showCommands\")\ninsert(user.text or \"\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "undo": "edit.undo()",
                    "oops": "edit.undo()",
                    "redo": "edit.redo()",
                    "[file] save": "edit.save()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "<user.modifiers> (chip left | chiple)": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "<user.modifiers> (chip right | chipper)": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "dub chiple": "mouse_click()\nmouse_click()\nuser.grid_close()",
                    "chipper": "mouse_click(1)\nuser.grid_close()",
                    "trip chiple": "mouse_click()\nmouse_click()\nmouse_click()\nuser.grid_close()"
                }
            },
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(triple grave | triple bee tick | gravy)": "insert(\"```\")",
                    "(comma and | comm ace)": "\", \""
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "search": "edit.find()",
                    "netch": "edit.find_next()",
                    "(go word left | skip left)": "edit.word_left()",
                    "(go word right | skip right)": "edit.word_right()",
                    "[go] way left": "edit.line_start()\nedit.line_start()",
                    "[go] way right": "edit.line_end()",
                    "[go] way down": "edit.file_end()",
                    "[go] way up": "edit.file_start()",
                    "[go] line start": "edit.line_start()",
                    "[go] line end": "edit.line_end()",
                    "[go] page down": "edit.page_down()",
                    "[go] page up": "edit.page_up()",
                    "(select word left | ex left)": "edit.extend_word_left()",
                    "(select word right | ex right)": "edit.extend_word_right()",
                    "(select way left | ex way left)": "edit.extend_line_start()",
                    "(select way right | ex way right)": "edit.extend_line_end()",
                    "(select up | ex up)": "edit.extend_line_up()",
                    "(select down | ex down)": "edit.extend_line_down()",
                    "(select way up | ex way up)": "edit.extend_file_start()",
                    "(select way down | ex way down)": "edit.extend_file_end()"
                }
            }
        ]
    },
    {
        "repo_id": 310146072,
        "user_id": 12578541,
        "timestamp": "2022-04-05T20:02:31.507480",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 309754915,
        "user_id": 11227560,
        "timestamp": "2022-04-05T20:03:04.475110",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 309503136,
        "user_id": 11822551,
        "timestamp": "2022-04-05T20:03:35.727815",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 308764186,
        "user_id": 2544,
        "timestamp": "2022-04-05T20:04:06.995036",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 308749794,
        "user_id": 391217,
        "timestamp": "2022-04-05T20:04:38.305244",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 308575021,
        "user_id": 245131,
        "timestamp": "2022-04-05T20:05:11.559778",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 308389307,
        "user_id": 16633957,
        "timestamp": "2022-04-05T20:05:42.827921",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 308354451,
        "user_id": 7370305,
        "timestamp": "2022-04-05T20:06:14.372050",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 308083280,
        "user_id": 6002123,
        "timestamp": "2022-04-05T20:06:45.592964",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 308037068,
        "user_id": 784395,
        "timestamp": "2022-04-05T20:07:16.785490",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "whack": "\\",
                    "quack": "\\",
                    "curly": "{",
                    "left curly": "{",
                    "R curly": "}",
                    "right curly": "}",
                    "question": "?",
                    "exclamation": "!"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "dot": ".",
                    "question": "?",
                    "exclamation": "!",
                    "bang": "!"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "git branch delete": "\"git branch -d \"",
                    "git push up origin": "\"git push -u origin\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/linux/tmux.talon",
                "context": "linux tmux",
                "commands": {
                    "muck": "\"tmux \"",
                    "muck session new": "insert('tmux new ')",
                    "muck kill session": "insert('tmux kill-session -t ')"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> cares": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> cares": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> cares": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> cares": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "spell <user.letters>": "auto_insert(letters)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(inside (squares | list) | squares)": "insert(\"[]\")\nkey(left)",
                    "(inside (bracket | braces | curlies) | curlies)": "insert(\"{}\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "go far left": "edit.line_start()\nedit.line_start()",
                    "go far right": "edit.line_end()",
                    "go far down": "edit.file_end()",
                    "go far up": "edit.file_start()",
                    "select far left": "edit.extend_line_start()",
                    "select far right": "edit.extend_line_end()",
                    "select far up": "edit.extend_file_start()",
                    "select far down": "edit.extend_file_end()",
                    "clear far left": "edit.extend_line_start()\nedit.delete()",
                    "clear far right": "edit.extend_line_end()\nedit.delete()",
                    "clear far up": "edit.extend_file_start()\nedit.delete()",
                    "clear far down": "edit.extend_file_end()\nedit.delete()",
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 307748026,
        "user_id": 46014,
        "timestamp": "2022-04-05T20:07:48.224571",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 307733438,
        "user_id": 18484366,
        "timestamp": "2022-04-05T20:08:19.416775",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "ivy": "i",
                    "mad": "m"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "spacing": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";",
                    "single quote": "'",
                    "sinquoute": "'"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "limit up": "\"=>\"",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 307679339,
        "user_id": 6322017,
        "timestamp": "2022-04-05T20:08:54.303303",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 307591368,
        "user_id": 22757756,
        "timestamp": "2022-04-05T20:09:26.132204",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 307220480,
        "user_id": 1487851,
        "timestamp": "2022-04-05T20:09:57.798280",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 307148350,
        "user_id": 24275520,
        "timestamp": "2022-04-05T20:10:29.118176",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 307030698,
        "user_id": 9410259,
        "timestamp": "2022-04-05T20:11:00.633141",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306999501,
        "user_id": 659425,
        "timestamp": "2022-04-05T20:11:32.133628",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306875261,
        "user_id": 70815886,
        "timestamp": "2022-04-05T20:12:03.269187",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306503417,
        "user_id": 3289356,
        "timestamp": "2022-04-05T20:12:34.390966",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306438270,
        "user_id": 1071954,
        "timestamp": "2022-04-05T20:13:05.689846",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306233873,
        "user_id": 102322,
        "timestamp": "2022-04-05T20:13:37.481359",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306149514,
        "user_id": 422351,
        "timestamp": "2022-04-05T20:14:08.757113",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "alpha": "a",
                    "bravo": "b",
                    "charlie": "c",
                    "delta": "d",
                    "echo": "e",
                    "foxtrot": "f",
                    "golf": "g",
                    "hotel": "h",
                    "india": "i",
                    "july": "j",
                    "killroy": "k",
                    "lima": "l",
                    "mike": "m",
                    "novel": "n",
                    "oscar": "o",
                    "papa": "p",
                    "quebec": "q",
                    "romeo": "r",
                    "sierra": "s",
                    "tango": "t",
                    "uniform": "u",
                    "victor": "v",
                    "whiskey": "w",
                    "yankee": "y",
                    "zulu": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace",
                    "shit": "backspace",
                    "dent": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "(cap | ship | uppercase) <user.letters> [(lowercase | sunk)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "(select | grab) less": "user.vscode(\"editor.action.smartSelect.shrink\")",
                    "(select | grab) that": "user.vscode(\"editor.action.smartSelect.expand\")"
                }
            }
        ]
    },
    {
        "repo_id": 306119531,
        "user_id": 9026786,
        "timestamp": "2022-04-05T20:14:40.020622",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 306032778,
        "user_id": 8534723,
        "timestamp": "2022-04-05T20:15:11.190845",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 305172709,
        "user_id": 63643181,
        "timestamp": "2022-04-05T20:15:42.420994",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 304761759,
        "user_id": 19195374,
        "timestamp": "2022-04-05T20:16:13.593343",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 304177733,
        "user_id": 17128644,
        "timestamp": "2022-04-05T20:16:44.917186",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "sad": "s"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "meta": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "single quote": "'",
                    "lester": "[",
                    "close square": "]",
                    "fester": "]",
                    "close paren": ")",
                    "close brace": "}",
                    "close angle": ">",
                    "tick": "`"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.arrow_key",
                "commands": {
                    "lef": "left"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "tick": "`"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy (that | this)": "edit.copy()",
                    "cut (that | this)": "edit.cut()",
                    "paste (that | this)": "edit.paste()",
                    "undo (that | this)": "edit.undo()",
                    "redo (that | this)": "edit.redo()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside parens": "insert(\"()\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "(draw|go word left)": "edit.word_left()",
                    "(spring|go word right)": "edit.word_right()",
                    "go (lef|left)": "edit.left()",
                    "go (wry|right)": "edit.right()",
                    "go upper": "edit.up()",
                    "go way upper": "edit.file_start()",
                    "go page upper": "edit.page_up()",
                    "select upper": "edit.extend_line_up()",
                    "select way upper": "edit.extend_file_start()",
                    "(killer|kill line)": "edit.delete_line()",
                    "kill upper": "edit.extend_line_up()\nedit.delete()",
                    "kill down": "edit.extend_line_down()\nedit.delete()",
                    "(scratch|kill (lef|left))": "edit.extend_word_left()\nedit.delete()",
                    "(swallow|kill (wry|right))": "edit.extend_word_right()\nedit.delete()",
                    "kill way left": "edit.extend_line_start()\nedit.delete()",
                    "kill way right": "edit.extend_line_end()\nedit.delete()",
                    "kill way upper": "edit.extend_file_start()\nedit.delete()",
                    "kill way down": "edit.extend_file_end()\nedit.delete()"
                }
            }
        ]
    },
    {
        "repo_id": 303216638,
        "user_id": 97816,
        "timestamp": "2022-04-05T20:17:17.648667",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 303114508,
        "user_id": 10352319,
        "timestamp": "2022-04-05T20:17:49.070834",
        "branch": "jp",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "mando": "cmd",
                    "troll": "ctrl"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "backspace": "backspace",
                    "junk": "backspace",
                    "ending": "end"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "right pra": ")",
                    "tick": "`",
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "tick": "`",
                    "semi": ";"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "mouse control": "user.mouse_toggle_control_mouse()",
                    "mouse zoom": "user.mouse_toggle_zoom_mouse()",
                    "mouse calibrate": "user.mouse_calibrate()",
                    "right click": "mouse_click(1)\nuser.grid_close()",
                    "<user.modifiers> right click": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(rbrack | are bracket | right bracket | racket)": "\"}\"",
                    "fat arrow": "\"=>\"",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "(grave | [back] tick) that": "text = edit.selected_text()\nuser.paste('`{text}`')"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/platforms/linux/signal.talon",
                "context": "linux signal",
                "commands": {
                    "reply it": "key(\"ctrl-shift-r\")",
                    "react it": "key(\"ctrl-shift-e\")",
                    "delete it": "key(\"ctrl-shift-d\")"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/slack/slack_mac.talon",
                "context": "slack mac",
                "commands": {
                    "go back": "key(cmd-[)",
                    "go forward": "key(cmd-])"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 302971998,
        "user_id": 18706229,
        "timestamp": "2022-04-05T20:18:22.057204",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 302752929,
        "user_id": 6108994,
        "timestamp": "2022-04-05T20:18:53.254290",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 301890435,
        "user_id": 54477607,
        "timestamp": "2022-04-05T20:19:24.499142",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 301744386,
        "user_id": 9698054,
        "timestamp": "2022-04-05T20:19:55.934557",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 301436880,
        "user_id": 8015081,
        "timestamp": "2022-04-05T20:20:27.046635",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 301019806,
        "user_id": 21976313,
        "timestamp": "2022-04-05T20:20:58.290151",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "gone": "g",
                    "johnny": "j",
                    "mad": "m",
                    "wet": "w",
                    "zeta": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "scatter": "escape",
                    "junk": "backspace",
                    "skunks": "enter"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";",
                    "cola": ":",
                    "crunder": "\""
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat twice": "core.repeat_command(1)",
                    "repeat <number_small> [times]": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "lang/rust.talon",
                "context": "rust",
                "commands": {
                    "ref": "\"&\"",
                    "ref mute": "\"&mut \"",
                    "word pub": "\"pub \"",
                    "word impul": "\"impl \"",
                    "state fun": "\"fn \"",
                    "state impul": "\"impl \""
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()",
                    "(refresh | reload)": "browser.reload()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(dub arrow|implies)": "\"=>\"",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 299424853,
        "user_id": 45152129,
        "timestamp": "2022-04-05T20:21:29.593862",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 298661264,
        "user_id": 72190,
        "timestamp": "2022-04-05T20:22:00.740172",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 298547874,
        "user_id": 40725916,
        "timestamp": "2022-04-05T20:22:32.727430",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 298526245,
        "user_id": 6624600,
        "timestamp": "2022-04-05T20:23:04.039765",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 298450871,
        "user_id": 18283966,
        "timestamp": "2022-04-05T20:23:35.472635",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 298385753,
        "user_id": 733785,
        "timestamp": "2022-04-05T20:24:06.695182",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 297013216,
        "user_id": 3668899,
        "timestamp": "2022-04-05T20:24:37.918616",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "comment line <number>": "user.select_range(number, number)\ncode.toggle_comment()",
                    "clear line <number>": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "copy line <number>": "user.select_range(number, number)",
                    "cut line <number>": "user.select_range(number, number)\nedit.cut()",
                    "cut <number> until <number>": "user.select_range(number_1, number_2)\nedit.cut()",
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "select line <number>": "user.select_range(number, number)",
                    "select <number> until <number>": "user.select_range(number_1, number_2)",
                    "indent <number>": "edit.jump_line(number)\nedit.indent_more()",
                    "indent <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_more()",
                    "unindent line <number>": "user.select_range(number, number)\nedit.indent_less()",
                    "unindent <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_less()",
                    "drag up <number>": "user.select_range(number, number)\nedit.line_swap_up()",
                    "drag down <number>": "user.select_range(number, number)\nedit.line_swap_down()",
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 296901070,
        "user_id": 71561126,
        "timestamp": "2022-04-05T20:25:09.080985",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "comment line <number>": "user.select_range(number, number)\ncode.toggle_comment()",
                    "clear line <number>": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "copy line <number>": "user.select_range(number, number)",
                    "cut line <number>": "user.select_range(number, number)\nedit.cut()",
                    "cut <number> until <number>": "user.select_range(number_1, number_2)\nedit.cut()",
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "select line <number>": "user.select_range(number, number)",
                    "select <number> until <number>": "user.select_range(number_1, number_2)",
                    "indent <number>": "edit.jump_line(number)\nedit.indent_more()",
                    "indent <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_more()",
                    "unindent line <number>": "user.select_range(number, number)\nedit.indent_less()",
                    "unindent <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_less()",
                    "drag up <number>": "user.select_range(number, number)\nedit.line_swap_up()",
                    "drag down <number>": "user.select_range(number, number)\nedit.line_swap_down()",
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 296835864,
        "user_id": 167771,
        "timestamp": "2022-04-05T20:25:40.603697",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "triple dot": "\"...\"",
                    "fat arrow": "\"=>\""
                }
            }
        ]
    },
    {
        "repo_id": 296696991,
        "user_id": 29872150,
        "timestamp": "2022-04-05T20:26:12.018263",
        "branch": "master",
        "command_groups": [
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 295226049,
        "user_id": 102321,
        "timestamp": "2022-04-05T20:26:43.201814",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 293404684,
        "user_id": 54991041,
        "timestamp": "2022-04-05T20:27:14.693656",
        "branch": "master",
        "command_groups": []
    },
    {
        "repo_id": 291340252,
        "user_id": 9662927,
        "timestamp": "2022-04-05T20:27:46.051278",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "running hide": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "comment line <number>": "user.select_range(number, number)\ncode.toggle_comment()",
                    "clear line <number>": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "copy line <number>": "user.select_range(number, number)",
                    "cut line <number>": "user.select_range(number, number)\nedit.cut()",
                    "cut <number> until <number>": "user.select_range(number_1, number_2)\nedit.cut()",
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "select line <number>": "user.select_range(number, number)",
                    "select <number> until <number>": "user.select_range(number_1, number_2)",
                    "indent <number>": "edit.jump_line(number)\nedit.indent_more()",
                    "indent <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_more()",
                    "unindent line <number>": "user.select_range(number, number)\nedit.indent_less()",
                    "unindent <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_less()",
                    "drag up <number>": "user.select_range(number, number)\nedit.line_swap_up()",
                    "drag down <number>": "user.select_range(number, number)\nedit.line_swap_down()",
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 291175756,
        "user_id": 69595,
        "timestamp": "2022-04-05T20:28:17.538895",
        "branch": "main",
        "command_groups": [
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 290739994,
        "user_id": 1415856,
        "timestamp": "2022-04-05T20:28:50.857819",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 289439496,
        "user_id": 1733493,
        "timestamp": "2022-04-05T20:29:22.351368",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "own": "o",
                    "yell": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "delete",
                    "pop": "tab"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "/": "/",
                    "@": "@"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "pasta": "edit.paste()"
                }
            },
            {
                "file": "modes/modes.talon",
                "context": "modes",
                "commands": {
                    "Kommando modus": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "dubarrow": "\"=>\""
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            }
        ]
    },
    {
        "repo_id": 289389044,
        "user_id": 86104,
        "timestamp": "2022-04-05T20:29:53.581898",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 289305379,
        "user_id": 56042962,
        "timestamp": "2022-04-05T20:30:24.762047",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "bork": "b",
                    "jam": "j",
                    "carrot": "k",
                    "well": "w",
                    "yord": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "undo": "edit.undo()",
                    "delete": "key(backspace)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "running hide": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "command history hide": "user.history_disable()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(dot dot | dotdot | double dot)": "\"..\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "copy [line] down": "user.vscode(\"editor.action.copyLinesDownAction\")",
                    "copy [line] up": "user.vscode(\"editor.action.copyLinesUpAction\")"
                }
            }
        ]
    },
    {
        "repo_id": 288951773,
        "user_id": 1822656,
        "timestamp": "2022-04-05T20:30:56.110257",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace",
                    "shock": "enter"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "(snap | split) right": "user.split_window_right()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "(file save | save it | save that)": "edit.save()",
                    "junk": "key(backspace)",
                    "(undo that | dizzle)": "edit.undo()",
                    "(redo that | rizzle)": "edit.redo()"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "(git|jet) add patch": "\"git add . -p\\n\"",
                    "(git|jet) add": "\"git add \"",
                    "(git|jet) add everything": "\"git add -u\\n\"",
                    "(git|jet) bisect": "\"git bisect \"",
                    "(git|jet) branch": "\"git branch \"",
                    "(git|jet) branch <user.text>": "\"git branch {text}\"",
                    "(git|jet) checkout": "\"git checkout \"",
                    "(git|jet) checkout master": "\"git checkout master\\n\"",
                    "(git|jet) checkout <user.text>": "\"git checkout {text}\"",
                    "(git|jet) cherry pick": "\"git cherry-pick \"",
                    "(git|jet) clone": "\"git clone \"",
                    "(git|jet) commit message <user.text>": "\"git commit -m '{text}'\"",
                    "(git|jet) commit": "\"git commit\\n\"",
                    "(git|jet) diff (colour|color) words": "\"git diff --color-words \"",
                    "(git|jet) diff": "\"git diff \"",
                    "(git|jet) diff cached": "\"git diff --cached\\n\"",
                    "(git|jet) fetch": "\"git fetch\\n\"",
                    "(git|jet) fetch <user.text>": "\"git fetch {text}\"",
                    "(git|jet) in it": "\"git init\\n\"",
                    "(git|jet) log all": "\"git log\\n\"",
                    "(git|jet) log all changes": "\"git log -c\\n\"",
                    "(git|jet) log": "\"git log \"",
                    "(git|jet) log changes": "\"git log -c \"",
                    "(git|jet) merge": "\"git merge \"",
                    "(git|jet) merge <user.text>": "\"git merge {text}\"",
                    "(git|jet) move": "\"git mv \"",
                    "(git|jet) pull": "\"git pull\\n\"",
                    "(git|jet) pull origin": "\"git pull origin \"",
                    "(git|jet) pull rebase": "\"git pull --rebase\\n\"",
                    "(git|jet) pull fast forward": "\"git pull --ff-only\\n\"",
                    "(git|jet) pull <user.text>": "\"git pull {text} \"",
                    "(git|jet) push": "\"git push\\n\"",
                    "(git|jet) push origin": "\"git push origin \"",
                    "(git|jet) push up stream origin": "\"git push -u origin\"",
                    "(git|jet) push <user.text>": "\"git push {text} \"",
                    "(git|jet) push tags": "\"git push --tags\\n\"",
                    "(git|jet) rebase continue": "\"git rebase --continue\"",
                    "(git|jet) rebase skip": "\"git rebase --skip\"",
                    "(git|jet) remove": "\"git rm \"",
                    "(git|jet) (remove|delete) branch": "\"git branch -d \"",
                    "(git|jet) reset": "\"git reset \"",
                    "(git|jet) reset soft": "\"git reset --soft \"",
                    "(git|jet) reset hard": "\"git reset --hard \"",
                    "(git|jet) restore": "\"git restore \"",
                    "(git|jet) restore staged": "\"git restore --staged \"",
                    "(git|jet) remote show origin": "\"git remote show origin\\n\"",
                    "(git|jet) remote add upstream": "\"git remote add upstream \"",
                    "(git|jet) show": "\"git show \"",
                    "(git|jet) stash pop": "\"git stash pop\\n\"",
                    "(git|jet) stash": "\"git stash\\n\"",
                    "(git|jet) stash apply": "\"git stash apply\\n\"",
                    "(git|jet) stash list": "\"git stash list\\n\"",
                    "(git|jet) stash show": "\"git stash show\"",
                    "(git|jet) status": "\"git status\\n\"",
                    "(git|jet) submodule add": "\"git submodule add \"",
                    "(git|jet) tag": "\"git tag \""
                }
            },
            {
                "file": "misc/screenshot.talon",
                "context": "screenshot",
                "commands": {
                    "(grab screenshot | ^grab selection$)": "user.screenshot_selection()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "<user.modifiers> (touch|click)": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "( bar search | search tab)": "user.vscode(\"workbench.view.search\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(question [mark] | questo)": "\"?\"",
                    "(downscore | underscore | crunder)": "\"_\"",
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 286056922,
        "user_id": 63370027,
        "timestamp": "2022-04-05T20:31:27.184462",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "copy [line] down": "user.vscode(\"editor.action.copyLinesDownAction\")",
                    "copy [line] up": "user.vscode(\"editor.action.copyLinesUpAction\")"
                }
            }
        ]
    },
    {
        "repo_id": 285632515,
        "user_id": 16143,
        "timestamp": "2022-04-05T20:32:06.395539",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 284771656,
        "user_id": 60350599,
        "timestamp": "2022-04-05T20:32:37.519726",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 284344389,
        "user_id": 6225521,
        "timestamp": "2022-04-05T20:33:08.555940",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()",
                    "clear split": "user.split_clear()",
                    "clear all splits": "user.split_clear_all()",
                    "go next split": "user.split_next()",
                    "go last split": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "multiple cursor": "user.multi_cursor_enable()",
                    "(end|stop) multiple cursor": "user.multi_cursor_disable()",
                    "multi select up": "user.multi_cursor_add_above()",
                    "multi select down": "user.multi_cursor_add_below()",
                    "multi select fewer": "user.multi_cursor_select_fewer_occurrences()",
                    "multi select more": "user.multi_cursor_select_more_occurrences()",
                    "multi select all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 284233518,
        "user_id": 37806340,
        "timestamp": "2022-04-05T20:33:39.731604",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "etch": "e",
                    "ice": "i",
                    "jinks": "j",
                    "teek": "t",
                    "zed": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()",
                    "clear split": "user.split_clear()",
                    "clear all splits": "user.split_clear_all()",
                    "go next split": "user.split_next()",
                    "go last split": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "multiple cursor": "user.multi_cursor_enable()",
                    "(end|stop) multiple cursor": "user.multi_cursor_disable()",
                    "multi select up": "user.multi_cursor_add_above()",
                    "multi select down": "user.multi_cursor_add_below()",
                    "multi select fewer": "user.multi_cursor_select_fewer_occurrences()",
                    "multi select more": "user.multi_cursor_select_more_occurrences()",
                    "multi select all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 284073479,
        "user_id": 62727053,
        "timestamp": "2022-04-05T20:34:10.852942",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()",
                    "clear split": "user.split_clear()",
                    "clear all splits": "user.split_clear_all()",
                    "go next split": "user.split_next()",
                    "go last split": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "multiple cursor": "user.multi_cursor_enable()",
                    "(end|stop) multiple cursor": "user.multi_cursor_disable()",
                    "multi select up": "user.multi_cursor_add_above()",
                    "multi select down": "user.multi_cursor_add_below()",
                    "multi select fewer": "user.multi_cursor_select_fewer_occurrences()",
                    "multi select more": "user.multi_cursor_select_more_occurrences()",
                    "multi select all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "lart": "edit.line_start()",
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 282429782,
        "user_id": 26546453,
        "timestamp": "2022-04-05T20:34:42.044488",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()",
                    "clear split": "user.split_clear()",
                    "clear all splits": "user.split_clear_all()",
                    "go next split": "user.split_next()",
                    "go last split": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "misc/multiple_cursors.talon",
                "context": "multiple cursors",
                "commands": {
                    "multiple cursor": "user.multi_cursor_enable()",
                    "(end|stop) multiple cursor": "user.multi_cursor_disable()",
                    "multi select up": "user.multi_cursor_add_above()",
                    "multi select down": "user.multi_cursor_add_below()",
                    "multi select fewer": "user.multi_cursor_select_fewer_occurrences()",
                    "multi select more": "user.multi_cursor_select_more_occurrences()",
                    "multi select all": "user.multi_cursor_select_all_occurrences()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/outlook.talon",
                "context": "outlook",
                "commands": {
                    "open [the] next item": "key(ctrl-.)",
                    "open [the] (prev|previous) item": "key(ctrl-,)",
                    "next item [in] [the] [reading] [pane]": "key(.)",
                    "(prev|previous) item [in] [the] [reading] [pane]": "key(,)",
                    "mark [this] message [as] read": "key(q)",
                    "mark [this] message [as] unread": "key(u)",
                    "flag [this] message": "key(insert)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 282317502,
        "user_id": 68303,
        "timestamp": "2022-04-05T20:35:15.558692",
        "branch": "nriley",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "zoo": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "cmd",
                    "troll": "ctrl",
                    "win": "super",
                    "man": "cmd"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace",
                    "wipe": "backspace",
                    "white": "backspace",
                    "eat": "delete",
                    "return": "enter"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";",
                    "bracket": "[",
                    "left bracket": "[",
                    "open bracket": "[",
                    "right bracket": "]",
                    "close bracket": "]",
                    "hyphen": "-",
                    "open parenthesis": "(",
                    "close parenthesis": ")",
                    "open brace": "{",
                    "close brace": "}",
                    "race": "}",
                    "number": "#",
                    "come a": ",",
                    "open paren": "(",
                    "close paren": ")"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "come a": ",",
                    "slash": "/"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "location": "browser.focus_address()",
                    "copy location": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/platforms/win/outlook/outlook.talon",
                "context": "win outlook",
                "commands": {
                    "reply": "key(ctrl-r)",
                    "reply all": "key(ctrl-shift-r)"
                }
            },
            {
                "file": "apps/platforms/mac/finder/finder.talon",
                "context": "mac finder",
                "commands": {
                    "trash that": "key(cmd-backspace)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "go home": "user.file_manager_open_directory(path.user_home())",
                    "go parent": "user.file_manager_open_parent()",
                    "follow <number_small>": "directory = user.file_manager_get_directory_by_index(number_small - 1)\nuser.file_manager_open_directory(directory)",
                    "folder <number_small>": "directory = user.file_manager_get_directory_by_index(number_small - 1)\nuser.file_manager_select_directory(directory)",
                    "file <number_small>": "file = user.file_manager_get_file_by_index(number_small - 1)\nuser.file_manager_select_file(file)"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "copy (that | bat)": "edit.copy()",
                    "clear that": "key(backspace)",
                    "nope | ((i do | and do | undo) that)": "edit.undo()",
                    "(read do | redo) that": "edit.redo()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) {user.abbreviation} over": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "(ship | uppercase) <user.letters> [(lowercase | sunk | over)]": "user.insert_formatted(letters, \"ALL_CAPS\")"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "dock string | dock quote": "user.code_comment_documentation()"
                }
            },
            {
                "file": "text/text_navigation.talon",
                "context": "text navigation",
                "commands": {
                    "({user.navigation_action} [{user.arrow_key}] [{user.navigation_target_name}] [{user.before_or_after}] | [{user.arrow_key}] {user.before_or_after}) [<user.ordinals>] <user.navigation_target>": "user.navigation(navigation_action or \"GO\", arrow_key or \"RIGHT\", navigation_target_name or \"DEFAULT\", before_or_after or \"DEFAULT\", navigation_target, ordinals or 1)"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "<user.number_string> over": "\"{number_string}\""
                }
            },
            {
                "file": "text/find_and_replace.talon",
                "context": "find and replace",
                "commands": {
                    "go [after] last <user.text> [over]": "user.select_previous_occurrence(text)\nsleep(100ms)\nedit.right()",
                    "go [after] last clip": "user.select_previous_occurrence(clip.text())\nsleep(100ms)\nedit.right()",
                    "go [after] next <user.text> [over]": "user.select_next_occurrence(text)\nedit.right()",
                    "go [after] next clip": "user.select_next_occurrence(clip.text())\nedit.right()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "comment <number> through <number>": "user.select_range(number_1, number_2)\ncode.toggle_comment()",
                    "clear <number> through <number>": "user.select_range(number_1, number_2)\nedit.delete()",
                    "copy <number> through <number>": "user.select_range(number_1, number_2)\nedit.copy()",
                    "cut <number> through <number>": "user.select_range(number_1, number_2)\nedit.cut()",
                    "(paste | replace) <number> through <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "(select | cell | sell) <number> through <number>": "user.select_range(number_1, number_2)",
                    "move right": "edit.indent_more()",
                    "move right <number>": "edit.jump_line(number)\nedit.indent_more()",
                    "move right <number> through <number>": "user.select_range(number_1, number_2)\nedit.indent_more()",
                    "move left": "edit.indent_less()",
                    "move left <number>": "user.select_range(number, number)\nedit.indent_less()",
                    "move left <number> through <number>": "user.select_range(number_1, number_2)\nedit.indent_less()",
                    "move down": "edit.line_swap_down()",
                    "move up": "edit.line_swap_up()",
                    "move up <number>": "user.select_range(number, number)\nedit.line_swap_up()",
                    "move up <number> through <number>": "user.select_range(number_1, number_2)\nedit.line_swap_up()",
                    "move down <number>": "user.select_range(number, number)\nedit.line_swap_down()",
                    "move down <number> through <number>": "user.select_range(number_1, number_2)\nedit.line_swap_down()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "hunt this": "edit.find()",
                    "hunt next": "edit.find_next()",
                    "go (word (left | previous) | west)": "edit.word_left()",
                    "go (word (right | next) | east)": "edit.word_right()",
                    "head | go line start": "edit.line_start()",
                    "tail | go line end": "edit.line_end()",
                    "select [line] up": "edit.extend_line_up()",
                    "select [line] down": "edit.extend_line_down()",
                    "select (word (left | previous) | west)": "edit.extend_word_left()",
                    "select (word (right | next) | east)": "edit.extend_word_right()",
                    "clear (word (left | previous) | west)": "edit.extend_word_left()\nedit.delete()",
                    "clear (word (right | next) | east)": "edit.extend_word_right()\nedit.delete()",
                    "copy (word (left | previous) | west)": "edit.extend_word_left()\nedit.copy()",
                    "copy (word (right | next) | east)": "edit.extend_word_right()\nedit.copy()",
                    "cut (word (left | previous) | west)": "edit.extend_word_left()\nedit.cut()",
                    "cut (word (right | next) | east)": "edit.extend_word_right()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 281967447,
        "user_id": 6692932,
        "timestamp": "2022-04-05T20:35:46.741781",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()",
                    "clear split": "user.split_clear()",
                    "clear all splits": "user.split_clear_all()",
                    "go next split": "user.split_next()",
                    "go last split": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/outlook.talon",
                "context": "outlook",
                "commands": {
                    "open [the] next item": "key(ctrl-.)",
                    "open [the] (prev|previous) item": "key(ctrl-,)",
                    "next item [in] [the] [reading] [pane]": "key(.)",
                    "(prev|previous) item [in] [the] [reading] [pane]": "key(,)",
                    "mark [this] message [as] read": "key(q)",
                    "mark [this] message [as] unread": "key(u)",
                    "flag [this] message": "key(insert)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 281743457,
        "user_id": 29542,
        "timestamp": "2022-04-05T20:36:18.138270",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "(go split | bang) <number>": "user.split_number(number)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab (last | prev)": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()",
                    "[go] tab <number>": "user.tab_jump(number)"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "lang/python/python.talon",
                "context": "python",
                "commands": {
                    "self dot": "\"self.\""
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "comment line <number>": "user.select_range(number, number)\ncode.toggle_comment()",
                    "comment line <number> until <number>": "user.select_range(number_1, number_2)\ncode.toggle_comment()",
                    "(clear | snip) line <number>": "edit.jump_line(number)\nuser.select_range(number, number)\nedit.delete()",
                    "(clear | snip) <number> until <number>": "user.select_range(number_1, number_2)\nedit.delete()",
                    "copy line <number> until <number>": "user.select_range(number_1, number_2)\nedit.copy()",
                    "(cut | snip) line <number>": "user.select_range(number, number)\nedit.cut()",
                    "(cut | snip) line <number> until <number>": "user.select_range(number_1, number_2)\nedit.cut()",
                    "replace line <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "select line <number>": "user.select_range(number, number)",
                    "select line <number> until <number>": "user.select_range(number_1, number_2)",
                    "indent <number>": "edit.jump_line(number)\nedit.indent_more()",
                    "indent line <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_more()",
                    "unindent line <number> until <number>": "user.select_range(number_1, number_2)\nedit.indent_less()",
                    "drag up [line] <number> until <number>": "user.select_range(number_1, number_2)\nedit.line_swap_up()",
                    "drag down [line] <number> until <number>": "user.select_range(number_1, number_2)\nedit.line_swap_down()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "(refresh | reload) page": "browser.reload()",
                    "hard (refresh | reload) page": "browser.reload_hard()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/jetbrains/jetbrains.talon",
                "context": "jetbrains",
                "commands": {
                    "(find | marco) (everywhere | all)": "user.idea(\"action SearchEverywhere\")",
                    "(find | marco) (everywhere | all) <user.text> [over]": "user.idea(\"action SearchEverywhere\")\nsleep(500ms)\ninsert(text)",
                    "(search | find | marco) class": "user.idea(\"action GotoClass\")",
                    "(search | find | marco) file": "user.idea(\"action GotoFile\")",
                    "(search | find | marco) symbol": "user.idea(\"action GotoSymbol\")",
                    "(search | find | marco) symbol <user.text>": "user.idea(\"action GotoSymbol\")\ninsert(text)\nkey(\"enter\")",
                    "marco project": "user.idea(\"action FindInPath\")",
                    "cell expand": "user.idea(\"action EditorSelectWord\")",
                    "peach": "user.idea(\"action GotoFile\")"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 281230322,
        "user_id": 28070802,
        "timestamp": "2022-04-05T20:36:49.240105",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()",
                    "clear split": "user.split_clear()",
                    "clear all splits": "user.split_clear_all()",
                    "go next split": "user.split_next()",
                    "go last split": "user.split_last()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()",
                    "go final tab": "user.tab_final()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/outlook.talon",
                "context": "outlook",
                "commands": {
                    "open [the] next item": "key(ctrl-.)",
                    "open [the] (prev|previous) item": "key(ctrl-,)",
                    "next item [in] [the] [reading] [pane]": "key(.)",
                    "(prev|previous) item [in] [the] [reading] [pane]": "key(,)",
                    "mark [this] message [as] read": "key(q)",
                    "mark [this] message [as] unread": "key(u)",
                    "flag [this] message": "key(insert)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 280505492,
        "user_id": 47227280,
        "timestamp": "2022-04-05T20:37:20.386682",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "apps/web/outlook.talon",
                "context": "outlook",
                "commands": {
                    "open [the] next item": "key(ctrl-.)",
                    "open [the] (prev|previous) item": "key(ctrl-,)",
                    "next item [in] [the] [reading] [pane]": "key(.)",
                    "(prev|previous) item [in] [the] [reading] [pane]": "key(,)",
                    "mark [this] message [as] read": "key(q)",
                    "mark [this] message [as] unread": "key(u)",
                    "flag [this] message": "key(insert)"
                }
            }
        ]
    },
    {
        "repo_id": 280243668,
        "user_id": 9683693,
        "timestamp": "2022-04-05T20:37:51.920119",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "sky": "shift"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "git amend": "\"git commit --amend\\n\""
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "(our | are | R) bracket": "\"}\""
                }
            }
        ]
    },
    {
        "repo_id": 279141559,
        "user_id": 8095,
        "timestamp": "2022-04-05T20:38:22.984103",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 279110353,
        "user_id": 775602,
        "timestamp": "2022-04-05T20:38:54.008471",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "undo": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/outlook.talon",
                "context": "outlook",
                "commands": {
                    "open [the] next item": "key(ctrl-.)",
                    "open [the] (prev|previous) item": "key(ctrl-,)",
                    "next item [in] [the] [reading] [pane]": "key(.)",
                    "(prev|previous) item [in] [the] [reading] [pane]": "key(,)",
                    "mark [this] message [as] read": "key(q)",
                    "mark [this] message [as] unread": "key(u)",
                    "flag [this] message": "key(insert)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 274991887,
        "user_id": 21044858,
        "timestamp": "2022-04-05T20:39:25.526467",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 274039239,
        "user_id": 7183947,
        "timestamp": "2022-04-05T20:39:58.992185",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273909275,
        "user_id": 15688148,
        "timestamp": "2022-04-05T20:40:30.134349",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273639237,
        "user_id": 2071583,
        "timestamp": "2022-04-05T20:41:01.502250",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273622533,
        "user_id": 1237457,
        "timestamp": "2022-04-05T20:41:32.574125",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "nope that": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273488014,
        "user_id": 221395,
        "timestamp": "2022-04-05T20:42:03.677209",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 273104878,
        "user_id": 5633015,
        "timestamp": "2022-04-05T20:42:35.048372",
        "branch": "master",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 272800071,
        "user_id": 465955,
        "timestamp": "2022-04-05T20:49:26.726113",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 272680038,
        "user_id": 4499807,
        "timestamp": "2022-04-05T20:49:57.934322",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "fish": "v"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/splits.talon",
                "context": "splits",
                "commands": {
                    "split vertically": "user.split_window_vertically()",
                    "split horizontally": "user.split_window_horizontally()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy that | copying": "edit.copy()",
                    "cut that | cutting": "edit.cut()",
                    "paste that | pasty | basting | basty": "edit.paste()",
                    "paste match | (pasty basting | basty) match": "edit.paste_match_style()",
                    "file save | saving": "edit.save()",
                    "undo that | undoing": "edit.undo()",
                    "redo that | redoing": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "running hide": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "command history hide": "user.history_disable()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "(pick | sell | cell) <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "(pick | sell | cell) <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "clone (line|this)": "edit.line_clone()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "[go] word left": "edit.word_left()",
                    "[go] word right": "edit.word_right()",
                    "[go] left": "edit.left()",
                    "[go] right": "edit.right()",
                    "[go] up": "edit.up()",
                    "[go] down": "edit.down()",
                    "[go] line start": "edit.line_start()",
                    "[go] line end": "edit.line_end()",
                    "[go] way left": "edit.line_start()",
                    "[go] way right": "edit.line_end()",
                    "[go] way down": "edit.file_end()",
                    "[go] way up": "edit.file_start()",
                    "[go] page down": "edit.page_down()",
                    "[go] page up": "edit.page_up()",
                    "select|sect all": "edit.select_all()",
                    "select|sect left": "edit.extend_left()",
                    "select|sect right": "edit.extend_right()",
                    "select|sect up": "edit.extend_line_up()",
                    "select|sect down": "edit.extend_line_down()",
                    "select|sect word left": "edit.extend_word_left()",
                    "select|sect word right": "edit.extend_word_right()",
                    "select|sect way left": "edit.extend_line_start()",
                    "select|sect way right": "edit.extend_line_end()",
                    "select|sect way up": "edit.extend_file_start()",
                    "select|sect way down": "edit.extend_file_end()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "copy [line] down": "user.vscode(\"editor.action.copyLinesDownAction\")",
                    "copy [line] up": "user.vscode(\"editor.action.copyLinesUpAction\")"
                }
            }
        ]
    },
    {
        "repo_id": 272562044,
        "user_id": 14012083,
        "timestamp": "2022-04-05T20:50:29.169826",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "show properties": "user.file_manager_show_properties()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 272287700,
        "user_id": 3903883,
        "timestamp": "2022-04-05T20:51:00.215412",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "lang/talon.talon",
                "context": "talon",
                "commands": {
                    "<user.modifiers> key": "\"{modifiers}\""
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 271209156,
        "user_id": 44053,
        "timestamp": "2022-04-05T20:51:31.612251",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "space bar": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "power": "^"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "paste it": "edit.paste()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "<user.modifiers> touch|click": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 271034444,
        "user_id": 2762244,
        "timestamp": "2022-04-05T20:52:03.305275",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 269575712,
        "user_id": 3338723,
        "timestamp": "2022-04-05T20:52:37.539097",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "semi": ";"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(control mouse | mouse)": "user.mouse_toggle_control_mouse()"
                }
            },
            {
                "file": "modes/modes.talon",
                "context": "modes",
                "commands": {
                    "flute": "mode.disable(\"sleep\")\nmode.disable(\"command\")\nmode.enable(\"dictation\")\nuser.code_clear_language_mode()\nmode.disable(\"user.gdb\")",
                    "bell": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")",
                    "xylophone": "mode.disable(\"sleep\")\nmode.disable(\"dictation\")\nmode.enable(\"command\")"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)",
                    "angle this": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(bracket | brace) this": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "(parens | args) this": "text = edit.selected_text()\nuser.paste(\"({text})\")",
                    "percent this": "text = edit.selected_text()\nuser.paste(\"%{text}%\")",
                    "quote this": "text = edit.selected_text()\nuser.paste('\"{text}\"')"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go [to] address | go [to] url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "[show] dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 269255402,
        "user_id": 15963642,
        "timestamp": "2022-04-05T20:53:08.481731",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 269063117,
        "user_id": 30029456,
        "timestamp": "2022-04-05T20:53:39.886028",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 268822230,
        "user_id": 195691,
        "timestamp": "2022-04-05T20:54:11.390469",
        "branch": "master",
        "command_groups": [
            {
                "file": "lang/rust/rust.talon",
                "context": "rust",
                "commands": {
                    "state struct <user.text>": "insert(\"struct \")\ninsert(user.formatted_text(text, \"PUBLIC_CAMEL_CASE\"))",
                    "state pub": "\"pub \"",
                    "state pub crate": "\"pub(crate) \"",
                    "state dyn": "\"dyn \"",
                    "state imp": "\"impl \"",
                    "state mute": "\"mut \"",
                    "state ref mute": "\"ref mut \""
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            }
        ]
    },
    {
        "repo_id": 268588819,
        "user_id": 20529132,
        "timestamp": "2022-04-05T20:54:42.491550",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 268437353,
        "user_id": 24466561,
        "timestamp": "2022-04-05T20:55:13.496578",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 268333373,
        "user_id": 28877984,
        "timestamp": "2022-04-05T20:55:44.943558",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "out": "o"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "scratch": "backspace",
                    "del": "delete",
                    "void": "space"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "smite": "`",
                    "drip": ",",
                    "semi": ";",
                    "smote": "'",
                    "squad": "]",
                    "equit": "=",
                    "crop": "+",
                    "quest": "?",
                    "doll": "$",
                    "scout": "_",
                    "cot": ":",
                    "caught": ":",
                    "bend": "(",
                    "rend": ")",
                    "burl": "{",
                    "curl": "}",
                    "splat": "*",
                    "perco": "%",
                    "insta": "@"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.function_key",
                "commands": {
                    "F key one": "f1",
                    "F key two": "f2",
                    "F key three": "f3",
                    "F key four": "f4",
                    "F key five": "f5",
                    "F key six": "f6",
                    "F key seven": "f7",
                    "F key eight": "f8",
                    "F key nine": "f9",
                    "F key ten": "f10",
                    "F key eleven": "f11",
                    "F key twelve": "f12"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "bar (debug|run)": "user.vscode(\"workbench.view.debug\")",
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")",
                    "take less": "user.vscode(\"editor.action.smartSelect.shrink\")",
                    "take (more|this)": "user.vscode(\"editor.action.smartSelect.expand\")",
                    "reload window": "user.vscode(\"workbench.action.reloadWindow\")",
                    "close window": "user.vscode(\"workbench.action.closeWindow\")",
                    "take word": "user.vscode(\"editor.action.addSelectionToNextFindMatch\")"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "kick": "mouse_click(0)\nuser.grid_close()\nuser.mouse_drag_end()",
                    "psychic": "mouse_click(1)\nuser.grid_close()",
                    "midkick": "mouse_click(2)\nuser.grid_close()",
                    "<user.modifiers> kick": "key(\"{modifiers}:down\")\nmouse_click(0)\nkey(\"{modifiers}:up\")\nuser.grid_close()",
                    "<user.modifiers> psychic": "key(\"{modifiers}:down\")\nmouse_click(1)\nkey(\"{modifiers}:up\")\nuser.grid_close()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "drowse": "speech.disable()"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "(num|numb) <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "find that": "edit.find()",
                    "find next": "edit.find_next()",
                    "line delete": "edit.delete_line()",
                    "move in": "edit.indent_more()",
                    "move out": "edit.indent_less()",
                    "sauce": "edit.up()",
                    "dunce": "edit.down()",
                    "lease": "edit.left()",
                    "ross": "edit.right()",
                    "pinch": "edit.page_up()",
                    "punch": "edit.page_down()",
                    "struck out": "edit.file_end()",
                    "strike out": "edit.file_start()",
                    "role": "edit.word_right()",
                    "lord": "edit.word_left()",
                    "strike": "edit.line_start()",
                    "struck": "edit.line_end()",
                    "take all": "edit.select_all()",
                    "take ross": "edit.extend_right()",
                    "take lease": "edit.extend_left()",
                    "take start": "edit.extend_file_start()",
                    "take end": "edit.extend_file_end()",
                    "take line": "edit.select_line()",
                    "take strike": "edit.extend_line_start()",
                    "take struck": "edit.extend_line_end()",
                    "take word": "edit.select_word()",
                    "take lord": "edit.extend_word_left()",
                    "take role": "edit.extend_word_right()"
                }
            }
        ]
    },
    {
        "repo_id": 268076627,
        "user_id": 5120858,
        "timestamp": "2022-04-05T20:56:17.210001",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 267140863,
        "user_id": 7101437,
        "timestamp": "2022-04-05T20:56:48.291923",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 266382222,
        "user_id": 1672198,
        "timestamp": "2022-04-05T20:57:19.690987",
        "branch": "livioso",
        "command_groups": [
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "(address copy | url copy | copy address | copy url)": "browser.focus_address()\nsleep(50ms)\nedit.copy()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            }
        ]
    },
    {
        "repo_id": 265252318,
        "user_id": 824653,
        "timestamp": "2022-04-05T20:57:50.683692",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 265147686,
        "user_id": 5149913,
        "timestamp": "2022-04-05T20:58:21.770208",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 265075675,
        "user_id": 65195073,
        "timestamp": "2022-04-05T20:58:53.467964",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 265000961,
        "user_id": 23029324,
        "timestamp": "2022-04-05T20:59:24.513835",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 264501308,
        "user_id": 11707739,
        "timestamp": "2022-04-05T20:59:55.682835",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 264230788,
        "user_id": 7613966,
        "timestamp": "2022-04-05T21:00:26.712629",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 263009933,
        "user_id": 13691822,
        "timestamp": "2022-04-05T21:00:57.940796",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 261881557,
        "user_id": 3040,
        "timestamp": "2022-04-05T21:01:28.996112",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 261841439,
        "user_id": 279612,
        "timestamp": "2022-04-05T21:02:00.031515",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 261146606,
        "user_id": 3083638,
        "timestamp": "2022-04-05T21:02:32.321536",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "no": "key(backspace)"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "run <user.launch_applications>": "user.switcher_launch(launch_applications)"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "mute": "key(mute)",
                    "play next": "key(next)",
                    "play previous": "key(prev)"
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "say <user.text>": "user.insert_formatted(text, \"NOOP\")",
                    "say <user.text> over": "user.insert_formatted(text, \"NOOP\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/mouse.talon",
                "context": "mouse",
                "commands": {
                    "central": "mouse_click(2)\nuser.grid_close()"
                }
            },
            {
                "file": "modes/dictation_mode.talon",
                "context": "dictation mode",
                "commands": {
                    "go up <number_small> lines": "edit.up()\nrepeat(number_small - 1)",
                    "go down <number_small> lines": "edit.down()\nrepeat(number_small - 1)",
                    "go left <number_small> words": "edit.word_left()\nrepeat(number_small - 1)",
                    "go right <number_small> words": "edit.word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)",
                    "select right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)",
                    "select left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)",
                    "select right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)",
                    "clear left <number_small> words": "edit.extend_word_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> words": "edit.extend_word_right()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear left <number_small> characters": "edit.extend_left()\nrepeat(number_small - 1)\nedit.delete()",
                    "clear right <number_small> characters": "edit.extend_right()\nrepeat(number_small - 1)\nedit.delete()"
                }
            },
            {
                "file": "lang/talon/talon.talon",
                "context": "talon",
                "commands": {
                    "lunix require": "insert(\"os: linux\\n\")"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            },
            {
                "file": "text/homophones_open.talon",
                "context": "homophones open",
                "commands": {
                    "pick <number_small>": "result = user.homophones_select(number_small)\ninsert(result)\nuser.homophones_hide()",
                    "pick <user.formatters> <number_small>": "result = user.homophones_select(number_small)\ninsert(user.formatted_text(result, formatters))\nuser.homophones_hide()"
                }
            },
            {
                "file": "text/line_commands.talon",
                "context": "line commands",
                "commands": {
                    "paste <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()",
                    "replace <number> until <number>": "user.select_range(number_1, number_2)\nedit.paste()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "cut everything": "edit.select_all()\nedit.cut()"
                }
            }
        ]
    },
    {
        "repo_id": 260735564,
        "user_id": 500119,
        "timestamp": "2022-04-05T21:03:03.276314",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 260316468,
        "user_id": 1389549,
        "timestamp": "2022-04-05T21:03:34.300398",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 259433533,
        "user_id": 5678977,
        "timestamp": "2022-04-05T21:04:05.595401",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "troll": "ctrl"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "show keyboard shortcuts": "key(?)",
                    "move selection down": "key(j)",
                    "move selection up": "key(k)",
                    "toggle selection": "key(x)",
                    "open selection": "key(o)",
                    "find file": "key(t)",
                    "switch (branch|tag)": "key(w)",
                    "expand url": "key(y)",
                    "(show|hide) [all] in line notes": "key(i)",
                    "create [an] issue": "key(c)",
                    "submit comment": "key(ctrl-enter)",
                    "preview comment": "key(ctrl-shift-p)",
                    "close form": "key(escape)",
                    "mute thread": "key(shift-m)",
                    "open issue": "key(o)"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "daddy": "user.file_manager_open_parent()"
                }
            },
            {
                "file": "apps/kubectl/kubectl.talon",
                "context": "kubectl",
                "commands": {
                    "cube rolling-update": "\"kubectl rolling-update \""
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "inside (squares | list)": "insert(\"[]\")\nkey(left)",
                    "inside quotes": "insert('\"\"')\nkey(left)"
                }
            }
        ]
    },
    {
        "repo_id": 259113388,
        "user_id": 6349369,
        "timestamp": "2022-04-05T21:04:36.869019",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 257315987,
        "user_id": 9889378,
        "timestamp": "2022-04-05T21:05:07.823959",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "dell": "d",
                    "jort": "j",
                    "koop": "k",
                    "lug": "l",
                    "oak": "o",
                    "zuko": "z"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "(undo that | skunks)": "edit.undo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "misc/help.talon",
                "context": "help",
                "commands": {
                    "help all": "user.help_context()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "search for": "edit.find()"
                }
            }
        ]
    },
    {
        "repo_id": 256858087,
        "user_id": 314009,
        "timestamp": "2022-04-05T21:05:38.822623",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "gun": "g",
                    "hut": "u"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()",
                    "hide running": "user.switcher_hide_running()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "(abbreviate|abreviate|brief) <user.abbreviation>": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "hide command history": "user.history_disable()",
                    "clear command history": "user.history_clear()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "(open | new) tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 256775335,
        "user_id": 4771794,
        "timestamp": "2022-04-05T21:06:09.784055",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "gun": "g",
                    "hut": "u"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            }
        ]
    },
    {
        "repo_id": 255445240,
        "user_id": 287396,
        "timestamp": "2022-04-05T21:06:40.795292",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "gun": "g",
                    "hut": "u"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            },
            {
                "file": "apps/file_manager.talon",
                "context": "file manager",
                "commands": {
                    "force title": "user.file_manager_refresh_title()",
                    "hide options": "user.file_manager_hide_pickers()",
                    "daddy": "user.file_manager_open_parent()",
                    "next folders": "user.file_manager_next_folder_page()",
                    "previous folders": "user.file_manager_previous_folder_page()",
                    "next files": "user.file_manager_next_file_page()",
                    "previous files": "user.file_manager_previous_file_page()"
                }
            },
            {
                "file": "text/homophones.talon",
                "context": "homophones",
                "commands": {
                    "phones": "user.homophones_show_selection()",
                    "force phones <user.homophones_canonical>": "user.homophones_force_show(homophones_canonical)",
                    "force phones": "user.homophones_force_show_selection()",
                    "hide phones": "user.homophones_hide()"
                }
            }
        ]
    },
    {
        "repo_id": 253763855,
        "user_id": 13679876,
        "timestamp": "2022-04-05T21:07:13.900205",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "fin": "f",
                    "peck": "p",
                    "yell": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace",
                    "delhi": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "calm": ",",
                    "semi": ";",
                    "tick": "'",
                    "locker": "[",
                    "rocker": "]",
                    "stroke": "\\",
                    "question": "?",
                    "wave": "~",
                    "score": "_",
                    "coal": ":",
                    "lub": "(",
                    "rub": ")",
                    "lacky": "{",
                    "racky": "}",
                    "langle": "<",
                    "cent": "%",
                    "swirl": "@",
                    "piper": "|"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "calm": ",",
                    "bang": "!",
                    "amper": "&",
                    "swirl": "@"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "file find": "key(t)"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "pasty": "edit.paste()"
                }
            },
            {
                "file": "misc/media.talon",
                "context": "media",
                "commands": {
                    "media mute": "key(mute)",
                    "media next": "key(next)",
                    "media previous": "key(prev)"
                }
            },
            {
                "file": "misc/macro.talon",
                "context": "macro",
                "commands": {
                    "voice macro record": "user.macro_record()",
                    "voice macro stop": "user.macro_stop()",
                    "voice macro play": "user.macro_play()"
                }
            },
            {
                "file": "misc/abbreviate.talon",
                "context": "abbreviate",
                "commands": {
                    "brief {user.abbreviation}": "\"{abbreviation}\""
                }
            },
            {
                "file": "misc/formatters.talon",
                "context": "formatters",
                "commands": {
                    "<user.format_text>+ [over]": "user.insert_many(format_text_list)",
                    "(only|lonely) <user.word>": "user.insert_formatted(user.word, \"NOOP\")",
                    "(nope that | scratch that)": "user.clear_last_phrase()"
                }
            },
            {
                "file": "misc/websites_and_search_engines.talon",
                "context": "websites and search engines",
                "commands": {
                    "browse {user.website}": "user.open_url(website)"
                }
            },
            {
                "file": "misc/repeater.talon",
                "context": "repeater",
                "commands": {
                    "repeat <user.ordinals>": "core.repeat_command(ordinals-1)",
                    "repeat <number_small> times": "core.repeat_command(number_small)"
                }
            },
            {
                "file": "misc/git.talon",
                "context": "git",
                "commands": {
                    "git add (changed|everything)": "\"git add -u\\n\"",
                    "git branch (remove|delete)": "\"git branch -d \"",
                    "git branch remote": "\"git branch --remote\\n\"",
                    "git clone clip": "insert(\"git clone \")\nedit.paste()\nkey(enter)",
                    "git status full": "\"git status\\n\"",
                    "git [sub] module add": "\"git submodule add \""
                }
            },
            {
                "file": "misc/history.talon",
                "context": "history",
                "commands": {
                    "[command] history show": "user.history_toggle()",
                    "[command] history close": "user.history_disable()",
                    "[command] history clear": "user.history_clear()",
                    "[command] history less": "user.history_less()",
                    "[command] history more": "user.history_more()"
                }
            },
            {
                "file": "misc/keys.talon",
                "context": "keys",
                "commands": {
                    "press <user.function_key>": "key(function_key)"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tabby (open | new)": "app.tab_open()",
                    "tabby last": "app.tab_previous()",
                    "tabby next": "app.tab_next()",
                    "tabby reopen": "app.tab_reopen()",
                    "go tabby <number>": "user.tab_jump(number)",
                    "go tabby final": "user.tab_final()",
                    "tabby (duplicate)": "user.tab_duplicate()"
                }
            },
            {
                "file": "modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "debug mode disable": "mode.disable(\"user.gdb\")"
                }
            },
            {
                "file": "mouse/mouse.talon",
                "context": "mouse",
                "commands": {
                    "(mouse|run) calibration": "user.mouse_calibrate()",
                    "[(enable|disable)] zoom mouse": "user.mouse_toggle_zoom_mouse()"
                }
            },
            {
                "file": "text/symbols.talon",
                "context": "symbols",
                "commands": {
                    "score": "\"_\"",
                    "triple tick": "\"'''\"",
                    "(ellipses|dotty)": "\"...\"",
                    "empty (string|quotes)": "insert('\"\"')\nkey(left)",
                    "empty ticks": "\"''\"\nkey(left)",
                    "empty round": "insert(\"()\")\nkey(left)",
                    "empty (square | list)": "insert(\"[]\")\nkey(left)",
                    "empty (bracket | braces)": "insert(\"{}\")\nkey(left)",
                    "empty percent": "insert(\"%%\")\nkey(left)",
                    "angles that": "text = edit.selected_text()\nuser.paste(\"<{text}>\")",
                    "(squares) that": "text = edit.selected_text()\nuser.paste(\"[{text}]\")",
                    "(braces) that": "text = edit.selected_text()\nuser.paste(\"{{{text}}}\")",
                    "round that": "text = edit.selected_text()\nuser.paste(\"({text})\")"
                }
            },
            {
                "file": "text/numbers.talon",
                "context": "numbers",
                "commands": {
                    "numb <user.number_string>": "\"{number_string}\""
                }
            },
            {
                "file": "text/generic_editor.talon",
                "context": "generic editor",
                "commands": {
                    "search": "edit.find()",
                    "go (word left|back)": "edit.word_left()",
                    "go (word right|word)": "edit.word_right()",
                    "[go] left": "edit.left()",
                    "[go] right": "edit.right()",
                    "(go up|north)": "edit.up()",
                    "(go down|south)": "edit.down()",
                    "go (line start|head)": "edit.line_start()",
                    "go (line end|tail)": "edit.line_end()",
                    "scroll": "edit.page_down()",
                    "(go page up|punk)": "edit.page_up()",
                    "select (up|north)": "edit.extend_line_up()",
                    "select (down|south)": "edit.extend_line_down()",
                    "select (way left|bend)": "edit.extend_line_start()",
                    "select (way right|lend)": "edit.extend_line_end()",
                    "select (way up|loft)": "edit.extend_file_start()",
                    "select (way down|gut)": "edit.extend_file_end()"
                }
            }
        ]
    },
    {
        "repo_id": 253432877,
        "user_id": 3946314,
        "timestamp": "2022-04-05T21:07:48.030533",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "fin": "f",
                    "peck": "p",
                    "yell": "y"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.modifier_key",
                "commands": {
                    "alter": "alt"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "junk": "backspace",
                    "delhi": "delete"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "calm": ",",
                    "semi": ";",
                    "tick": "'",
                    "locker": "[",
                    "rocker": "]",
                    "stroke": "\\",
                    "question": "?",
                    "wave": "~",
                    "score": "_",
                    "coal": ":",
                    "lub": "(",
                    "rub": ")",
                    "lacky": "{",
                    "racky": "}",
                    "langle": "<",
                    "cent": "%",
                    "swirl": "@",
                    "piper": "|"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "calm": ",",
                    "bang": "!",
                    "amper": "&",
                    "swirl": "@"
                }
            },
            {
                "file": "apps/platforms/linux/keepassx.talon",
                "context": "linux keepassx",
                "commands": {
                    "quit program": "key(ctrl-q)"
                }
            },
            {
                "file": "apps/platforms/linux/taskwarrior/taskwarrior.talon",
                "context": "linux taskwarrior",
                "commands": {
                    "task view <user.text>": "\"task list project:{text}\\n\"",
                    "task next": "\"task next\\n\"",
                    "task <number> (edit|at it)": "\"task {number} edit\"",
                    "task (<number> done|done <number>)": "\"task {number} done\"",
                    "task done <number>": "\"task {number} done\"",
                    "task (<number> delete|delete <number>)": "\"task {number} delete\""
                }
            },
            {
                "file": "apps/gdb/gdb.talon",
                "context": "gdb",
                "commands": {
                    "display (assembly line|program counter|P C)": "\"display /i $pc\\n\"",
                    "(thread list|info threads)": "\"info threads\\n\"",
                    "info inferiors": "\"info inferiors\\n\"",
                    "resume from main": "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "file find": "key(t)"
                }
            },
            {
                "file": "apps/generic_debugger.talon",
                "context": "generic debugger",
                "commands": {
                    "(step over|next) line": "user.debugger_step_over_line()",
                    "(step out|finish)": "user.debugger_step_out()",
                    "(show|info) registers": "user.debugger_show_registers()",
                    "break (now|into)": "user.debugger_break_now()",
                    "break [point] (list|show)": "user.debugger_show_breakpoints()",
                    "break [point] (set|add)": "user.debugger_add_sw_breakpoint()",
                    "break [point] (set|add) hardware": "user.debugger_add_hw_breakpoint()",
                    "break [point] (clear|remove) all": "user.debugger_clear_all_breakpoints()",
                    "break [point] (clear|remove)": "user.debugger_clear_breakpoint()",
                    "break [point] (clear|remove) <number_small>": "user.debugger_clear_breakpoint_id(number_small)",
                    "break [point] disable all": "user.debugger_disable_all_breakpoints()",
                    "break [point] disable": "user.debugger_disable_breakpoint()",
                    "break [point] disable <number_small>": "user.debugger_disable_breakpoint_id(number_small)",
                    "break [point] enable all": "user.debugger_enable_all_breakpoints()",
                    "break [point] enable": "user.debugger_enable_breakpoint()",
                    "break [point] enable <number_small>": "user.debugger_enable_breakpoint_id(number_small)",
                    "(disassemble|dizzy)": "user.debugger_disassemble()",
                    "(disassemble|dizzy) here": "user.debugger_disassemble_here()",
                    "(disassemble|dizzy) clip": "user.debugger_disassemble_clipboard()",
                    "clear command": "user.debugger_clear_line()"
                }
            },
            {
                "file": "apps/i3wm/i3wm.talon",
                "context": "i3wm",
                "commands": {
                    "portal <number_small>": "user.system_command(\"i3-msg workspace {number_small}\")",
                    "portal ten": "user.system_command(\"i3-msg workspace 10\")",
                    "(portal flip|flipper)": "user.system_command(\"i3-msg workspace back_and_forth\")",
                    "portal right": "user.system_command(\"i3-msg workspace next\")",
                    "portal left": "user.system_command(\"i3-msg workspace prev\")",
                    "(win|window) kill": "user.system_command(\"i3-msg kill\")",
                    "(win|window) stack": "user.system_command(\"i3-msg layout stacking\")",
                    "window focus parent": "user.system_command(\"i3-msg focus parent\")",
                    "window focus child": "user.system_command(\"i3-msg focus child\")",
                    "[window] full screen": "user.system_command(\"i3-msg fullscreen\")",
                    "[window] floating toggle": "user.system_command(\"i3-msg floating toggle\")",
                    "[window] floating focus": "user.system_command(\"i3-msg focus mode_toggle\")",
                    "window center": "user.system_command(\"i3-msg move position center\")",
                    "window move left": "user.system_command(\"i3-msg move left\")",
                    "window move right": "user.system_command(\"i3-msg move right\")",
                    "window move up": "user.system_command(\"i3-msg move up\")",
                    "window move down": "user.system_command(\"i3-msg move down\")",
                    "window resize": "user.system_command('i3-msg mode \"resize\"')",
                    "shuffle <number_small>": "user.system_command(\"i3-msg move container to workspace {number_small}\")",
                    "shuffle ten": "user.system_command(\"i3-msg move container to workspace 10\")",
                    "shuffle flip": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                    "shuffle left": "user.system_command(\"i3-msg move left\")",
                    "shuffle right": "user.system_command(\"i3-msg move right\")",
                    "shuffle up": "user.system_command(\"i3-msg move up\")",
                    "shuffle down": "user.system_command(\"i3-msg move down\")",
                    "[window] make scratch": "user.system_command(\"i3-msg move scratchpad\")",
                    "screen lock": "user.i3wm_launch()",
                    "term me": "user.i3wm_shell()",
                    "i three reload": "user.system_command(\"i3-msg reload\")",
                    "i three restart": "user.system_command(\"i3-msg restart\")"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "debug mode disable": "mode.disable(\"user.gdb\")"
                }
            }
        ]
    },
    {
        "repo_id": 253386344,
        "user_id": 3613189,
        "timestamp": "2022-04-05T21:08:19.469670",
        "branch": "trapiers",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/platforms/linux/keepassx.talon",
                "context": "linux keepassx",
                "commands": {
                    "quit program": "key(ctrl-q)"
                }
            },
            {
                "file": "apps/platforms/linux/taskwarrior/taskwarrior.talon",
                "context": "linux taskwarrior",
                "commands": {
                    "task view <user.text>": "\"task list project:{text}\\n\"",
                    "task next": "\"task next\\n\"",
                    "task <number> (edit|at it)": "\"task {number} edit\"",
                    "task (<number> done|done <number>)": "\"task {number} done\"",
                    "task done <number>": "\"task {number} done\"",
                    "task (<number> delete|delete <number>)": "\"task {number} delete\""
                }
            },
            {
                "file": "apps/gdb/gdb.talon",
                "context": "gdb",
                "commands": {
                    "display (assembly line|program counter|P C)": "\"display /i $pc\\n\"",
                    "(thread list|info threads)": "\"info threads\\n\"",
                    "info inferiors": "\"info inferiors\\n\"",
                    "resume from main": "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "file find": "key(t)"
                }
            },
            {
                "file": "apps/generic_debugger.talon",
                "context": "generic debugger",
                "commands": {
                    "(step over|next) line": "user.debugger_step_over_line()",
                    "(step out|finish)": "user.debugger_step_out()",
                    "(show|info) registers": "user.debugger_show_registers()",
                    "break (now|into)": "user.debugger_break_now()",
                    "break [point] (list|show)": "user.debugger_show_breakpoints()",
                    "break [point] (set|add)": "user.debugger_add_sw_breakpoint()",
                    "break [point] (set|add) hardware": "user.debugger_add_hw_breakpoint()",
                    "break [point] (clear|remove) all": "user.debugger_clear_all_breakpoints()",
                    "break [point] (clear|remove)": "user.debugger_clear_breakpoint()",
                    "break [point] (clear|remove) <number_small>": "user.debugger_clear_breakpoint_id(number_small)",
                    "break [point] disable all": "user.debugger_disable_all_breakpoints()",
                    "break [point] disable": "user.debugger_disable_breakpoint()",
                    "break [point] disable <number_small>": "user.debugger_disable_breakpoint_id(number_small)",
                    "break [point] enable all": "user.debugger_enable_all_breakpoints()",
                    "break [point] enable": "user.debugger_enable_breakpoint()",
                    "break [point] enable <number_small>": "user.debugger_enable_breakpoint_id(number_small)",
                    "(disassemble|dizzy)": "user.debugger_disassemble()",
                    "(disassemble|dizzy) here": "user.debugger_disassemble_here()",
                    "(disassemble|dizzy) clip": "user.debugger_disassemble_clipboard()",
                    "clear command": "user.debugger_clear_line()"
                }
            },
            {
                "file": "apps/i3wm/i3wm.talon",
                "context": "i3wm",
                "commands": {
                    "portal <number_small>": "user.system_command(\"i3-msg workspace {number_small}\")",
                    "portal ten": "user.system_command(\"i3-msg workspace 10\")",
                    "(portal flip|flipper)": "user.system_command(\"i3-msg workspace back_and_forth\")",
                    "portal right": "user.system_command(\"i3-msg workspace next\")",
                    "portal left": "user.system_command(\"i3-msg workspace prev\")",
                    "(win|window) kill": "user.system_command(\"i3-msg kill\")",
                    "(win|window) stack": "user.system_command(\"i3-msg layout stacking\")",
                    "window focus parent": "user.system_command(\"i3-msg focus parent\")",
                    "window focus child": "user.system_command(\"i3-msg focus child\")",
                    "[window] full screen": "user.system_command(\"i3-msg fullscreen\")",
                    "[window] floating toggle": "user.system_command(\"i3-msg floating toggle\")",
                    "[window] floating focus": "user.system_command(\"i3-msg focus mode_toggle\")",
                    "window center": "user.system_command(\"i3-msg move position center\")",
                    "window move left": "user.system_command(\"i3-msg move left\")",
                    "window move right": "user.system_command(\"i3-msg move right\")",
                    "window move up": "user.system_command(\"i3-msg move up\")",
                    "window move down": "user.system_command(\"i3-msg move down\")",
                    "window resize": "user.system_command('i3-msg mode \"resize\"')",
                    "shuffle <number_small>": "user.system_command(\"i3-msg move container to workspace {number_small}\")",
                    "shuffle ten": "user.system_command(\"i3-msg move container to workspace 10\")",
                    "shuffle flip": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                    "shuffle left": "user.system_command(\"i3-msg move left\")",
                    "shuffle right": "user.system_command(\"i3-msg move right\")",
                    "shuffle up": "user.system_command(\"i3-msg move up\")",
                    "shuffle down": "user.system_command(\"i3-msg move down\")",
                    "[window] make scratch": "user.system_command(\"i3-msg move scratchpad\")",
                    "screen lock": "user.i3wm_launch()",
                    "term me": "user.i3wm_shell()",
                    "i three reload": "user.system_command(\"i3-msg reload\")",
                    "i three restart": "user.system_command(\"i3-msg restart\")"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "modes/language_modes.talon",
                "context": "language modes",
                "commands": {
                    "debug mode disable": "mode.disable(\"user.gdb\")"
                }
            },
            {
                "file": "lang/tags/data_null.talon",
                "context": "data null",
                "commands": {
                    "state (no | nil | null)": "user.code_insert_null()"
                }
            },
            {
                "file": "lang/tags/functions.talon",
                "context": "functions",
                "commands": {
                    "is type {user.code_type}": "user.code_insert_type_annotation(code_type)",
                    "returns [type] {user.code_type}": "user.code_insert_return_type(code_type)"
                }
            },
            {
                "file": "lang/c/c.talon",
                "context": "c",
                "commands": {
                    "declare <user.c_variable> <user.letter>": "insert(\"{c_variable} {letter} \")",
                    "[state] type <user.c_types>": "\"{c_types}\""
                }
            }
        ]
    },
    {
        "repo_id": 253360438,
        "user_id": 5565479,
        "timestamp": "2022-04-05T21:08:50.897377",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/platforms/linux/keepassx.talon",
                "context": "linux keepassx",
                "commands": {
                    "quit program": "key(ctrl-q)"
                }
            },
            {
                "file": "apps/platforms/linux/taskwarrior/taskwarrior.talon",
                "context": "linux taskwarrior",
                "commands": {
                    "task view <user.text>": "\"task list project:{text}\\n\"",
                    "task next": "\"task next\\n\"",
                    "task <number> (edit|at it)": "\"task {number} edit\"",
                    "task (<number> done|done <number>)": "\"task {number} done\"",
                    "task done <number>": "\"task {number} done\"",
                    "task (<number> delete|delete <number>)": "\"task {number} delete\""
                }
            },
            {
                "file": "apps/gdb/gdb.talon",
                "context": "gdb",
                "commands": {
                    "display (assembly line|program counter|P C)": "\"display /i $pc\\n\"",
                    "(thread list|info threads)": "\"info threads\\n\"",
                    "info inferiors": "\"info inferiors\\n\"",
                    "resume from main": "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "file find": "key(t)"
                }
            },
            {
                "file": "apps/generic_debugger.talon",
                "context": "generic debugger",
                "commands": {
                    "(step over|next) line": "user.debugger_step_over_line()",
                    "(step out|finish)": "user.debugger_step_out()",
                    "(show|info) registers": "user.debugger_show_registers()",
                    "break (now|into)": "user.debugger_break_now()",
                    "break [point] (list|show)": "user.debugger_show_breakpoints()",
                    "break [point] (set|add)": "user.debugger_add_sw_breakpoint()",
                    "break [point] (set|add) hardware": "user.debugger_add_hw_breakpoint()",
                    "break [point] (clear|remove) all": "user.debugger_clear_all_breakpoints()",
                    "break [point] (clear|remove)": "user.debugger_clear_breakpoint()",
                    "break [point] (clear|remove) <number_small>": "user.debugger_clear_breakpoint_id(number_small)",
                    "break [point] disable all": "user.debugger_disable_all_breakpoints()",
                    "break [point] disable": "user.debugger_disable_breakpoint()",
                    "break [point] disable <number_small>": "user.debugger_disable_breakpoint_id(number_small)",
                    "break [point] enable all": "user.debugger_enable_all_breakpoints()",
                    "break [point] enable": "user.debugger_enable_breakpoint()",
                    "break [point] enable <number_small>": "user.debugger_enable_breakpoint_id(number_small)",
                    "(disassemble|dizzy)": "user.debugger_disassemble()",
                    "(disassemble|dizzy) here": "user.debugger_disassemble_here()",
                    "(disassemble|dizzy) clip": "user.debugger_disassemble_clipboard()",
                    "clear command": "user.debugger_clear_line()"
                }
            },
            {
                "file": "apps/i3wm/i3wm.talon",
                "context": "i3wm",
                "commands": {
                    "portal <number_small>": "user.system_command(\"i3-msg workspace {number_small}\")",
                    "portal ten": "user.system_command(\"i3-msg workspace 10\")",
                    "(portal flip|flipper)": "user.system_command(\"i3-msg workspace back_and_forth\")",
                    "portal right": "user.system_command(\"i3-msg workspace next\")",
                    "portal left": "user.system_command(\"i3-msg workspace prev\")",
                    "(win|window) kill": "user.system_command(\"i3-msg kill\")",
                    "(win|window) stack": "user.system_command(\"i3-msg layout stacking\")",
                    "window focus parent": "user.system_command(\"i3-msg focus parent\")",
                    "window focus child": "user.system_command(\"i3-msg focus child\")",
                    "[window] full screen": "user.system_command(\"i3-msg fullscreen\")",
                    "[window] floating toggle": "user.system_command(\"i3-msg floating toggle\")",
                    "[window] floating focus": "user.system_command(\"i3-msg focus mode_toggle\")",
                    "window center": "user.system_command(\"i3-msg move position center\")",
                    "window move left": "user.system_command(\"i3-msg move left\")",
                    "window move right": "user.system_command(\"i3-msg move right\")",
                    "window move up": "user.system_command(\"i3-msg move up\")",
                    "window move down": "user.system_command(\"i3-msg move down\")",
                    "window resize": "user.system_command('i3-msg mode \"resize\"')",
                    "shuffle <number_small>": "user.system_command(\"i3-msg move container to workspace {number_small}\")",
                    "shuffle ten": "user.system_command(\"i3-msg move container to workspace 10\")",
                    "shuffle flip": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                    "shuffle left": "user.system_command(\"i3-msg move left\")",
                    "shuffle right": "user.system_command(\"i3-msg move right\")",
                    "shuffle up": "user.system_command(\"i3-msg move up\")",
                    "shuffle down": "user.system_command(\"i3-msg move down\")",
                    "[window] make scratch": "user.system_command(\"i3-msg move scratchpad\")",
                    "screen lock": "user.i3wm_launch()",
                    "term me": "user.i3wm_shell()",
                    "i three reload": "user.system_command(\"i3-msg reload\")",
                    "i three restart": "user.system_command(\"i3-msg restart\")"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            }
        ]
    },
    {
        "repo_id": 253084709,
        "user_id": 187354,
        "timestamp": "2022-04-05T21:09:21.788061",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/platforms/linux/taskwarrior/taskwarrior.talon",
                "context": "linux taskwarrior",
                "commands": {
                    "task view <user.text>": "\"task list project:{text}\\n\"",
                    "task next": "\"task next\\n\"",
                    "task <number> (edit|at it)": "\"task {number} edit\"",
                    "task (<number> done|done <number>)": "\"task {number} done\"",
                    "task done <number>": "\"task {number} done\"",
                    "task (<number> delete|delete <number>)": "\"task {number} delete\""
                }
            },
            {
                "file": "apps/gdb/gdb.talon",
                "context": "gdb",
                "commands": {
                    "display (assembly line|program counter|P C)": "\"display /i $pc\\n\"",
                    "(thread list|info threads)": "\"info threads\\n\"",
                    "info inferiors": "\"info inferiors\\n\"",
                    "resume from main": "insert(\"inferior 1\\n\")\ninsert(\"c\\n\")"
                }
            },
            {
                "file": "apps/web/github.talon",
                "context": "github",
                "commands": {
                    "file find": "key(t)"
                }
            },
            {
                "file": "apps/i3wm/i3wm.talon",
                "context": "i3wm",
                "commands": {
                    "portal <number_small>": "user.system_command(\"i3-msg workspace {number_small}\")",
                    "portal ten": "user.system_command(\"i3-msg workspace 10\")",
                    "(portal flip|flipper)": "user.system_command(\"i3-msg workspace back_and_forth\")",
                    "portal right": "user.system_command(\"i3-msg workspace next\")",
                    "portal left": "user.system_command(\"i3-msg workspace prev\")",
                    "(win|window) kill": "user.system_command(\"i3-msg kill\")",
                    "(win|window) stack": "user.system_command(\"i3-msg layout stacking\")",
                    "window focus parent": "user.system_command(\"i3-msg focus parent\")",
                    "window focus child": "user.system_command(\"i3-msg focus child\")",
                    "[window] full screen": "user.system_command(\"i3-msg fullscreen\")",
                    "[window] floating toggle": "user.system_command(\"i3-msg floating toggle\")",
                    "[window] floating focus": "user.system_command(\"i3-msg focus mode_toggle\")",
                    "window center": "user.system_command(\"i3-msg move position center\")",
                    "window move left": "user.system_command(\"i3-msg move left\")",
                    "window move right": "user.system_command(\"i3-msg move right\")",
                    "window move up": "user.system_command(\"i3-msg move up\")",
                    "window move down": "user.system_command(\"i3-msg move down\")",
                    "window resize": "user.system_command('i3-msg mode \"resize\"')",
                    "shuffle <number_small>": "user.system_command(\"i3-msg move container to workspace {number_small}\")",
                    "shuffle ten": "user.system_command(\"i3-msg move container to workspace 10\")",
                    "shuffle flip": "user.system_command(\"i3-msg move container to workspace back_and_forth\")",
                    "shuffle left": "user.system_command(\"i3-msg move left\")",
                    "shuffle right": "user.system_command(\"i3-msg move right\")",
                    "shuffle up": "user.system_command(\"i3-msg move up\")",
                    "shuffle down": "user.system_command(\"i3-msg move down\")",
                    "[window] make scratch": "user.system_command(\"i3-msg move scratchpad\")",
                    "screen lock": "user.i3wm_launch()",
                    "term me": "user.i3wm_shell()",
                    "i three reload": "user.system_command(\"i3-msg reload\")",
                    "i three restart": "user.system_command(\"i3-msg restart\")"
                }
            },
            {
                "file": "apps/generic_terminal/generic_terminal.talon",
                "context": "generic terminal",
                "commands": {
                    "file (list here|lisa)": "user.terminal_list_directories()",
                    "file (list long here|lily)": "user.terminal_list_all_directories()",
                    "run last [command]": "user.terminal_run_last()"
                }
            },
            {
                "file": "apps/vscode/vscode.talon",
                "context": "vscode",
                "commands": {
                    "git commit ammend": "user.vscode(\"git.commitStagedAmend\")"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "tab last": "app.tab_previous()",
                    "tab reopen": "app.tab_reopen()"
                }
            },
            {
                "file": "modes/wake_up.talon",
                "context": "wake up",
                "commands": {
                    "sleep all": "user.switcher_hide_running()\nuser.history_disable()\nuser.homophones_hide()\nuser.help_hide()\nuser.mouse_sleep()\nspeech.disable()\nuser.engine_sleep()",
                    "talon sleep": "speech.disable()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "reload it": "browser.reload()",
                    "reload it hard": "browser.reload_hard()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            }
        ]
    },
    {
        "repo_id": 251687093,
        "user_id": 582133,
        "timestamp": "2022-04-05T21:09:52.679015",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "reload it": "browser.reload()",
                    "reload it hard": "browser.reload_hard()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            }
        ]
    },
    {
        "repo_id": 251439585,
        "user_id": 567000,
        "timestamp": "2022-04-05T21:10:24.029001",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 250833527,
        "user_id": 9398481,
        "timestamp": "2022-04-05T21:10:54.948611",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 250621197,
        "user_id": 91972,
        "timestamp": "2022-04-05T21:11:26.342208",
        "branch": "personal",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 250298215,
        "user_id": 29916215,
        "timestamp": "2022-04-05T21:11:57.369594",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 249500418,
        "user_id": 19349,
        "timestamp": "2022-04-05T21:12:28.842196",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 248855369,
        "user_id": 2822010,
        "timestamp": "2022-04-05T21:12:59.823266",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 248471893,
        "user_id": 2271290,
        "timestamp": "2022-04-05T21:13:31.090909",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 247501390,
        "user_id": 459631,
        "timestamp": "2022-04-05T21:30:29.484397",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 246150333,
        "user_id": 3289426,
        "timestamp": "2022-04-05T21:31:00.930319",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 245662201,
        "user_id": 25167,
        "timestamp": "2022-04-05T21:31:32.271271",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 245575817,
        "user_id": 40249668,
        "timestamp": "2022-04-05T21:32:03.364163",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            }
        ]
    },
    {
        "repo_id": 241652958,
        "user_id": 13386344,
        "timestamp": "2022-04-05T21:32:34.135336",
        "branch": "master",
        "command_groups": [
            {
                "file": "code/keys.py",
                "context": "user.letter",
                "commands": {
                    "amp": "a",
                    "blue": "b",
                    "caf": "c",
                    "eve": "e",
                    "fox": "f",
                    "ilk": "i",
                    "keel": "k",
                    "nose": "n",
                    "oak": "o",
                    "pal": "p"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.special_key",
                "commands": {
                    "strike": "delete",
                    "smack": "backspace"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.symbol_key",
                "commands": {
                    "hyphen": "-",
                    "bee tick": "`",
                    "wink": ";",
                    "trophy": "'",
                    "quest": "?",
                    "squiggle": "~",
                    "dolly": "$",
                    "score": "_",
                    "loan": ":",
                    "open square": "[",
                    "close square": "]",
                    "open par": "(",
                    "close par": ")",
                    "open curly": "{",
                    "close curly": "}",
                    "open fork": "<",
                    "close fork": ">",
                    "hat": "^",
                    "swirl": "@",
                    "Percy": "%",
                    "be tick": "`",
                    "*": "*"
                }
            },
            {
                "file": "code/keys.py",
                "context": "user.punctuation",
                "commands": {
                    "be tick": "`",
                    "quest": "?",
                    "bang": "!",
                    "*": "*",
                    "hash": "#",
                    "Percy": "%",
                    "swirl": "@",
                    "amper": "&",
                    "dolly": "$"
                }
            },
            {
                "file": "misc/standard.talon",
                "context": "standard",
                "commands": {
                    "zoom [in]": "edit.zoom_in()",
                    "copy": "edit.copy()",
                    "cut": "edit.cut()",
                    "paste": "edit.paste()",
                    "(undo | under | skunks)": "edit.undo()",
                    "redo": "edit.redo()"
                }
            },
            {
                "file": "misc/window_management.talon",
                "context": "window management",
                "commands": {
                    "new window": "app.window_open()",
                    "next window": "app.window_next()",
                    "last window": "app.window_previous()",
                    "close window": "app.window_close()"
                }
            },
            {
                "file": "misc/tabs.talon",
                "context": "tabs",
                "commands": {
                    "open tab": "app.tab_open()",
                    "last tab": "app.tab_previous()",
                    "next tab": "app.tab_next()",
                    "reopen tab": "app.tab_reopen()"
                }
            },
            {
                "file": "apps/generic_browser.talon",
                "context": "generic browser",
                "commands": {
                    "(address bar | go address | go url)": "browser.focus_address()",
                    "forward": "browser.go_forward()",
                    "go back[ward]": "browser.go_back()",
                    "bookmark bar": "browser.bookmarks_bar()",
                    "reload it": "browser.reload()",
                    "reload it hard": "browser.reload_hard()",
                    "dev tools": "browser.toggle_dev_tools()"
                }
            }
        ]
    }
]